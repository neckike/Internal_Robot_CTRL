ARM GAS  /tmp/ccIosnR5.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 1
   4              		.eabi_attribute 28, 1
   5              		.fpu fpv4-sp-d16
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 1
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.thumb
  16              		.syntax unified
  17              		.file	"stm32f3xx_it.c"
  18              		.text
  19              	.Ltext0:
  20              		.cfi_sections	.debug_frame
  21              		.section	.text.DMA1_Channel6_IRQHandler,"ax",%progbits
  22              		.align	2
  23              		.global	DMA1_Channel6_IRQHandler
  24              		.thumb
  25              		.thumb_func
  27              	DMA1_Channel6_IRQHandler:
  28              	.LFB129:
  29              		.file 1 "Src/stm32f3xx_it.c"
   1:Src/stm32f3xx_it.c **** /**
   2:Src/stm32f3xx_it.c ****   ******************************************************************************
   3:Src/stm32f3xx_it.c ****   * @file    stm32f3xx_it.c
   4:Src/stm32f3xx_it.c ****   * @brief   Interrupt Service Routines.
   5:Src/stm32f3xx_it.c ****   ******************************************************************************
   6:Src/stm32f3xx_it.c ****   *
   7:Src/stm32f3xx_it.c ****   * COPYRIGHT(c) 2017 STMicroelectronics
   8:Src/stm32f3xx_it.c ****   *
   9:Src/stm32f3xx_it.c ****   * Redistribution and use in source and binary forms, with or without modification,
  10:Src/stm32f3xx_it.c ****   * are permitted provided that the following conditions are met:
  11:Src/stm32f3xx_it.c ****   *   1. Redistributions of source code must retain the above copyright notice,
  12:Src/stm32f3xx_it.c ****   *      this list of conditions and the following disclaimer.
  13:Src/stm32f3xx_it.c ****   *   2. Redistributions in binary form must reproduce the above copyright notice,
  14:Src/stm32f3xx_it.c ****   *      this list of conditions and the following disclaimer in the documentation
  15:Src/stm32f3xx_it.c ****   *      and/or other materials provided with the distribution.
  16:Src/stm32f3xx_it.c ****   *   3. Neither the name of STMicroelectronics nor the names of its contributors
  17:Src/stm32f3xx_it.c ****   *      may be used to endorse or promote products derived from this software
  18:Src/stm32f3xx_it.c ****   *      without specific prior written permission.
  19:Src/stm32f3xx_it.c ****   *
  20:Src/stm32f3xx_it.c ****   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  21:Src/stm32f3xx_it.c ****   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  22:Src/stm32f3xx_it.c ****   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  23:Src/stm32f3xx_it.c ****   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  24:Src/stm32f3xx_it.c ****   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  25:Src/stm32f3xx_it.c ****   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  26:Src/stm32f3xx_it.c ****   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  27:Src/stm32f3xx_it.c ****   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  28:Src/stm32f3xx_it.c ****   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  29:Src/stm32f3xx_it.c ****   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
ARM GAS  /tmp/ccIosnR5.s 			page 2


  30:Src/stm32f3xx_it.c ****   *
  31:Src/stm32f3xx_it.c ****   ******************************************************************************
  32:Src/stm32f3xx_it.c ****   */
  33:Src/stm32f3xx_it.c **** /* Includes ------------------------------------------------------------------*/
  34:Src/stm32f3xx_it.c **** #include "stm32f3xx_hal.h"
  35:Src/stm32f3xx_it.c **** #include "stm32f3xx.h"
  36:Src/stm32f3xx_it.c **** #include "stm32f3xx_it.h"
  37:Src/stm32f3xx_it.c **** #include "cmsis_os.h"
  38:Src/stm32f3xx_it.c **** #include "usart.h"
  39:Src/stm32f3xx_it.c **** /* USER CODE BEGIN 0 */
  40:Src/stm32f3xx_it.c **** 
  41:Src/stm32f3xx_it.c **** /* USER CODE END 0 */
  42:Src/stm32f3xx_it.c **** 
  43:Src/stm32f3xx_it.c **** /* External variables --------------------------------------------------------*/
  44:Src/stm32f3xx_it.c **** extern TIM_HandleTypeDef htim1;
  45:Src/stm32f3xx_it.c **** extern TIM_HandleTypeDef htim7;
  46:Src/stm32f3xx_it.c **** extern DMA_HandleTypeDef hdma_usart2_tx;
  47:Src/stm32f3xx_it.c **** extern DMA_HandleTypeDef hdma_usart2_rx;
  48:Src/stm32f3xx_it.c **** extern int txDoneFlag;
  49:Src/stm32f3xx_it.c **** /******************************************************************************/
  50:Src/stm32f3xx_it.c **** /*            Cortex-M4 Processor Interruption and Exception Handlers         */ 
  51:Src/stm32f3xx_it.c **** /******************************************************************************/
  52:Src/stm32f3xx_it.c **** 
  53:Src/stm32f3xx_it.c **** /**
  54:Src/stm32f3xx_it.c **** * @brief This function handles System tick timer.
  55:Src/stm32f3xx_it.c **** */
  56:Src/stm32f3xx_it.c **** //void SysTick_Handler(void)
  57:Src/stm32f3xx_it.c **** //{
  58:Src/stm32f3xx_it.c **** //  /* USER CODE BEGIN SysTick_IRQn 0 */
  59:Src/stm32f3xx_it.c **** //
  60:Src/stm32f3xx_it.c **** //  /* USER CODE END SysTick_IRQn 0 */
  61:Src/stm32f3xx_it.c **** //  osSystickHandler();
  62:Src/stm32f3xx_it.c **** //  /* USER CODE BEGIN SysTick_IRQn 1 */
  63:Src/stm32f3xx_it.c **** //
  64:Src/stm32f3xx_it.c **** //  /* USER CODE END SysTick_IRQn 1 */
  65:Src/stm32f3xx_it.c **** //}
  66:Src/stm32f3xx_it.c **** 
  67:Src/stm32f3xx_it.c **** /******************************************************************************/
  68:Src/stm32f3xx_it.c **** /* STM32F3xx Peripheral Interrupt Handlers                                    */
  69:Src/stm32f3xx_it.c **** /* Add here the Interrupt Handlers for the used peripherals.                  */
  70:Src/stm32f3xx_it.c **** /* For the available peripheral interrupt handler names,                      */
  71:Src/stm32f3xx_it.c **** /* please refer to the startup file (startup_stm32f3xx.s).                    */
  72:Src/stm32f3xx_it.c **** /******************************************************************************/
  73:Src/stm32f3xx_it.c **** /**
  74:Src/stm32f3xx_it.c **** * @brief This function handles DMA1 channel6 global interrupt.
  75:Src/stm32f3xx_it.c **** */
  76:Src/stm32f3xx_it.c **** 		//RX
  77:Src/stm32f3xx_it.c **** void DMA1_Channel6_IRQHandler(void)
  78:Src/stm32f3xx_it.c **** {
  30              		.loc 1 78 0
  31              		.cfi_startproc
  32              		@ args = 0, pretend = 0, frame = 0
  33              		@ frame_needed = 0, uses_anonymous_args = 0
  34 0000 10B5     		push	{r4, lr}
  35              	.LCFI0:
  36              		.cfi_def_cfa_offset 8
  37              		.cfi_offset 4, -8
ARM GAS  /tmp/ccIosnR5.s 			page 3


  38              		.cfi_offset 14, -4
  79:Src/stm32f3xx_it.c ****   /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */
  80:Src/stm32f3xx_it.c **** 	//HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_SET);	//LED8_ORANGE
  81:Src/stm32f3xx_it.c **** 	  if(DMA1->ISR & DMA_FLAG_TC6){
  39              		.loc 1 81 0
  40 0002 0A4B     		ldr	r3, .L4
  41 0004 1B68     		ldr	r3, [r3]
  42 0006 13F4001F 		tst	r3, #2097152
  43 000a 0BD0     		beq	.L2
  82:Src/stm32f3xx_it.c **** 		  DMA1->IFCR = DMA_FLAG_TC6;
  44              		.loc 1 82 0
  45 000c 074C     		ldr	r4, .L4
  46 000e 4FF40013 		mov	r3, #2097152
  47 0012 6360     		str	r3, [r4, #4]
  83:Src/stm32f3xx_it.c **** 
  84:Src/stm32f3xx_it.c **** 
  85:Src/stm32f3xx_it.c **** 		  //HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
  86:Src/stm32f3xx_it.c **** 		  HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_8);	//LED4_BLUE
  48              		.loc 1 86 0
  49 0014 4FF48071 		mov	r1, #256
  50 0018 0548     		ldr	r0, .L4+4
  51 001a FFF7FEFF 		bl	HAL_GPIO_TogglePin
  52              	.LVL0:
  87:Src/stm32f3xx_it.c **** 
  88:Src/stm32f3xx_it.c **** 		  DMA1->IFCR = DMA_FLAG_GL6 | DMA_FLAG_HT6 | DMA_FLAG_TC6 | DMA_FLAG_TE6;
  53              		.loc 1 88 0
  54 001e 4FF47003 		mov	r3, #15728640
  55 0022 6360     		str	r3, [r4, #4]
  56              	.L2:
  89:Src/stm32f3xx_it.c **** 	  }
  90:Src/stm32f3xx_it.c ****   /* USER CODE END DMA1_Channel6_IRQn 0 */
  91:Src/stm32f3xx_it.c **** 
  92:Src/stm32f3xx_it.c ****   HAL_DMA_IRQHandler(&hdma_usart2_rx);
  57              		.loc 1 92 0
  58 0024 0348     		ldr	r0, .L4+8
  59 0026 FFF7FEFF 		bl	HAL_DMA_IRQHandler
  60              	.LVL1:
  61 002a 10BD     		pop	{r4, pc}
  62              	.L5:
  63              		.align	2
  64              	.L4:
  65 002c 00000240 		.word	1073872896
  66 0030 00100048 		.word	1207963648
  67 0034 00000000 		.word	hdma_usart2_rx
  68              		.cfi_endproc
  69              	.LFE129:
  71              		.section	.text.DMA1_Channel7_IRQHandler,"ax",%progbits
  72              		.align	2
  73              		.global	DMA1_Channel7_IRQHandler
  74              		.thumb
  75              		.thumb_func
  77              	DMA1_Channel7_IRQHandler:
  78              	.LFB130:
  93:Src/stm32f3xx_it.c ****   /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */
  94:Src/stm32f3xx_it.c **** 
  95:Src/stm32f3xx_it.c **** 
  96:Src/stm32f3xx_it.c ****   /* USER CODE END DMA1_Channel6_IRQn 1 */
ARM GAS  /tmp/ccIosnR5.s 			page 4


  97:Src/stm32f3xx_it.c **** }
  98:Src/stm32f3xx_it.c **** 
  99:Src/stm32f3xx_it.c **** /**
 100:Src/stm32f3xx_it.c **** * @brief This function handles DMA1 channel7 global interrupt.
 101:Src/stm32f3xx_it.c **** */
 102:Src/stm32f3xx_it.c **** 
 103:Src/stm32f3xx_it.c **** 	//TX
 104:Src/stm32f3xx_it.c **** void DMA1_Channel7_IRQHandler(void)
 105:Src/stm32f3xx_it.c **** {
  79              		.loc 1 105 0
  80              		.cfi_startproc
  81              		@ args = 0, pretend = 0, frame = 0
  82              		@ frame_needed = 0, uses_anonymous_args = 0
  83 0000 08B5     		push	{r3, lr}
  84              	.LCFI1:
  85              		.cfi_def_cfa_offset 8
  86              		.cfi_offset 3, -8
  87              		.cfi_offset 14, -4
 106:Src/stm32f3xx_it.c **** 	//HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 107:Src/stm32f3xx_it.c ****   /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */
 108:Src/stm32f3xx_it.c **** 	  if(DMA1->ISR & DMA_FLAG_TC7){
  88              		.loc 1 108 0
  89 0002 104B     		ldr	r3, .L9
  90 0004 1B68     		ldr	r3, [r3]
  91 0006 13F0007F 		tst	r3, #33554432
  92 000a 17D0     		beq	.L7
 109:Src/stm32f3xx_it.c **** 		  //HAL_NVIC_EnableIRQ(USART2_IRQn);
 110:Src/stm32f3xx_it.c **** 		  __HAL_UART_ENABLE_IT(&huart2, UART_IT_TC);			//enable USART TC interrupt
  93              		.loc 1 110 0
  94 000c 0E4B     		ldr	r3, .L9+4
  95 000e 1A68     		ldr	r2, [r3]
  96 0010 1368     		ldr	r3, [r2]
  97 0012 43F04003 		orr	r3, r3, #64
  98 0016 1360     		str	r3, [r2]
 111:Src/stm32f3xx_it.c **** 		  DMA1->IFCR = DMA_FLAG_TC7;							//clear TC flags
  99              		.loc 1 111 0
 100 0018 0A4A     		ldr	r2, .L9
 101 001a 4FF00073 		mov	r3, #33554432
 102 001e 5360     		str	r3, [r2, #4]
 112:Src/stm32f3xx_it.c **** 		  __HAL_DMA_DISABLE_IT(&hdma_usart2_tx, DMA_IT_TC);		//disable DMA TC interrupt
 103              		.loc 1 112 0
 104 0020 0A4B     		ldr	r3, .L9+8
 105 0022 1968     		ldr	r1, [r3]
 106 0024 0B68     		ldr	r3, [r1]
 107 0026 23F00203 		bic	r3, r3, #2
 108 002a 0B60     		str	r3, [r1]
 113:Src/stm32f3xx_it.c **** 
 114:Src/stm32f3xx_it.c **** 
 115:Src/stm32f3xx_it.c **** 		  DMA1->IFCR = DMA_FLAG_GL7 | DMA_FLAG_HT7 | DMA_FLAG_TC7 | DMA_FLAG_TE7;	//clear DMA pending bit
 109              		.loc 1 115 0
 110 002c 4FF07063 		mov	r3, #251658240
 111 0030 5360     		str	r3, [r2, #4]
 116:Src/stm32f3xx_it.c **** 
 117:Src/stm32f3xx_it.c **** 		  //txDoneFlag = 1;
 118:Src/stm32f3xx_it.c **** 		  HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_14);	//LED8_ORANGE
 112              		.loc 1 118 0
 113 0032 4FF48041 		mov	r1, #16384
ARM GAS  /tmp/ccIosnR5.s 			page 5


 114 0036 0648     		ldr	r0, .L9+12
 115 0038 FFF7FEFF 		bl	HAL_GPIO_TogglePin
 116              	.LVL2:
 117              	.L7:
 119:Src/stm32f3xx_it.c **** 
 120:Src/stm32f3xx_it.c **** 		  //HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 121:Src/stm32f3xx_it.c **** 	  }
 122:Src/stm32f3xx_it.c **** 	//HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_SET);	//LED8_ORANGE
 123:Src/stm32f3xx_it.c **** 	//__HAL_GPIO_EXTI_GET_FLAG(DMA_FLAG_TC7);
 124:Src/stm32f3xx_it.c ****   /* USER CODE END DMA1_Channel7_IRQn 0 */
 125:Src/stm32f3xx_it.c **** 	//HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_SET);	//LED8_ORANGE
 126:Src/stm32f3xx_it.c ****   HAL_DMA_IRQHandler(&hdma_usart2_tx);
 118              		.loc 1 126 0
 119 003c 0348     		ldr	r0, .L9+8
 120 003e FFF7FEFF 		bl	HAL_DMA_IRQHandler
 121              	.LVL3:
 122 0042 08BD     		pop	{r3, pc}
 123              	.L10:
 124              		.align	2
 125              	.L9:
 126 0044 00000240 		.word	1073872896
 127 0048 00000000 		.word	huart2
 128 004c 00000000 		.word	hdma_usart2_tx
 129 0050 00100048 		.word	1207963648
 130              		.cfi_endproc
 131              	.LFE130:
 133              		.section	.text.USART2_IRQHandler,"ax",%progbits
 134              		.align	2
 135              		.global	USART2_IRQHandler
 136              		.thumb
 137              		.thumb_func
 139              	USART2_IRQHandler:
 140              	.LFB131:
 127:Src/stm32f3xx_it.c ****   //HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_SET);	//LED8_ORANGE
 128:Src/stm32f3xx_it.c **** 
 129:Src/stm32f3xx_it.c **** 
 130:Src/stm32f3xx_it.c ****   /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */
 131:Src/stm32f3xx_it.c **** 
 132:Src/stm32f3xx_it.c **** //  while(HAL_DMA_GetState(&hdma_usart2_tx) == HAL_DMA_STATE_BUSY){
 133:Src/stm32f3xx_it.c **** //	  //HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_SET);	//LED8_ORANGE
 134:Src/stm32f3xx_it.c **** //  }
 135:Src/stm32f3xx_it.c ****   //HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_RESET);	//LED8_ORANGE
 136:Src/stm32f3xx_it.c ****   //HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 137:Src/stm32f3xx_it.c ****   /* USER CODE END DMA1_Channel7_IRQn 1 */
 138:Src/stm32f3xx_it.c **** }
 139:Src/stm32f3xx_it.c **** /**
 140:Src/stm32f3xx_it.c **** * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line
 141:Src/stm32f3xx_it.c **** */
 142:Src/stm32f3xx_it.c **** void USART2_IRQHandler(void)
 143:Src/stm32f3xx_it.c **** {
 141              		.loc 1 143 0
 142              		.cfi_startproc
 143              		@ args = 0, pretend = 0, frame = 0
 144              		@ frame_needed = 0, uses_anonymous_args = 0
 145 0000 08B5     		push	{r3, lr}
 146              	.LCFI2:
 147              		.cfi_def_cfa_offset 8
ARM GAS  /tmp/ccIosnR5.s 			page 6


 148              		.cfi_offset 3, -8
 149              		.cfi_offset 14, -4
 144:Src/stm32f3xx_it.c **** 
 145:Src/stm32f3xx_it.c ****   /* USER CODE BEGIN USART2_IRQn 0 */
 146:Src/stm32f3xx_it.c **** 	if(__HAL_UART_GET_FLAG(&huart2, UART_FLAG_TC)){
 150              		.loc 1 146 0
 151 0002 0F4B     		ldr	r3, .L14
 152 0004 1B68     		ldr	r3, [r3]
 153 0006 DB69     		ldr	r3, [r3, #28]
 154 0008 13F0400F 		tst	r3, #64
 155 000c 13D0     		beq	.L12
 147:Src/stm32f3xx_it.c **** 		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);	//prepare to receive DE signal
 156              		.loc 1 147 0
 157 000e 0022     		movs	r2, #0
 158 0010 0221     		movs	r1, #2
 159 0012 4FF09040 		mov	r0, #1207959552
 160 0016 FFF7FEFF 		bl	HAL_GPIO_WritePin
 161              	.LVL4:
 148:Src/stm32f3xx_it.c **** 
 149:Src/stm32f3xx_it.c **** 
 150:Src/stm32f3xx_it.c **** 
 151:Src/stm32f3xx_it.c **** 		__HAL_UART_DISABLE_IT(&huart2, UART_IT_TC);		//disable TC interrupt
 162              		.loc 1 151 0
 163 001a 094A     		ldr	r2, .L14
 164 001c 1168     		ldr	r1, [r2]
 165 001e 0B68     		ldr	r3, [r1]
 166 0020 23F04003 		bic	r3, r3, #64
 167 0024 0B60     		str	r3, [r1]
 152:Src/stm32f3xx_it.c **** 		__HAL_UART_CLEAR_FLAG(&huart2, UART_CLEAR_TCF);	//clear TC pending bit
 168              		.loc 1 152 0
 169 0026 1368     		ldr	r3, [r2]
 170 0028 4022     		movs	r2, #64
 171 002a 1A62     		str	r2, [r3, #32]
 153:Src/stm32f3xx_it.c **** 		HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_12);  	//LED9_BLUE
 172              		.loc 1 153 0
 173 002c 4FF48051 		mov	r1, #4096
 174 0030 0448     		ldr	r0, .L14+4
 175 0032 FFF7FEFF 		bl	HAL_GPIO_TogglePin
 176              	.LVL5:
 177              	.L12:
 154:Src/stm32f3xx_it.c **** 
 155:Src/stm32f3xx_it.c **** 	}
 156:Src/stm32f3xx_it.c **** 
 157:Src/stm32f3xx_it.c **** 	//HAL_NVIC_DisableIRQ(USART2_IRQn);
 158:Src/stm32f3xx_it.c **** 	//USART2->ISR
 159:Src/stm32f3xx_it.c ****   /* USER CODE END USART2_IRQn 0 */
 160:Src/stm32f3xx_it.c **** 	 //HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_12);  	//LED9_BLUE
 161:Src/stm32f3xx_it.c ****   HAL_UART_IRQHandler(&huart2);
 178              		.loc 1 161 0
 179 0036 0248     		ldr	r0, .L14
 180 0038 FFF7FEFF 		bl	HAL_UART_IRQHandler
 181              	.LVL6:
 182 003c 08BD     		pop	{r3, pc}
 183              	.L15:
 184 003e 00BF     		.align	2
 185              	.L14:
 186 0040 00000000 		.word	huart2
ARM GAS  /tmp/ccIosnR5.s 			page 7


 187 0044 00100048 		.word	1207963648
 188              		.cfi_endproc
 189              	.LFE131:
 191              		.section	.text.TIM7_IRQHandler,"ax",%progbits
 192              		.align	2
 193              		.global	TIM7_IRQHandler
 194              		.thumb
 195              		.thumb_func
 197              	TIM7_IRQHandler:
 198              	.LFB132:
 162:Src/stm32f3xx_it.c ****   /* USER CODE BEGIN USART2_IRQn 1 */
 163:Src/stm32f3xx_it.c **** 
 164:Src/stm32f3xx_it.c ****   /* USER CODE END USART2_IRQn 1 */
 165:Src/stm32f3xx_it.c **** }
 166:Src/stm32f3xx_it.c **** 
 167:Src/stm32f3xx_it.c **** /**
 168:Src/stm32f3xx_it.c **** * @brief This function handles TIM7 global interrupt.
 169:Src/stm32f3xx_it.c **** */
 170:Src/stm32f3xx_it.c **** 
 171:Src/stm32f3xx_it.c **** //void TIM1_CC_IRQHandler(void)
 172:Src/stm32f3xx_it.c **** //{
 173:Src/stm32f3xx_it.c **** //  /* USER CODE BEGIN TIM1_CC_IRQn 0 */
 174:Src/stm32f3xx_it.c **** //
 175:Src/stm32f3xx_it.c **** //  /* USER CODE END TIM1_CC_IRQn 0 */
 176:Src/stm32f3xx_it.c **** //  HAL_TIM_IRQHandler(&htim1);
 177:Src/stm32f3xx_it.c **** //  /* USER CODE BEGIN TIM1_CC_IRQn 1 */
 178:Src/stm32f3xx_it.c **** //
 179:Src/stm32f3xx_it.c **** //  /* USER CODE END TIM1_CC_IRQn 1 */
 180:Src/stm32f3xx_it.c **** //}
 181:Src/stm32f3xx_it.c **** 
 182:Src/stm32f3xx_it.c **** void TIM7_IRQHandler(void)
 183:Src/stm32f3xx_it.c **** {
 199              		.loc 1 183 0
 200              		.cfi_startproc
 201              		@ args = 0, pretend = 0, frame = 0
 202              		@ frame_needed = 0, uses_anonymous_args = 0
 203 0000 08B5     		push	{r3, lr}
 204              	.LCFI3:
 205              		.cfi_def_cfa_offset 8
 206              		.cfi_offset 3, -8
 207              		.cfi_offset 14, -4
 184:Src/stm32f3xx_it.c ****   /* USER CODE BEGIN TIM7_IRQn 0 */
 185:Src/stm32f3xx_it.c **** 
 186:Src/stm32f3xx_it.c ****   /* USER CODE END TIM7_IRQn 0 */
 187:Src/stm32f3xx_it.c ****   HAL_TIM_IRQHandler(&htim7);
 208              		.loc 1 187 0
 209 0002 0248     		ldr	r0, .L18
 210 0004 FFF7FEFF 		bl	HAL_TIM_IRQHandler
 211              	.LVL7:
 212 0008 08BD     		pop	{r3, pc}
 213              	.L19:
 214 000a 00BF     		.align	2
 215              	.L18:
 216 000c 00000000 		.word	htim7
 217              		.cfi_endproc
 218              	.LFE132:
 220              		.comm	DMA_Sensor_TxComplete,1,1
ARM GAS  /tmp/ccIosnR5.s 			page 8


 221              		.comm	DMA_Sensor_RxComplete,1,1
 222              		.comm	DMA_Bluetooth_TxComplete,1,1
 223              		.comm	DMA_Bluetooth_RxComplete,1,1
 224              		.text
 225              	.Letext0:
 226              		.file 2 "/opt/gcc-arm-none-eabi-5_4-2016q3/arm-none-eabi/include/machine/_default_types.h"
 227              		.file 3 "/opt/gcc-arm-none-eabi-5_4-2016q3/arm-none-eabi/include/sys/_stdint.h"
 228              		.file 4 "Drivers/CMSIS/Device/ST/STM32F3xx/Include/stm32f303xc.h"
 229              		.file 5 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_def.h"
 230              		.file 6 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_gpio.h"
 231              		.file 7 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_dma.h"
 232              		.file 8 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_tim.h"
 233              		.file 9 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_uart.h"
 234              		.file 10 "Drivers/CMSIS/Include/core_cm4.h"
 235              		.file 11 "Inc/usart.h"
ARM GAS  /tmp/ccIosnR5.s 			page 9


DEFINED SYMBOLS
                            *ABS*:00000000 stm32f3xx_it.c
     /tmp/ccIosnR5.s:22     .text.DMA1_Channel6_IRQHandler:00000000 $t
     /tmp/ccIosnR5.s:27     .text.DMA1_Channel6_IRQHandler:00000000 DMA1_Channel6_IRQHandler
     /tmp/ccIosnR5.s:65     .text.DMA1_Channel6_IRQHandler:0000002c $d
     /tmp/ccIosnR5.s:72     .text.DMA1_Channel7_IRQHandler:00000000 $t
     /tmp/ccIosnR5.s:77     .text.DMA1_Channel7_IRQHandler:00000000 DMA1_Channel7_IRQHandler
     /tmp/ccIosnR5.s:126    .text.DMA1_Channel7_IRQHandler:00000044 $d
     /tmp/ccIosnR5.s:134    .text.USART2_IRQHandler:00000000 $t
     /tmp/ccIosnR5.s:139    .text.USART2_IRQHandler:00000000 USART2_IRQHandler
     /tmp/ccIosnR5.s:186    .text.USART2_IRQHandler:00000040 $d
     /tmp/ccIosnR5.s:192    .text.TIM7_IRQHandler:00000000 $t
     /tmp/ccIosnR5.s:197    .text.TIM7_IRQHandler:00000000 TIM7_IRQHandler
     /tmp/ccIosnR5.s:216    .text.TIM7_IRQHandler:0000000c $d
                            *COM*:00000001 DMA_Sensor_TxComplete
                            *COM*:00000001 DMA_Sensor_RxComplete
                            *COM*:00000001 DMA_Bluetooth_TxComplete
                            *COM*:00000001 DMA_Bluetooth_RxComplete
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
HAL_GPIO_TogglePin
HAL_DMA_IRQHandler
hdma_usart2_rx
huart2
hdma_usart2_tx
HAL_GPIO_WritePin
HAL_UART_IRQHandler
HAL_TIM_IRQHandler
htim7
