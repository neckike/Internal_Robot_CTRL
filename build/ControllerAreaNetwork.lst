ARM GAS  /tmp/ccjIUWXI.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 1
   4              		.eabi_attribute 28, 1
   5              		.fpu fpv4-sp-d16
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 1
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.thumb
  16              		.syntax unified
  17              		.file	"ControllerAreaNetwork.c"
  18              		.text
  19              	.Ltext0:
  20              		.cfi_sections	.debug_frame
  21              		.section	.text.can_transmit_data_frame_pd,"ax",%progbits
  22              		.align	2
  23              		.global	can_transmit_data_frame_pd
  24              		.thumb
  25              		.thumb_func
  27              	can_transmit_data_frame_pd:
  28              	.LFB129:
  29              		.file 1 "Src/ControllerAreaNetwork.c"
   1:Src/ControllerAreaNetwork.c **** /*
   2:Src/ControllerAreaNetwork.c ****  * ControllerAreaNetwork.c
   3:Src/ControllerAreaNetwork.c ****  *
   4:Src/ControllerAreaNetwork.c ****  *  Created on: May 4, 2017
   5:Src/ControllerAreaNetwork.c ****  *      Author: uwlau
   6:Src/ControllerAreaNetwork.c ****  */
   7:Src/ControllerAreaNetwork.c **** #include <stdlib.h>
   8:Src/ControllerAreaNetwork.c **** #include <string.h>
   9:Src/ControllerAreaNetwork.c **** #include <stdbool.h>
  10:Src/ControllerAreaNetwork.c **** #include "ControllerAreaNetwork.h"
  11:Src/ControllerAreaNetwork.c **** #include <unistd.h>
  12:Src/ControllerAreaNetwork.c **** 
  13:Src/ControllerAreaNetwork.c **** 
  14:Src/ControllerAreaNetwork.c **** #ifdef rPI_DAEbot
  15:Src/ControllerAreaNetwork.c **** 	#include <linux/can.h>
  16:Src/ControllerAreaNetwork.c **** 	#include <linux/can/raw.h>
  17:Src/ControllerAreaNetwork.c **** 	#include <net/if.h>
  18:Src/ControllerAreaNetwork.c **** 	#include <sys/types.h>
  19:Src/ControllerAreaNetwork.c **** 	#include <sys/socket.h>
  20:Src/ControllerAreaNetwork.c **** 	#include <sys/ioctl.h>
  21:Src/ControllerAreaNetwork.c **** 
  22:Src/ControllerAreaNetwork.c **** #endif
  23:Src/ControllerAreaNetwork.c **** 
  24:Src/ControllerAreaNetwork.c **** #ifdef STM32F3_DAEbot
  25:Src/ControllerAreaNetwork.c **** 	#include "main.h"
  26:Src/ControllerAreaNetwork.c **** 	#include "stm32f3xx_hal.h"
  27:Src/ControllerAreaNetwork.c **** 	#include "cmsis_os.h"
  28:Src/ControllerAreaNetwork.c **** 	#include "ultrasonic.h"
  29:Src/ControllerAreaNetwork.c **** 	#include "usart.h"
ARM GAS  /tmp/ccjIUWXI.s 			page 2


  30:Src/ControllerAreaNetwork.c **** 	#include "gpio.h"
  31:Src/ControllerAreaNetwork.c **** 	#include "internal_sensors.h"
  32:Src/ControllerAreaNetwork.c **** 	#include "can_stm.h"
  33:Src/ControllerAreaNetwork.c **** 
  34:Src/ControllerAreaNetwork.c **** 
  35:Src/ControllerAreaNetwork.c **** 	CAN_HandleTypeDef hcan;
  36:Src/ControllerAreaNetwork.c **** 	CanRxMsgTypeDef RxMessage;
  37:Src/ControllerAreaNetwork.c **** 	CanTxMsgTypeDef TxMessage;
  38:Src/ControllerAreaNetwork.c **** 	can_frame_types_t receivedMessage;
  39:Src/ControllerAreaNetwork.c **** 	int errrx;
  40:Src/ControllerAreaNetwork.c **** 	int errtx;
  41:Src/ControllerAreaNetwork.c **** #endif
  42:Src/ControllerAreaNetwork.c **** 
  43:Src/ControllerAreaNetwork.c **** #ifdef rPI_DAEbot
  44:Src/ControllerAreaNetwork.c **** inline ExitStatus_t can_bind_socket_pd (can_socket_t *can_socket)
  45:Src/ControllerAreaNetwork.c **** {
  46:Src/ControllerAreaNetwork.c **** 
  47:Src/ControllerAreaNetwork.c **** 	if((can_socket->socket = socket(PF_CAN, SOCK_RAW, CAN_RAW)) < 0) {
  48:Src/ControllerAreaNetwork.c **** 		return STATUS_ERROR;
  49:Src/ControllerAreaNetwork.c **** 	}
  50:Src/ControllerAreaNetwork.c **** 
  51:Src/ControllerAreaNetwork.c **** 	strcpy(can_socket->ifr.ifr_ifrn.ifrn_name, "can0");
  52:Src/ControllerAreaNetwork.c **** 
  53:Src/ControllerAreaNetwork.c **** 	ioctl(can_socket->socket, SIOCGIFINDEX, &can_socket->ifr);
  54:Src/ControllerAreaNetwork.c **** 
  55:Src/ControllerAreaNetwork.c **** 	can_socket->addr.can_family = AF_CAN;
  56:Src/ControllerAreaNetwork.c **** 
  57:Src/ControllerAreaNetwork.c **** 	can_socket->addr.can_ifindex = can_socket->ifr.ifr_ifru.ifru_ivalue;
  58:Src/ControllerAreaNetwork.c **** 
  59:Src/ControllerAreaNetwork.c **** 	if(bind(can_socket->socket, (struct sockaddr *)&can_socket->addr, sizeof(can_socket->addr)) < 0) {
  60:Src/ControllerAreaNetwork.c **** 		return STATUS_ERROR;
  61:Src/ControllerAreaNetwork.c **** 	}
  62:Src/ControllerAreaNetwork.c **** 
  63:Src/ControllerAreaNetwork.c **** 
  64:Src/ControllerAreaNetwork.c **** 	return STATUS_OK;
  65:Src/ControllerAreaNetwork.c **** 
  66:Src/ControllerAreaNetwork.c **** }
  67:Src/ControllerAreaNetwork.c **** #endif
  68:Src/ControllerAreaNetwork.c **** 
  69:Src/ControllerAreaNetwork.c **** #ifdef rPI_DAEbot
  70:Src/ControllerAreaNetwork.c **** inline ExitStatus_t can_transmit_data_frame_pd(can_frame_types_t *can_frame_types, can_socket_t *ca
  71:Src/ControllerAreaNetwork.c **** 
  72:Src/ControllerAreaNetwork.c **** 		struct can_frame frame;
  73:Src/ControllerAreaNetwork.c **** 	//#endif
  74:Src/ControllerAreaNetwork.c **** 
  75:Src/ControllerAreaNetwork.c **** 	//#ifdef rPI_DAEbot
  76:Src/ControllerAreaNetwork.c **** 		// code the identifier
  77:Src/ControllerAreaNetwork.c **** 		frame.can_id = can_code_identifier_pd(&can_frame_types->priority_id, &can_frame_types->c_s_bit_id
  78:Src/ControllerAreaNetwork.c **** 		// data lenght (1 = 8 Bit)
  79:Src/ControllerAreaNetwork.c **** 		frame.can_dlc = can_frame_types->dlc;
  80:Src/ControllerAreaNetwork.c **** 		// as dlc is one, we only have data[0] (8 Bit)
  81:Src/ControllerAreaNetwork.c **** 		for (uint8_t i = 0; (i + 1) <= frame.can_dlc; i++)
  82:Src/ControllerAreaNetwork.c **** 		{
  83:Src/ControllerAreaNetwork.c **** 			frame.data[i] = can_frame_types->data[i];
  84:Src/ControllerAreaNetwork.c **** 		}
  85:Src/ControllerAreaNetwork.c **** 	//#endif
  86:Src/ControllerAreaNetwork.c **** 
ARM GAS  /tmp/ccjIUWXI.s 			page 3


  87:Src/ControllerAreaNetwork.c **** 	//#ifdef rPI_DAEbot
  88:Src/ControllerAreaNetwork.c **** 		write(can_socket->socket, &frame, sizeof(frame));
  89:Src/ControllerAreaNetwork.c **** 		return STATUS_OK;
  90:Src/ControllerAreaNetwork.c **** 	}
  91:Src/ControllerAreaNetwork.c **** #endif
  92:Src/ControllerAreaNetwork.c **** 
  93:Src/ControllerAreaNetwork.c **** 	//#ifdef ARDUINO2560_DAEbot
  94:Src/ControllerAreaNetwork.c **** 	//#endif
  95:Src/ControllerAreaNetwork.c **** #ifdef STM32F3_DAEbot
  96:Src/ControllerAreaNetwork.c **** 	inline ExitStatus_t can_transmit_data_frame_pd(can_frame_types_t *can_frame_types) {
  30              		.loc 1 96 0
  31              		.cfi_startproc
  32              		@ args = 0, pretend = 0, frame = 0
  33              		@ frame_needed = 0, uses_anonymous_args = 0
  34              	.LVL0:
  35 0000 38B5     		push	{r3, r4, r5, lr}
  36              	.LCFI0:
  37              		.cfi_def_cfa_offset 16
  38              		.cfi_offset 3, -16
  39              		.cfi_offset 4, -12
  40              		.cfi_offset 5, -8
  41              		.cfi_offset 14, -4
  97:Src/ControllerAreaNetwork.c **** 		TxMessage.RTR = CAN_RTR_DATA;
  42              		.loc 1 97 0
  43 0002 164D     		ldr	r5, .L6
  44 0004 0023     		movs	r3, #0
  45 0006 EB60     		str	r3, [r5, #12]
  98:Src/ControllerAreaNetwork.c **** 		TxMessage.IDE =  CAN_ID_EXT;
  46              		.loc 1 98 0
  47 0008 0422     		movs	r2, #4
  48 000a AA60     		str	r2, [r5, #8]
  49              	.LVL1:
  50              	.LBB5:
  51              	.LBB6:
  99:Src/ControllerAreaNetwork.c **** 		TxMessage.ExtId= can_code_identifier_pd(&can_frame_types->priority_id, &can_frame_types->c_s_bit_
 100:Src/ControllerAreaNetwork.c **** 		TxMessage.DLC = can_frame_types->dlc;
 101:Src/ControllerAreaNetwork.c **** 
 102:Src/ControllerAreaNetwork.c **** //		uint32_t aux = (uint32_t)(*(uint32_t*)&data);	//data is float
 103:Src/ControllerAreaNetwork.c **** //
 104:Src/ControllerAreaNetwork.c **** //		//aux = (uint16_t)(data);
 105:Src/ControllerAreaNetwork.c **** //		uint8_t datal = (uint8_t)(aux &  0x000000FF);
 106:Src/ControllerAreaNetwork.c **** //		uint8_t datah = (uint8_t)((aux & 0x0000FF00) >> 8);
 107:Src/ControllerAreaNetwork.c **** //
 108:Src/ControllerAreaNetwork.c **** //		TxMessage.Data[0] = datah;
 109:Src/ControllerAreaNetwork.c **** //		TxMessage.Data[1] = datal;
 110:Src/ControllerAreaNetwork.c **** 
 111:Src/ControllerAreaNetwork.c **** 		// as dlc is one, we only have data[0] (8 Bit)
 112:Src/ControllerAreaNetwork.c **** 		for (uint8_t i = 0; (i + 1) <= TxMessage.DLC; i++)
 113:Src/ControllerAreaNetwork.c **** 		{
 114:Src/ControllerAreaNetwork.c **** 			TxMessage.Data[i] = can_frame_types->data[i];
 115:Src/ControllerAreaNetwork.c **** 		}
 116:Src/ControllerAreaNetwork.c **** 		hcan.pTxMsg = &TxMessage;
 117:Src/ControllerAreaNetwork.c **** 
 118:Src/ControllerAreaNetwork.c **** 		errtx=HAL_CAN_Transmit(&hcan,  500);
 119:Src/ControllerAreaNetwork.c **** 
 120:Src/ControllerAreaNetwork.c **** 		if(errtx == HAL_OK){
 121:Src/ControllerAreaNetwork.c **** 			HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_11);		//GREEN
ARM GAS  /tmp/ccjIUWXI.s 			page 4


 122:Src/ControllerAreaNetwork.c **** 		}
 123:Src/ControllerAreaNetwork.c **** 	//#endif
 124:Src/ControllerAreaNetwork.c **** 	//#ifdef STM32F3_DAEbot
 125:Src/ControllerAreaNetwork.c **** 		//HAL_CAN_Transmit(&hcan,  500);
 126:Src/ControllerAreaNetwork.c **** 		return STATUS_OK;
 127:Src/ControllerAreaNetwork.c **** 	}
 128:Src/ControllerAreaNetwork.c **** #endif
 129:Src/ControllerAreaNetwork.c **** 
 130:Src/ControllerAreaNetwork.c **** 
 131:Src/ControllerAreaNetwork.c **** #ifdef rPI_DAEbot
 132:Src/ControllerAreaNetwork.c **** 	inline can_frame_types_t can_receive_data_frame_pd (can_socket_t *can_socket) {
 133:Src/ControllerAreaNetwork.c **** 
 134:Src/ControllerAreaNetwork.c **** 		can_frame_types_t can_frame_types;
 135:Src/ControllerAreaNetwork.c **** 
 136:Src/ControllerAreaNetwork.c **** 
 137:Src/ControllerAreaNetwork.c **** 			read(can_socket->socket, &frame, sizeof(frame));
 138:Src/ControllerAreaNetwork.c **** 
 139:Src/ControllerAreaNetwork.c **** 			//can_frame_types = can_decode_identifier_pd(&frame.can_id);
 140:Src/ControllerAreaNetwork.c **** 			can_frame_types.dlc = frame.can_dlc;
 141:Src/ControllerAreaNetwork.c **** 
 142:Src/ControllerAreaNetwork.c **** 			for (uint8_t i = 0; (i + 1) <= frame.can_dlc ;i++)
 143:Src/ControllerAreaNetwork.c **** 			{
 144:Src/ControllerAreaNetwork.c **** 				can_frame_types.data[i] = frame.data[i];
 145:Src/ControllerAreaNetwork.c **** 			}
 146:Src/ControllerAreaNetwork.c **** 
 147:Src/ControllerAreaNetwork.c **** 			return can_frame_types;
 148:Src/ControllerAreaNetwork.c **** 
 149:Src/ControllerAreaNetwork.c **** 
 150:Src/ControllerAreaNetwork.c **** 		//#ifdef ARDUINO2560_DAEbot
 151:Src/ControllerAreaNetwork.c **** 		//#endif
 152:Src/ControllerAreaNetwork.c **** 
 153:Src/ControllerAreaNetwork.c **** 	}
 154:Src/ControllerAreaNetwork.c **** #endif
 155:Src/ControllerAreaNetwork.c **** 
 156:Src/ControllerAreaNetwork.c **** #ifdef STM32F3_DAEbot
 157:Src/ControllerAreaNetwork.c **** 	inline can_frame_types_t can_receive_data_frame_pd (void) {
 158:Src/ControllerAreaNetwork.c **** 
 159:Src/ControllerAreaNetwork.c **** 		can_frame_types_t can_frame_types;
 160:Src/ControllerAreaNetwork.c **** 		//hcan.pRxMsg = &RxMessage;
 161:Src/ControllerAreaNetwork.c **** 		errrx = HAL_CAN_Receive(&hcan, CAN_FIFO0,  500);
 162:Src/ControllerAreaNetwork.c **** 		if(errrx != HAL_OK){
 163:Src/ControllerAreaNetwork.c **** 			if(errrx == HAL_ERROR){
 164:Src/ControllerAreaNetwork.c **** 				HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_13);		//RED
 165:Src/ControllerAreaNetwork.c **** 			}
 166:Src/ControllerAreaNetwork.c **** 			else if(errrx==HAL_TIMEOUT){
 167:Src/ControllerAreaNetwork.c **** 				HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_9);			//RED	NORTH
 168:Src/ControllerAreaNetwork.c **** 			}
 169:Src/ControllerAreaNetwork.c **** 			//receive.ok=0;
 170:Src/ControllerAreaNetwork.c **** 		}
 171:Src/ControllerAreaNetwork.c **** 		//can_frame_types = can_decode_identifier_pd(&frame.can_id);
 172:Src/ControllerAreaNetwork.c **** 		can_frame_types.dlc = hcan.pRxMsg->DLC;
 173:Src/ControllerAreaNetwork.c **** 
 174:Src/ControllerAreaNetwork.c **** 		for (uint8_t i = 0; (i + 1) <= hcan.pRxMsg->DLC ;i++)
 175:Src/ControllerAreaNetwork.c **** 		{
 176:Src/ControllerAreaNetwork.c **** 			can_frame_types.data[i] = hcan.pRxMsg->Data[i];
 177:Src/ControllerAreaNetwork.c **** 		}
 178:Src/ControllerAreaNetwork.c **** 
ARM GAS  /tmp/ccjIUWXI.s 			page 5


 179:Src/ControllerAreaNetwork.c **** 		return can_frame_types;
 180:Src/ControllerAreaNetwork.c **** 	}
 181:Src/ControllerAreaNetwork.c **** #endif
 182:Src/ControllerAreaNetwork.c **** 
 183:Src/ControllerAreaNetwork.c **** 
 184:Src/ControllerAreaNetwork.c **** inline uint16_t can_code_identifier_pd(priority_can_id_t *priority_can_id, c_s_bit_can_id_t *c_s_bi
 185:Src/ControllerAreaNetwork.c **** 
 186:Src/ControllerAreaNetwork.c **** 	// combines c_s_bit and priority bit
 187:Src/ControllerAreaNetwork.c **** 	uint8_t highest_bit = *priority_can_id + (*c_s_bit_can_id * 4);
  52              		.loc 1 187 0
  53 000c 4178     		ldrb	r1, [r0, #1]	@ zero_extendqisi2
  54 000e 0278     		ldrb	r2, [r0]	@ zero_extendqisi2
  55 0010 02EB8102 		add	r2, r2, r1, lsl #2
  56 0014 D1B2     		uxtb	r1, r2
  57              	.LVL2:
 188:Src/ControllerAreaNetwork.c **** 
 189:Src/ControllerAreaNetwork.c **** 	// combines "hightes bit" and topic ID and returns it
 190:Src/ControllerAreaNetwork.c **** 	return ((highest_bit * 0x100) + *topic_can_id);
  58              		.loc 1 190 0
  59 0016 8278     		ldrb	r2, [r0, #2]	@ zero_extendqisi2
  60 0018 02EB0122 		add	r2, r2, r1, lsl #8
  61 001c 92B2     		uxth	r2, r2
  62              	.LVL3:
  63              	.LBE6:
  64              	.LBE5:
  99:Src/ControllerAreaNetwork.c **** 		TxMessage.ExtId= can_code_identifier_pd(&can_frame_types->priority_id, &can_frame_types->c_s_bit_
  65              		.loc 1 99 0
  66 001e 6A60     		str	r2, [r5, #4]
 100:Src/ControllerAreaNetwork.c **** 
  67              		.loc 1 100 0
  68 0020 C478     		ldrb	r4, [r0, #3]	@ zero_extendqisi2
  69 0022 2C61     		str	r4, [r5, #16]
  70              	.LVL4:
  71              	.LBB7:
 112:Src/ControllerAreaNetwork.c **** 		{
  72              		.loc 1 112 0
  73 0024 06E0     		b	.L2
  74              	.LVL5:
  75              	.L3:
 114:Src/ControllerAreaNetwork.c **** 		}
  76              		.loc 1 114 0 discriminator 3
  77 0026 C218     		adds	r2, r0, r3
  78 0028 1179     		ldrb	r1, [r2, #4]	@ zero_extendqisi2
  79 002a 0C4A     		ldr	r2, .L6
  80 002c 1A44     		add	r2, r2, r3
  81 002e 1175     		strb	r1, [r2, #20]
 112:Src/ControllerAreaNetwork.c **** 		{
  82              		.loc 1 112 0 discriminator 3
  83 0030 0133     		adds	r3, r3, #1
  84              	.LVL6:
  85 0032 DBB2     		uxtb	r3, r3
  86              	.LVL7:
  87              	.L2:
 112:Src/ControllerAreaNetwork.c **** 		{
  88              		.loc 1 112 0 is_stmt 0 discriminator 1
  89 0034 5A1C     		adds	r2, r3, #1
  90 0036 9442     		cmp	r4, r2
ARM GAS  /tmp/ccjIUWXI.s 			page 6


  91 0038 F5D2     		bcs	.L3
  92              	.LBE7:
 116:Src/ControllerAreaNetwork.c **** 
  93              		.loc 1 116 0 is_stmt 1
  94 003a 0948     		ldr	r0, .L6+4
  95              	.LVL8:
  96 003c 074B     		ldr	r3, .L6
  97              	.LVL9:
  98 003e 0363     		str	r3, [r0, #48]
 118:Src/ControllerAreaNetwork.c **** 
  99              		.loc 1 118 0
 100 0040 4FF4FA71 		mov	r1, #500
 101 0044 FFF7FEFF 		bl	HAL_CAN_Transmit
 102              	.LVL10:
 103 0048 064B     		ldr	r3, .L6+8
 104 004a 1860     		str	r0, [r3]
 120:Src/ControllerAreaNetwork.c **** 			HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_11);		//GREEN
 105              		.loc 1 120 0
 106 004c 20B9     		cbnz	r0, .L4
 121:Src/ControllerAreaNetwork.c **** 		}
 107              		.loc 1 121 0
 108 004e 4FF40061 		mov	r1, #2048
 109 0052 0548     		ldr	r0, .L6+12
 110 0054 FFF7FEFF 		bl	HAL_GPIO_TogglePin
 111              	.LVL11:
 112              	.L4:
 127:Src/ControllerAreaNetwork.c **** #endif
 113              		.loc 1 127 0
 114 0058 0020     		movs	r0, #0
 115 005a 38BD     		pop	{r3, r4, r5, pc}
 116              	.L7:
 117              		.align	2
 118              	.L6:
 119 005c 00000000 		.word	TxMessage
 120 0060 00000000 		.word	hcan
 121 0064 00000000 		.word	errtx
 122 0068 00100048 		.word	1207963648
 123              		.cfi_endproc
 124              	.LFE129:
 126              		.section	.text.can_receive_data_frame_pd,"ax",%progbits
 127              		.align	2
 128              		.global	can_receive_data_frame_pd
 129              		.thumb
 130              		.thumb_func
 132              	can_receive_data_frame_pd:
 133              	.LFB130:
 157:Src/ControllerAreaNetwork.c **** 
 134              		.loc 1 157 0
 135              		.cfi_startproc
 136              		@ args = 0, pretend = 0, frame = 0
 137              		@ frame_needed = 0, uses_anonymous_args = 0
 138              	.LVL12:
 139 0000 38B5     		push	{r3, r4, r5, lr}
 140              	.LCFI1:
 141              		.cfi_def_cfa_offset 16
 142              		.cfi_offset 3, -16
 143              		.cfi_offset 4, -12
ARM GAS  /tmp/ccjIUWXI.s 			page 7


 144              		.cfi_offset 5, -8
 145              		.cfi_offset 14, -4
 146 0002 0446     		mov	r4, r0
 161:Src/ControllerAreaNetwork.c **** 		if(errrx != HAL_OK){
 147              		.loc 1 161 0
 148 0004 4FF4FA72 		mov	r2, #500
 149 0008 0021     		movs	r1, #0
 150 000a 1348     		ldr	r0, .L14
 151              	.LVL13:
 152 000c FFF7FEFF 		bl	HAL_CAN_Receive
 153              	.LVL14:
 154 0010 124B     		ldr	r3, .L14+4
 155 0012 1860     		str	r0, [r3]
 162:Src/ControllerAreaNetwork.c **** 			if(errrx == HAL_ERROR){
 156              		.loc 1 162 0
 157 0014 70B1     		cbz	r0, .L9
 163:Src/ControllerAreaNetwork.c **** 				HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_13);		//RED
 158              		.loc 1 163 0
 159 0016 0128     		cmp	r0, #1
 160 0018 05D1     		bne	.L10
 164:Src/ControllerAreaNetwork.c **** 			}
 161              		.loc 1 164 0
 162 001a 4FF40051 		mov	r1, #8192
 163 001e 1048     		ldr	r0, .L14+8
 164 0020 FFF7FEFF 		bl	HAL_GPIO_TogglePin
 165              	.LVL15:
 166 0024 06E0     		b	.L9
 167              	.L10:
 166:Src/ControllerAreaNetwork.c **** 				HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_9);			//RED	NORTH
 168              		.loc 1 166 0
 169 0026 0328     		cmp	r0, #3
 170 0028 04D1     		bne	.L9
 167:Src/ControllerAreaNetwork.c **** 			}
 171              		.loc 1 167 0
 172 002a 4FF40071 		mov	r1, #512
 173 002e 0C48     		ldr	r0, .L14+8
 174 0030 FFF7FEFF 		bl	HAL_GPIO_TogglePin
 175              	.LVL16:
 176              	.L9:
 172:Src/ControllerAreaNetwork.c **** 
 177              		.loc 1 172 0
 178 0034 084B     		ldr	r3, .L14
 179 0036 5D6B     		ldr	r5, [r3, #52]
 180 0038 2869     		ldr	r0, [r5, #16]
 181 003a E070     		strb	r0, [r4, #3]
 182              	.LVL17:
 183              	.LBB8:
 174:Src/ControllerAreaNetwork.c **** 		{
 184              		.loc 1 174 0
 185 003c 0023     		movs	r3, #0
 186 003e 05E0     		b	.L11
 187              	.LVL18:
 188              	.L12:
 176:Src/ControllerAreaNetwork.c **** 		}
 189              		.loc 1 176 0 discriminator 3
 190 0040 EA18     		adds	r2, r5, r3
 191 0042 117D     		ldrb	r1, [r2, #20]	@ zero_extendqisi2
ARM GAS  /tmp/ccjIUWXI.s 			page 8


 192 0044 E218     		adds	r2, r4, r3
 193 0046 1171     		strb	r1, [r2, #4]
 174:Src/ControllerAreaNetwork.c **** 		{
 194              		.loc 1 174 0 discriminator 3
 195 0048 0133     		adds	r3, r3, #1
 196              	.LVL19:
 197 004a DBB2     		uxtb	r3, r3
 198              	.LVL20:
 199              	.L11:
 174:Src/ControllerAreaNetwork.c **** 		{
 200              		.loc 1 174 0 is_stmt 0 discriminator 1
 201 004c 5A1C     		adds	r2, r3, #1
 202 004e 9042     		cmp	r0, r2
 203 0050 F6D2     		bcs	.L12
 204              	.LBE8:
 180:Src/ControllerAreaNetwork.c **** #endif
 205              		.loc 1 180 0 is_stmt 1
 206 0052 2046     		mov	r0, r4
 207 0054 38BD     		pop	{r3, r4, r5, pc}
 208              	.LVL21:
 209              	.L15:
 210 0056 00BF     		.align	2
 211              	.L14:
 212 0058 00000000 		.word	hcan
 213 005c 00000000 		.word	errrx
 214 0060 00100048 		.word	1207963648
 215              		.cfi_endproc
 216              	.LFE130:
 218              		.section	.text.can_code_identifier_pd,"ax",%progbits
 219              		.align	2
 220              		.global	can_code_identifier_pd
 221              		.thumb
 222              		.thumb_func
 224              	can_code_identifier_pd:
 225              	.LFB131:
 184:Src/ControllerAreaNetwork.c **** 
 226              		.loc 1 184 0
 227              		.cfi_startproc
 228              		@ args = 0, pretend = 0, frame = 0
 229              		@ frame_needed = 0, uses_anonymous_args = 0
 230              		@ link register save eliminated.
 231              	.LVL22:
 187:Src/ControllerAreaNetwork.c **** 
 232              		.loc 1 187 0
 233 0000 0B78     		ldrb	r3, [r1]	@ zero_extendqisi2
 234 0002 0078     		ldrb	r0, [r0]	@ zero_extendqisi2
 235              	.LVL23:
 236 0004 00EB8303 		add	r3, r0, r3, lsl #2
 237 0008 DBB2     		uxtb	r3, r3
 238              	.LVL24:
 239              		.loc 1 190 0
 240 000a 1078     		ldrb	r0, [r2]	@ zero_extendqisi2
 241 000c 00EB0320 		add	r0, r0, r3, lsl #8
 191:Src/ControllerAreaNetwork.c **** }
 242              		.loc 1 191 0
 243 0010 80B2     		uxth	r0, r0
 244 0012 7047     		bx	lr
ARM GAS  /tmp/ccjIUWXI.s 			page 9


 245              		.cfi_endproc
 246              	.LFE131:
 248              		.section	.text.MX_CAN_Init,"ax",%progbits
 249              		.align	2
 250              		.global	MX_CAN_Init
 251              		.thumb
 252              		.thumb_func
 254              	MX_CAN_Init:
 255              	.LFB132:
 192:Src/ControllerAreaNetwork.c **** #ifdef rPI_DAEbot
 193:Src/ControllerAreaNetwork.c **** 	inline can_frame_types_t can_decode_identifier_pd(canid_t *canid) {
 194:Src/ControllerAreaNetwork.c **** 
 195:Src/ControllerAreaNetwork.c **** 		can_frame_types_t can_frame_types;
 196:Src/ControllerAreaNetwork.c **** 
 197:Src/ControllerAreaNetwork.c **** 		// Get the hightes bit by bit-shifting
 198:Src/ControllerAreaNetwork.c **** 		uint8_t highest_bit = *canid >> 8;
 199:Src/ControllerAreaNetwork.c **** 
 200:Src/ControllerAreaNetwork.c **** 		if (highest_bit < 0x4)
 201:Src/ControllerAreaNetwork.c **** 		{
 202:Src/ControllerAreaNetwork.c **** 			can_frame_types.c_s_bit_id = COMMAND_DATA_BIT;
 203:Src/ControllerAreaNetwork.c **** 			can_frame_types.priority_id = (priority_can_id_t)highest_bit;
 204:Src/ControllerAreaNetwork.c **** 			can_frame_types.topic_id = (topic_can_id_t) (*canid - (highest_bit * 0x100));
 205:Src/ControllerAreaNetwork.c **** 		}
 206:Src/ControllerAreaNetwork.c **** 		else
 207:Src/ControllerAreaNetwork.c **** 		{
 208:Src/ControllerAreaNetwork.c **** 			can_frame_types.c_s_bit_id = SENSOR_DATA_BIT;
 209:Src/ControllerAreaNetwork.c **** 			can_frame_types.priority_id = (priority_can_id_t)(highest_bit - 0x4);
 210:Src/ControllerAreaNetwork.c **** 			can_frame_types.topic_id = (topic_can_id_t) (*canid - (highest_bit * 0x100));
 211:Src/ControllerAreaNetwork.c **** 		}
 212:Src/ControllerAreaNetwork.c **** 
 213:Src/ControllerAreaNetwork.c **** 		return can_frame_types;
 214:Src/ControllerAreaNetwork.c **** 
 215:Src/ControllerAreaNetwork.c **** 	}
 216:Src/ControllerAreaNetwork.c **** #endif
 217:Src/ControllerAreaNetwork.c **** 
 218:Src/ControllerAreaNetwork.c **** #ifdef STM32F3_DAEbot
 219:Src/ControllerAreaNetwork.c **** 	void MX_CAN_Init(void){
 256              		.loc 1 219 0
 257              		.cfi_startproc
 258              		@ args = 0, pretend = 0, frame = 40
 259              		@ frame_needed = 0, uses_anonymous_args = 0
 260 0000 00B5     		push	{lr}
 261              	.LCFI2:
 262              		.cfi_def_cfa_offset 4
 263              		.cfi_offset 14, -4
 264 0002 8BB0     		sub	sp, sp, #44
 265              	.LCFI3:
 266              		.cfi_def_cfa_offset 48
 220:Src/ControllerAreaNetwork.c **** 
 221:Src/ControllerAreaNetwork.c **** 	// 24MHz/[(SJW+BS1+BS2)*Prescaler] = [freq] right now is 500k
 222:Src/ControllerAreaNetwork.c **** 
 223:Src/ControllerAreaNetwork.c **** 	  CAN_FilterConfTypeDef  sFilterConfig1;
 224:Src/ControllerAreaNetwork.c **** 
 225:Src/ControllerAreaNetwork.c **** 	  hcan.Instance = CAN;
 267              		.loc 1 225 0
 268 0004 1A48     		ldr	r0, .L21
 269 0006 1B4B     		ldr	r3, .L21+4
ARM GAS  /tmp/ccjIUWXI.s 			page 10


 270 0008 0360     		str	r3, [r0]
 226:Src/ControllerAreaNetwork.c **** 
 227:Src/ControllerAreaNetwork.c **** 	  hcan.Init.Mode = CAN_MODE_NORMAL;
 271              		.loc 1 227 0
 272 000a 0023     		movs	r3, #0
 273 000c 8360     		str	r3, [r0, #8]
 228:Src/ControllerAreaNetwork.c **** 	  hcan.Init.SJW = CAN_SJW_1TQ;
 274              		.loc 1 228 0
 275 000e C360     		str	r3, [r0, #12]
 229:Src/ControllerAreaNetwork.c **** 	  hcan.Init.BS1 = CAN_BS1_2TQ;		//before it was CAN_BS1_11TQ
 276              		.loc 1 229 0
 277 0010 4FF48032 		mov	r2, #65536
 278 0014 0261     		str	r2, [r0, #16]
 230:Src/ControllerAreaNetwork.c **** 	  hcan.Init.BS2 = CAN_BS2_3TQ;		//before it was CAN_BS2_3TQ
 279              		.loc 1 230 0
 280 0016 4FF40012 		mov	r2, #2097152
 281 001a 4261     		str	r2, [r0, #20]
 231:Src/ControllerAreaNetwork.c **** 	  hcan.Init.TTCM = DISABLE;
 282              		.loc 1 231 0
 283 001c 8361     		str	r3, [r0, #24]
 232:Src/ControllerAreaNetwork.c **** 	  hcan.Init.ABOM = DISABLE;
 284              		.loc 1 232 0
 285 001e C361     		str	r3, [r0, #28]
 233:Src/ControllerAreaNetwork.c **** 	  hcan.Init.AWUM = DISABLE;
 286              		.loc 1 233 0
 287 0020 0362     		str	r3, [r0, #32]
 234:Src/ControllerAreaNetwork.c **** 	  hcan.Init.NART = DISABLE;
 288              		.loc 1 234 0
 289 0022 4362     		str	r3, [r0, #36]
 235:Src/ControllerAreaNetwork.c **** 	  hcan.Init.RFLM = DISABLE;
 290              		.loc 1 235 0
 291 0024 8362     		str	r3, [r0, #40]
 236:Src/ControllerAreaNetwork.c **** 	  hcan.Init.TXFP = DISABLE;
 292              		.loc 1 236 0
 293 0026 C362     		str	r3, [r0, #44]
 237:Src/ControllerAreaNetwork.c **** 
 238:Src/ControllerAreaNetwork.c **** 	  hcan.Init.Prescaler = 8;					 	//32
 294              		.loc 1 238 0
 295 0028 0823     		movs	r3, #8
 296 002a 4360     		str	r3, [r0, #4]
 239:Src/ControllerAreaNetwork.c **** 
 240:Src/ControllerAreaNetwork.c **** 	  if (HAL_CAN_Init(&hcan) != HAL_OK){
 297              		.loc 1 240 0
 298 002c FFF7FEFF 		bl	HAL_CAN_Init
 299              	.LVL25:
 300 0030 18B1     		cbz	r0, .L18
 241:Src/ControllerAreaNetwork.c **** 	    _Error_Handler(__FILE__, __LINE__);
 301              		.loc 1 241 0
 302 0032 F121     		movs	r1, #241
 303 0034 1048     		ldr	r0, .L21+8
 304 0036 FFF7FEFF 		bl	_Error_Handler
 305              	.LVL26:
 306              	.L18:
 242:Src/ControllerAreaNetwork.c **** 	  }
 243:Src/ControllerAreaNetwork.c **** 
 244:Src/ControllerAreaNetwork.c **** 		sFilterConfig1.FilterNumber = 1;
 307              		.loc 1 244 0
ARM GAS  /tmp/ccjIUWXI.s 			page 11


 308 003a 0122     		movs	r2, #1
 309 003c 0592     		str	r2, [sp, #20]
 245:Src/ControllerAreaNetwork.c **** 		sFilterConfig1.FilterMode = CAN_FILTERMODE_IDMASK;
 310              		.loc 1 245 0
 311 003e 0023     		movs	r3, #0
 312 0040 0693     		str	r3, [sp, #24]
 246:Src/ControllerAreaNetwork.c **** 		sFilterConfig1.FilterScale = CAN_FILTERSCALE_32BIT;
 313              		.loc 1 246 0
 314 0042 0792     		str	r2, [sp, #28]
 247:Src/ControllerAreaNetwork.c **** 		sFilterConfig1.FilterIdHigh = 0x0000;
 315              		.loc 1 247 0
 316 0044 0093     		str	r3, [sp]
 248:Src/ControllerAreaNetwork.c **** 		sFilterConfig1.FilterIdLow = 0x0000;
 317              		.loc 1 248 0
 318 0046 0193     		str	r3, [sp, #4]
 249:Src/ControllerAreaNetwork.c **** 		sFilterConfig1.FilterMaskIdHigh = 0x0000;
 319              		.loc 1 249 0
 320 0048 0293     		str	r3, [sp, #8]
 250:Src/ControllerAreaNetwork.c **** 		sFilterConfig1.FilterMaskIdLow = 0x0000;
 321              		.loc 1 250 0
 322 004a 0393     		str	r3, [sp, #12]
 251:Src/ControllerAreaNetwork.c **** 		sFilterConfig1.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 323              		.loc 1 251 0
 324 004c 0493     		str	r3, [sp, #16]
 252:Src/ControllerAreaNetwork.c **** 		sFilterConfig1.FilterActivation = ENABLE;
 325              		.loc 1 252 0
 326 004e 0892     		str	r2, [sp, #32]
 253:Src/ControllerAreaNetwork.c **** 		sFilterConfig1.BankNumber = 14;
 327              		.loc 1 253 0
 328 0050 0E23     		movs	r3, #14
 329 0052 0993     		str	r3, [sp, #36]
 254:Src/ControllerAreaNetwork.c **** 
 255:Src/ControllerAreaNetwork.c **** 
 256:Src/ControllerAreaNetwork.c **** 	   if(HAL_CAN_ConfigFilter(&hcan, &sFilterConfig1) != HAL_OK){
 330              		.loc 1 256 0
 331 0054 6946     		mov	r1, sp
 332 0056 0648     		ldr	r0, .L21
 333 0058 FFF7FEFF 		bl	HAL_CAN_ConfigFilter
 334              	.LVL27:
 335 005c 20B1     		cbz	r0, .L17
 257:Src/ControllerAreaNetwork.c **** 		   _Error_Handler(__FILE__, __LINE__);
 336              		.loc 1 257 0
 337 005e 40F20111 		movw	r1, #257
 338 0062 0548     		ldr	r0, .L21+8
 339 0064 FFF7FEFF 		bl	_Error_Handler
 340              	.LVL28:
 341              	.L17:
 258:Src/ControllerAreaNetwork.c **** 	   }
 259:Src/ControllerAreaNetwork.c **** 
 260:Src/ControllerAreaNetwork.c **** 	}
 342              		.loc 1 260 0
 343 0068 0BB0     		add	sp, sp, #44
 344              	.LCFI4:
 345              		.cfi_def_cfa_offset 4
 346              		@ sp needed
 347 006a 5DF804FB 		ldr	pc, [sp], #4
 348              	.L22:
ARM GAS  /tmp/ccjIUWXI.s 			page 12


 349 006e 00BF     		.align	2
 350              	.L21:
 351 0070 00000000 		.word	hcan
 352 0074 00640040 		.word	1073767424
 353 0078 00000000 		.word	.LC0
 354              		.cfi_endproc
 355              	.LFE132:
 357              		.comm	errtx,4,4
 358              		.comm	errrx,4,4
 359              		.comm	receivedMessage,19,4
 360              		.comm	TxMessage,28,4
 361              		.comm	RxMessage,36,4
 362              		.comm	hcan,68,4
 363              		.comm	magn,12,4
 364              		.comm	accel,12,4
 365              		.comm	gyro,12,4
 366              		.comm	DMA_Sensor_TxComplete,1,1
 367              		.comm	DMA_Sensor_RxComplete,1,1
 368              		.comm	DMA_Bluetooth_TxComplete,1,1
 369              		.comm	DMA_Bluetooth_RxComplete,1,1
 370              		.section	.rodata.str1.4,"aMS",%progbits,1
 371              		.align	2
 372              	.LC0:
 373 0000 5372632F 		.ascii	"Src/ControllerAreaNetwork.c\000"
 373      436F6E74 
 373      726F6C6C 
 373      65724172 
 373      65614E65 
 374              		.text
 375              	.Letext0:
 376              		.file 2 "/opt/gcc-arm-none-eabi-5_4-2016q3/arm-none-eabi/include/machine/_default_types.h"
 377              		.file 3 "Inc/periphAL.h"
 378              		.file 4 "/opt/gcc-arm-none-eabi-5_4-2016q3/arm-none-eabi/include/sys/_stdint.h"
 379              		.file 5 "Drivers/CMSIS/Device/ST/STM32F3xx/Include/stm32f303xc.h"
 380              		.file 6 "Drivers/CMSIS/Device/ST/STM32F3xx/Include/stm32f3xx.h"
 381              		.file 7 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_def.h"
 382              		.file 8 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_can.h"
 383              		.file 9 "Inc/ControllerAreaNetwork.h"
 384              		.file 10 "Drivers/CMSIS/Include/core_cm4.h"
 385              		.file 11 "Inc/usart.h"
 386              		.file 12 "Inc/internal_sensors.h"
 387              		.file 13 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_gpio.h"
 388              		.file 14 "Inc/main.h"
ARM GAS  /tmp/ccjIUWXI.s 			page 13


DEFINED SYMBOLS
                            *ABS*:00000000 ControllerAreaNetwork.c
     /tmp/ccjIUWXI.s:22     .text.can_transmit_data_frame_pd:00000000 $t
     /tmp/ccjIUWXI.s:27     .text.can_transmit_data_frame_pd:00000000 can_transmit_data_frame_pd
     /tmp/ccjIUWXI.s:119    .text.can_transmit_data_frame_pd:0000005c $d
                            *COM*:0000001c TxMessage
                            *COM*:00000044 hcan
                            *COM*:00000004 errtx
     /tmp/ccjIUWXI.s:127    .text.can_receive_data_frame_pd:00000000 $t
     /tmp/ccjIUWXI.s:132    .text.can_receive_data_frame_pd:00000000 can_receive_data_frame_pd
     /tmp/ccjIUWXI.s:212    .text.can_receive_data_frame_pd:00000058 $d
                            *COM*:00000004 errrx
     /tmp/ccjIUWXI.s:219    .text.can_code_identifier_pd:00000000 $t
     /tmp/ccjIUWXI.s:224    .text.can_code_identifier_pd:00000000 can_code_identifier_pd
     /tmp/ccjIUWXI.s:249    .text.MX_CAN_Init:00000000 $t
     /tmp/ccjIUWXI.s:254    .text.MX_CAN_Init:00000000 MX_CAN_Init
     /tmp/ccjIUWXI.s:351    .text.MX_CAN_Init:00000070 $d
                            *COM*:00000013 receivedMessage
                            *COM*:00000024 RxMessage
                            *COM*:0000000c magn
                            *COM*:0000000c accel
                            *COM*:0000000c gyro
                            *COM*:00000001 DMA_Sensor_TxComplete
                            *COM*:00000001 DMA_Sensor_RxComplete
                            *COM*:00000001 DMA_Bluetooth_TxComplete
                            *COM*:00000001 DMA_Bluetooth_RxComplete
     /tmp/ccjIUWXI.s:371    .rodata.str1.4:00000000 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
HAL_CAN_Transmit
HAL_GPIO_TogglePin
HAL_CAN_Receive
HAL_CAN_Init
_Error_Handler
HAL_CAN_ConfigFilter
