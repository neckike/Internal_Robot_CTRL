ARM GAS  /tmp/ccQ0b1hk.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 1
   4              		.eabi_attribute 28, 1
   5              		.fpu fpv4-sp-d16
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 1
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.thumb
  16              		.syntax unified
  17              		.file	"SensorDataHandler.c"
  18              		.text
  19              	.Ltext0:
  20              		.cfi_sections	.debug_frame
  21              		.section	.text.floatToCAN,"ax",%progbits
  22              		.align	2
  23              		.thumb
  24              		.thumb_func
  26              	floatToCAN:
  27              	.LFB131:
  28              		.file 1 "Src/SensorDataHandler.c"
   1:Src/SensorDataHandler.c **** /*
   2:Src/SensorDataHandler.c ****  * SensorDataHandler.c
   3:Src/SensorDataHandler.c ****  *
   4:Src/SensorDataHandler.c ****  *  Created on: Jan 19, 2018
   5:Src/SensorDataHandler.c ****  *      Author: hector
   6:Src/SensorDataHandler.c ****  */
   7:Src/SensorDataHandler.c **** #include "cmsis_os.h"
   8:Src/SensorDataHandler.c **** #include "gpio.h"
   9:Src/SensorDataHandler.c **** #include "SensorDataHandler.h"
  10:Src/SensorDataHandler.c **** #include "queue.h"
  11:Src/SensorDataHandler.c **** #include "FreeRTOSConfig.h"
  12:Src/SensorDataHandler.c **** #include "FreeRTOS.h"
  13:Src/SensorDataHandler.c **** #include "ControllerAreaNetwork.h"
  14:Src/SensorDataHandler.c **** #include "periphAL.h"
  15:Src/SensorDataHandler.c **** 
  16:Src/SensorDataHandler.c **** int current_mode = NO_TRANSMISSION;
  17:Src/SensorDataHandler.c **** 
  18:Src/SensorDataHandler.c **** sensorPin right_sensor;
  19:Src/SensorDataHandler.c **** sensorPin back_sensor;
  20:Src/SensorDataHandler.c **** sensorPin left_sensor;
  21:Src/SensorDataHandler.c **** sensorPin front_sensor;
  22:Src/SensorDataHandler.c **** 
  23:Src/SensorDataHandler.c **** int sample_time = SAMPLE_TIME_DEFAULT;
  24:Src/SensorDataHandler.c **** int delay_command = SAMPLE_TIME_DEFAULT;
  25:Src/SensorDataHandler.c **** int units_time	= UNITS_TIME_DEFAULT;
  26:Src/SensorDataHandler.c **** can_frame_types_t	sentMessage;
  27:Src/SensorDataHandler.c **** 
  28:Src/SensorDataHandler.c **** int flag_counter = 0;
  29:Src/SensorDataHandler.c **** 
  30:Src/SensorDataHandler.c **** float gyro[3];
ARM GAS  /tmp/ccQ0b1hk.s 			page 2


  31:Src/SensorDataHandler.c **** float accel[3];
  32:Src/SensorDataHandler.c **** float magn[3];
  33:Src/SensorDataHandler.c **** 
  34:Src/SensorDataHandler.c **** static void vReceiver(void *arg);
  35:Src/SensorDataHandler.c **** static void vSender(void *arg);
  36:Src/SensorDataHandler.c **** //static void vMainHandler(void *arg);
  37:Src/SensorDataHandler.c **** static TaskHandle_t transmitter_handler;
  38:Src/SensorDataHandler.c **** static TaskHandle_t receiver_handler;
  39:Src/SensorDataHandler.c **** //static TaskHandle_t main_handler;
  40:Src/SensorDataHandler.c **** static void floatToCAN(float data, can_frame_types_t *can_frame_types);
  41:Src/SensorDataHandler.c **** static void componentStatus(topic_can_id_t id, can_frame_types_t *can_frame_types);
  42:Src/SensorDataHandler.c **** static void setMode(int mode);
  43:Src/SensorDataHandler.c **** 
  44:Src/SensorDataHandler.c **** static void setMode(int mode){
  45:Src/SensorDataHandler.c **** 	current_mode=mode;
  46:Src/SensorDataHandler.c **** 
  47:Src/SensorDataHandler.c **** 	switch(current_mode){
  48:Src/SensorDataHandler.c **** 	case NO_TRANSMISSION:
  49:Src/SensorDataHandler.c **** 		vTaskSuspend(transmitter_handler);
  50:Src/SensorDataHandler.c **** 		flag_counter = 0;
  51:Src/SensorDataHandler.c **** 		break;
  52:Src/SensorDataHandler.c **** 
  53:Src/SensorDataHandler.c **** 	case PUBLISHER:
  54:Src/SensorDataHandler.c **** 
  55:Src/SensorDataHandler.c **** 		switch(units_time){
  56:Src/SensorDataHandler.c **** 		case MILISECONDS:
  57:Src/SensorDataHandler.c **** 			delay_command = sample_time;
  58:Src/SensorDataHandler.c **** 			break;
  59:Src/SensorDataHandler.c **** 
  60:Src/SensorDataHandler.c **** 		case SECONDS:
  61:Src/SensorDataHandler.c **** 			delay_command = sample_time*1000;
  62:Src/SensorDataHandler.c **** 			break;
  63:Src/SensorDataHandler.c **** 
  64:Src/SensorDataHandler.c **** 		case MINUTES:
  65:Src/SensorDataHandler.c **** 			delay_command = sample_time*60000;
  66:Src/SensorDataHandler.c **** 			break;
  67:Src/SensorDataHandler.c **** 		case MICROSECONDS:
  68:Src/SensorDataHandler.c **** 			delay_command = sample_time;	//can't be arranged with current clock of 1000Hz
  69:Src/SensorDataHandler.c **** 			break;
  70:Src/SensorDataHandler.c **** 		}
  71:Src/SensorDataHandler.c **** 
  72:Src/SensorDataHandler.c **** 		vTaskResume(transmitter_handler);
  73:Src/SensorDataHandler.c **** 		break;
  74:Src/SensorDataHandler.c **** 
  75:Src/SensorDataHandler.c **** 	case ONE_TIME_TRANSMISSION:
  76:Src/SensorDataHandler.c **** 		vTaskSuspend(transmitter_handler);
  77:Src/SensorDataHandler.c **** 		flag_counter = 0;
  78:Src/SensorDataHandler.c **** 		vTaskResume(transmitter_handler);
  79:Src/SensorDataHandler.c **** 
  80:Src/SensorDataHandler.c **** 		if(flag_counter>0){
  81:Src/SensorDataHandler.c **** 			//run only once
  82:Src/SensorDataHandler.c **** 			vTaskSuspend(transmitter_handler);
  83:Src/SensorDataHandler.c **** 			flag_counter=0;
  84:Src/SensorDataHandler.c **** 		}
  85:Src/SensorDataHandler.c **** 		//handleACommand();
  86:Src/SensorDataHandler.c **** 		break;
  87:Src/SensorDataHandler.c **** 	}
ARM GAS  /tmp/ccQ0b1hk.s 			page 3


  88:Src/SensorDataHandler.c **** }
  89:Src/SensorDataHandler.c **** //static void vMainHandler(void *pvParameters){
  90:Src/SensorDataHandler.c **** //
  91:Src/SensorDataHandler.c **** //	while(1){
  92:Src/SensorDataHandler.c **** //		switch(current_mode){
  93:Src/SensorDataHandler.c **** //		case NO_TRANSMISSION:
  94:Src/SensorDataHandler.c **** //			vTaskSuspend(transmitter_handler);
  95:Src/SensorDataHandler.c **** //			flag_counter = 0;
  96:Src/SensorDataHandler.c **** //			break;
  97:Src/SensorDataHandler.c **** //
  98:Src/SensorDataHandler.c **** //		case PUBLISHER:
  99:Src/SensorDataHandler.c **** //			vTaskResume(transmitter_handler);
 100:Src/SensorDataHandler.c **** //
 101:Src/SensorDataHandler.c **** //			break;
 102:Src/SensorDataHandler.c **** //
 103:Src/SensorDataHandler.c **** //		case ONE_TIME_TRANSMISSION:
 104:Src/SensorDataHandler.c **** //			vTaskSuspend(transmitter_handler);
 105:Src/SensorDataHandler.c **** //			flag_counter = 0;
 106:Src/SensorDataHandler.c **** //			vTaskResume(transmitter_handler);
 107:Src/SensorDataHandler.c **** //
 108:Src/SensorDataHandler.c **** //			if(flag_counter>0){
 109:Src/SensorDataHandler.c **** //				//run only once
 110:Src/SensorDataHandler.c **** //				vTaskSuspend(transmitter_handler);
 111:Src/SensorDataHandler.c **** //				flag_counter=0;
 112:Src/SensorDataHandler.c **** //			}
 113:Src/SensorDataHandler.c **** //			//handleACommand();
 114:Src/SensorDataHandler.c **** //			break;
 115:Src/SensorDataHandler.c **** //		}
 116:Src/SensorDataHandler.c **** //		vTaskDelay(100);
 117:Src/SensorDataHandler.c **** //	}
 118:Src/SensorDataHandler.c **** //}
 119:Src/SensorDataHandler.c **** void initHardware(void){
 120:Src/SensorDataHandler.c **** 	initGyroscope();
 121:Src/SensorDataHandler.c **** 	initAccelerometer();
 122:Src/SensorDataHandler.c **** 	initMagnetometer();
 123:Src/SensorDataHandler.c **** 
 124:Src/SensorDataHandler.c **** 	sentMessage.c_s_bit_id = SENSOR_DATA_BIT;
 125:Src/SensorDataHandler.c **** 	sentMessage.dlc = 1;
 126:Src/SensorDataHandler.c **** 	sentMessage.priority_id = PRIORITY_MEDIUM;
 127:Src/SensorDataHandler.c **** 
 128:Src/SensorDataHandler.c **** 	right_sensor.num_trig = GPIO_PIN_2;
 129:Src/SensorDataHandler.c **** 	right_sensor.grp_trig = (uint32_t) GPIOC;
 130:Src/SensorDataHandler.c **** 	right_sensor.num_echo = GPIO_PIN_3;
 131:Src/SensorDataHandler.c **** 	right_sensor.grp_echo = (uint32_t) GPIOC;
 132:Src/SensorDataHandler.c **** 
 133:Src/SensorDataHandler.c **** 	back_sensor.num_trig = GPIO_PIN_10;
 134:Src/SensorDataHandler.c **** 	back_sensor.grp_trig = (uint32_t) GPIOD;
 135:Src/SensorDataHandler.c **** 	back_sensor.num_echo = GPIO_PIN_11;
 136:Src/SensorDataHandler.c **** 	back_sensor.grp_echo = (uint32_t) GPIOD;
 137:Src/SensorDataHandler.c **** 
 138:Src/SensorDataHandler.c **** 	left_sensor.num_trig = GPIO_PIN_10;
 139:Src/SensorDataHandler.c **** 	left_sensor.grp_trig = (uint32_t) GPIOB;
 140:Src/SensorDataHandler.c **** 	left_sensor.num_echo = GPIO_PIN_11;
 141:Src/SensorDataHandler.c **** 	left_sensor.grp_echo = (uint32_t) GPIOB;
 142:Src/SensorDataHandler.c **** 
 143:Src/SensorDataHandler.c **** 	front_sensor.num_trig = GPIO_PIN_2;
 144:Src/SensorDataHandler.c **** 	front_sensor.grp_trig = (uint32_t) GPIOB;
ARM GAS  /tmp/ccQ0b1hk.s 			page 4


 145:Src/SensorDataHandler.c **** 	front_sensor.num_echo = GPIO_PIN_7;
 146:Src/SensorDataHandler.c **** 	front_sensor.grp_echo = (uint32_t) GPIOE;
 147:Src/SensorDataHandler.c **** 
 148:Src/SensorDataHandler.c **** 	//xTaskCreate(vMainHandler, "Main Handler", 200, NULL, tskIDLE_PRIORITY + 2, &main_handler);
 149:Src/SensorDataHandler.c **** 	xTaskCreate(vReceiver, "Reception Handler", 200, NULL, tskIDLE_PRIORITY + 2, &receiver_handler);
 150:Src/SensorDataHandler.c **** 	xTaskCreate(vSender, "Transimtter Handler", 200, NULL, tskIDLE_PRIORITY + 2, &transmitter_handler)
 151:Src/SensorDataHandler.c **** 
 152:Src/SensorDataHandler.c **** }
 153:Src/SensorDataHandler.c **** 
 154:Src/SensorDataHandler.c **** 
 155:Src/SensorDataHandler.c **** static void floatToCAN(float data, can_frame_types_t *can_frame_types){
  29              		.loc 1 155 0
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 0
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33              		@ link register save eliminated.
  34              	.LVL0:
 156:Src/SensorDataHandler.c **** 		uint32_t aux = (uint32_t)(*(uint32_t*)&data);
  35              		.loc 1 156 0
  36 0000 10EE103A 		vmov	r3, s0	@ int
  37              	.LVL1:
 157:Src/SensorDataHandler.c **** 		uint8_t datal = (uint8_t)(aux &  0x000000FF);
 158:Src/SensorDataHandler.c **** 		uint8_t datah = (uint8_t)((aux & 0x0000FF00) >> 8);
  38              		.loc 1 158 0
  39 0004 C3F30722 		ubfx	r2, r3, #8, #8
  40              	.LVL2:
 159:Src/SensorDataHandler.c **** 		can_frame_types->data[0] = datah;
  41              		.loc 1 159 0
  42 0008 0271     		strb	r2, [r0, #4]
 160:Src/SensorDataHandler.c **** 		can_frame_types->data[1] = datal;
  43              		.loc 1 160 0
  44 000a 4371     		strb	r3, [r0, #5]
  45 000c 7047     		bx	lr
  46              		.cfi_endproc
  47              	.LFE131:
  49 000e 00BF     		.section	.text.componentStatus,"ax",%progbits
  50              		.align	2
  51              		.thumb
  52              		.thumb_func
  54              	componentStatus:
  55              	.LFB132:
 161:Src/SensorDataHandler.c **** }
 162:Src/SensorDataHandler.c **** static void componentStatus(topic_can_id_t id, can_frame_types_t *can_frame_types){
  56              		.loc 1 162 0
  57              		.cfi_startproc
  58              		@ args = 0, pretend = 0, frame = 0
  59              		@ frame_needed = 0, uses_anonymous_args = 0
  60              	.LVL3:
  61 0000 08B5     		push	{r3, lr}
  62              	.LCFI0:
  63              		.cfi_def_cfa_offset 8
  64              		.cfi_offset 3, -8
  65              		.cfi_offset 14, -4
 163:Src/SensorDataHandler.c **** 	if((errrx!=HAL_OK)||(errtx!=HAL_OK)){
  66              		.loc 1 163 0
  67 0002 0A4B     		ldr	r3, .L7
  68 0004 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/ccQ0b1hk.s 			page 5


  69 0006 13B9     		cbnz	r3, .L3
  70              		.loc 1 163 0 is_stmt 0 discriminator 1
  71 0008 094A     		ldr	r2, .L7+4
  72 000a 1268     		ldr	r2, [r2]
  73 000c 6AB1     		cbz	r2, .L2
  74              	.L3:
 164:Src/SensorDataHandler.c **** 		if((errrx==HAL_TIMEOUT)||(errtx==HAL_TIMEOUT)){
  75              		.loc 1 164 0 is_stmt 1
  76 000e 032B     		cmp	r3, #3
  77 0010 03D0     		beq	.L5
  78              		.loc 1 164 0 is_stmt 0 discriminator 1
  79 0012 074B     		ldr	r3, .L7+4
  80 0014 1B68     		ldr	r3, [r3]
  81 0016 032B     		cmp	r3, #3
  82 0018 07D1     		bne	.L2
  83              	.L5:
 165:Src/SensorDataHandler.c **** 			can_frame_types->data[0] = HEALTH_CTRL_ID_COMP_STATUS;
  84              		.loc 1 165 0 is_stmt 1
  85 001a 1B23     		movs	r3, #27
  86 001c 0B71     		strb	r3, [r1, #4]
 166:Src/SensorDataHandler.c **** 			can_frame_types->data[1] = id;
  87              		.loc 1 166 0
  88 001e 4871     		strb	r0, [r1, #5]
 167:Src/SensorDataHandler.c **** 			can_frame_types->data[2] = MODE1_TIMEOUT;
  89              		.loc 1 167 0
  90 0020 0223     		movs	r3, #2
  91 0022 8B71     		strb	r3, [r1, #6]
 168:Src/SensorDataHandler.c **** 			can_transmit_data_frame_pd(can_frame_types);
  92              		.loc 1 168 0
  93 0024 0846     		mov	r0, r1
  94              	.LVL4:
  95 0026 FFF7FEFF 		bl	can_transmit_data_frame_pd
  96              	.LVL5:
  97              	.L2:
  98 002a 08BD     		pop	{r3, pc}
  99              	.L8:
 100              		.align	2
 101              	.L7:
 102 002c 00000000 		.word	errrx
 103 0030 00000000 		.word	errtx
 104              		.cfi_endproc
 105              	.LFE132:
 107              		.section	.text.vSender,"ax",%progbits
 108              		.align	2
 109              		.thumb
 110              		.thumb_func
 112              	vSender:
 113              	.LFB133:
 169:Src/SensorDataHandler.c **** 		}
 170:Src/SensorDataHandler.c **** 	}
 171:Src/SensorDataHandler.c **** 	else{
 172:Src/SensorDataHandler.c **** 		//IT IS OK!
 173:Src/SensorDataHandler.c **** 	}
 174:Src/SensorDataHandler.c **** }
 175:Src/SensorDataHandler.c **** //void handleACommand(void){
 176:Src/SensorDataHandler.c **** static void vSender(void *pvParameters){
 114              		.loc 1 176 0
ARM GAS  /tmp/ccQ0b1hk.s 			page 6


 115              		.cfi_startproc
 116              		@ Volatile: function does not return.
 117              		@ args = 0, pretend = 0, frame = 0
 118              		@ frame_needed = 0, uses_anonymous_args = 0
 119              	.LVL6:
 120 0000 08B5     		push	{r3, lr}
 121              	.LCFI1:
 122              		.cfi_def_cfa_offset 8
 123              		.cfi_offset 3, -8
 124              		.cfi_offset 14, -4
 125              	.LVL7:
 126              	.L23:
 177:Src/SensorDataHandler.c **** 	while(1){
 178:Src/SensorDataHandler.c **** 		if (receivedMessage.topic_id == INTERNAL_ROBOT_CTRL_ID_GYROSCOPE_X ||
 127              		.loc 1 178 0
 128 0002 894B     		ldr	r3, .L26
 129 0004 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 179:Src/SensorDataHandler.c **** 				receivedMessage.topic_id == INTERNAL_ROBOT_CTRL_ID_GYROSCOPE_Y ||
 130              		.loc 1 179 0
 131 0006 A3F11E02 		sub	r2, r3, #30
 132 000a D2B2     		uxtb	r2, r2
 178:Src/SensorDataHandler.c **** 				receivedMessage.topic_id == INTERNAL_ROBOT_CTRL_ID_GYROSCOPE_Y ||
 133              		.loc 1 178 0
 134 000c 022A     		cmp	r2, #2
 135 000e 38D8     		bhi	.L10
 180:Src/SensorDataHandler.c **** 				receivedMessage.topic_id == INTERNAL_ROBOT_CTRL_ID_GYROSCOPE_Z){
 181:Src/SensorDataHandler.c **** 
 182:Src/SensorDataHandler.c **** 			readGyroscope(gyro);
 136              		.loc 1 182 0
 137 0010 8648     		ldr	r0, .L26+4
 138 0012 FFF7FEFF 		bl	readGyroscope
 139              	.LVL8:
 183:Src/SensorDataHandler.c **** 			if(receivedMessage.topic_id == INTERNAL_ROBOT_CTRL_ID_GYROSCOPE_X){
 140              		.loc 1 183 0
 141 0016 844B     		ldr	r3, .L26
 142 0018 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 143 001a 1E2B     		cmp	r3, #30
 144 001c 0ED1     		bne	.L11
 184:Src/SensorDataHandler.c **** 				floatToCAN(gyro[0], &sentMessage);
 145              		.loc 1 184 0
 146 001e 844C     		ldr	r4, .L26+8
 147 0020 2046     		mov	r0, r4
 148 0022 824B     		ldr	r3, .L26+4
 149 0024 93ED000A 		vldr.32	s0, [r3]
 150 0028 FFF7FEFF 		bl	floatToCAN
 151              	.LVL9:
 185:Src/SensorDataHandler.c **** 				can_transmit_data_frame_pd(&sentMessage);
 152              		.loc 1 185 0
 153 002c 2046     		mov	r0, r4
 154 002e FFF7FEFF 		bl	can_transmit_data_frame_pd
 155              	.LVL10:
 186:Src/SensorDataHandler.c **** 				componentStatus(INTERNAL_ROBOT_CTRL_ID_GYROSCOPE_X, &sentMessage);
 156              		.loc 1 186 0
 157 0032 2146     		mov	r1, r4
 158 0034 1E20     		movs	r0, #30
 159 0036 FFF7FEFF 		bl	componentStatus
 160              	.LVL11:
ARM GAS  /tmp/ccQ0b1hk.s 			page 7


 161 003a E5E0     		b	.L12
 162              	.L11:
 187:Src/SensorDataHandler.c **** 			}
 188:Src/SensorDataHandler.c **** 			else if(receivedMessage.topic_id == INTERNAL_ROBOT_CTRL_ID_GYROSCOPE_Y){
 163              		.loc 1 188 0
 164 003c 1F2B     		cmp	r3, #31
 165 003e 0ED1     		bne	.L13
 189:Src/SensorDataHandler.c **** 				floatToCAN(gyro[1], &sentMessage);
 166              		.loc 1 189 0
 167 0040 7B4C     		ldr	r4, .L26+8
 168 0042 2046     		mov	r0, r4
 169 0044 794B     		ldr	r3, .L26+4
 170 0046 93ED010A 		vldr.32	s0, [r3, #4]
 171 004a FFF7FEFF 		bl	floatToCAN
 172              	.LVL12:
 190:Src/SensorDataHandler.c **** 				can_transmit_data_frame_pd(&sentMessage);
 173              		.loc 1 190 0
 174 004e 2046     		mov	r0, r4
 175 0050 FFF7FEFF 		bl	can_transmit_data_frame_pd
 176              	.LVL13:
 191:Src/SensorDataHandler.c **** 				componentStatus(INTERNAL_ROBOT_CTRL_ID_GYROSCOPE_Y, &sentMessage);
 177              		.loc 1 191 0
 178 0054 2146     		mov	r1, r4
 179 0056 1F20     		movs	r0, #31
 180 0058 FFF7FEFF 		bl	componentStatus
 181              	.LVL14:
 182 005c D4E0     		b	.L12
 183              	.L13:
 192:Src/SensorDataHandler.c **** 			}
 193:Src/SensorDataHandler.c **** 			else if(receivedMessage.topic_id == INTERNAL_ROBOT_CTRL_ID_GYROSCOPE_Z){
 184              		.loc 1 193 0
 185 005e 202B     		cmp	r3, #32
 186 0060 40F0D280 		bne	.L12
 194:Src/SensorDataHandler.c **** 				floatToCAN(gyro[2], &sentMessage);
 187              		.loc 1 194 0
 188 0064 724C     		ldr	r4, .L26+8
 189 0066 2046     		mov	r0, r4
 190 0068 704B     		ldr	r3, .L26+4
 191 006a 93ED020A 		vldr.32	s0, [r3, #8]
 192 006e FFF7FEFF 		bl	floatToCAN
 193              	.LVL15:
 195:Src/SensorDataHandler.c **** 				can_transmit_data_frame_pd(&sentMessage);
 194              		.loc 1 195 0
 195 0072 2046     		mov	r0, r4
 196 0074 FFF7FEFF 		bl	can_transmit_data_frame_pd
 197              	.LVL16:
 196:Src/SensorDataHandler.c **** 				componentStatus(INTERNAL_ROBOT_CTRL_ID_GYROSCOPE_Z, &sentMessage);
 198              		.loc 1 196 0
 199 0078 2146     		mov	r1, r4
 200 007a 2020     		movs	r0, #32
 201 007c FFF7FEFF 		bl	componentStatus
 202              	.LVL17:
 203 0080 C2E0     		b	.L12
 204              	.L10:
 197:Src/SensorDataHandler.c **** 			}
 198:Src/SensorDataHandler.c **** 		}
 199:Src/SensorDataHandler.c **** 		else if (receivedMessage.topic_id == INTERNAL_ROBOT_CTRL_ID_ACCELEROMETER_X ||
ARM GAS  /tmp/ccQ0b1hk.s 			page 8


 200:Src/SensorDataHandler.c **** 				receivedMessage.topic_id == INTERNAL_ROBOT_CTRL_ID_ACCELEROMETER_Y ||
 205              		.loc 1 200 0
 206 0082 A3F12102 		sub	r2, r3, #33
 207 0086 D2B2     		uxtb	r2, r2
 199:Src/SensorDataHandler.c **** 				receivedMessage.topic_id == INTERNAL_ROBOT_CTRL_ID_ACCELEROMETER_Y ||
 208              		.loc 1 199 0
 209 0088 022A     		cmp	r2, #2
 210 008a 38D8     		bhi	.L14
 201:Src/SensorDataHandler.c **** 				receivedMessage.topic_id == INTERNAL_ROBOT_CTRL_ID_ACCELEROMETER_Z){
 202:Src/SensorDataHandler.c **** 
 203:Src/SensorDataHandler.c **** 			readAccelerometer(accel);
 211              		.loc 1 203 0
 212 008c 6948     		ldr	r0, .L26+12
 213 008e FFF7FEFF 		bl	readAccelerometer
 214              	.LVL18:
 204:Src/SensorDataHandler.c **** 			if(receivedMessage.topic_id == INTERNAL_ROBOT_CTRL_ID_ACCELEROMETER_X){
 215              		.loc 1 204 0
 216 0092 654B     		ldr	r3, .L26
 217 0094 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 218 0096 212B     		cmp	r3, #33
 219 0098 0ED1     		bne	.L15
 205:Src/SensorDataHandler.c **** 				floatToCAN(accel[0], &sentMessage);
 220              		.loc 1 205 0
 221 009a 654C     		ldr	r4, .L26+8
 222 009c 2046     		mov	r0, r4
 223 009e 654B     		ldr	r3, .L26+12
 224 00a0 93ED000A 		vldr.32	s0, [r3]
 225 00a4 FFF7FEFF 		bl	floatToCAN
 226              	.LVL19:
 206:Src/SensorDataHandler.c **** 				can_transmit_data_frame_pd(&sentMessage);
 227              		.loc 1 206 0
 228 00a8 2046     		mov	r0, r4
 229 00aa FFF7FEFF 		bl	can_transmit_data_frame_pd
 230              	.LVL20:
 207:Src/SensorDataHandler.c **** 				componentStatus(INTERNAL_ROBOT_CTRL_ID_ACCELEROMETER_X, &sentMessage);
 231              		.loc 1 207 0
 232 00ae 2146     		mov	r1, r4
 233 00b0 2120     		movs	r0, #33
 234 00b2 FFF7FEFF 		bl	componentStatus
 235              	.LVL21:
 236 00b6 A7E0     		b	.L12
 237              	.L15:
 208:Src/SensorDataHandler.c **** 			}
 209:Src/SensorDataHandler.c **** 			else if(receivedMessage.topic_id == INTERNAL_ROBOT_CTRL_ID_ACCELEROMETER_Y){
 238              		.loc 1 209 0
 239 00b8 222B     		cmp	r3, #34
 240 00ba 0ED1     		bne	.L16
 210:Src/SensorDataHandler.c **** 				floatToCAN(accel[1], &sentMessage);
 241              		.loc 1 210 0
 242 00bc 5C4C     		ldr	r4, .L26+8
 243 00be 2046     		mov	r0, r4
 244 00c0 5C4B     		ldr	r3, .L26+12
 245 00c2 93ED010A 		vldr.32	s0, [r3, #4]
 246 00c6 FFF7FEFF 		bl	floatToCAN
 247              	.LVL22:
 211:Src/SensorDataHandler.c **** 				can_transmit_data_frame_pd(&sentMessage);
 248              		.loc 1 211 0
ARM GAS  /tmp/ccQ0b1hk.s 			page 9


 249 00ca 2046     		mov	r0, r4
 250 00cc FFF7FEFF 		bl	can_transmit_data_frame_pd
 251              	.LVL23:
 212:Src/SensorDataHandler.c **** 				componentStatus(INTERNAL_ROBOT_CTRL_ID_ACCELEROMETER_Y, &sentMessage);
 252              		.loc 1 212 0
 253 00d0 2146     		mov	r1, r4
 254 00d2 2220     		movs	r0, #34
 255 00d4 FFF7FEFF 		bl	componentStatus
 256              	.LVL24:
 257 00d8 96E0     		b	.L12
 258              	.L16:
 213:Src/SensorDataHandler.c **** 			}
 214:Src/SensorDataHandler.c **** 			else if(receivedMessage.topic_id == INTERNAL_ROBOT_CTRL_ID_ACCELEROMETER_Z){
 259              		.loc 1 214 0
 260 00da 232B     		cmp	r3, #35
 261 00dc 40F09480 		bne	.L12
 215:Src/SensorDataHandler.c **** 				floatToCAN(accel[2], &sentMessage);
 262              		.loc 1 215 0
 263 00e0 534C     		ldr	r4, .L26+8
 264 00e2 2046     		mov	r0, r4
 265 00e4 534B     		ldr	r3, .L26+12
 266 00e6 93ED020A 		vldr.32	s0, [r3, #8]
 267 00ea FFF7FEFF 		bl	floatToCAN
 268              	.LVL25:
 216:Src/SensorDataHandler.c **** 				can_transmit_data_frame_pd(&sentMessage);
 269              		.loc 1 216 0
 270 00ee 2046     		mov	r0, r4
 271 00f0 FFF7FEFF 		bl	can_transmit_data_frame_pd
 272              	.LVL26:
 217:Src/SensorDataHandler.c **** 				componentStatus(INTERNAL_ROBOT_CTRL_ID_ACCELEROMETER_Z, &sentMessage);
 273              		.loc 1 217 0
 274 00f4 2146     		mov	r1, r4
 275 00f6 2320     		movs	r0, #35
 276 00f8 FFF7FEFF 		bl	componentStatus
 277              	.LVL27:
 278 00fc 84E0     		b	.L12
 279              	.L14:
 218:Src/SensorDataHandler.c **** 			}
 219:Src/SensorDataHandler.c **** 		}
 220:Src/SensorDataHandler.c **** 		else if (receivedMessage.topic_id == INTERNAL_ROBOT_CTRL_ID_MAGNETOMETER_X ||
 221:Src/SensorDataHandler.c **** 				receivedMessage.topic_id == INTERNAL_ROBOT_CTRL_ID_MAGNETOMETER_Y ||
 280              		.loc 1 221 0
 281 00fe A3F12402 		sub	r2, r3, #36
 282 0102 D2B2     		uxtb	r2, r2
 220:Src/SensorDataHandler.c **** 				receivedMessage.topic_id == INTERNAL_ROBOT_CTRL_ID_MAGNETOMETER_Y ||
 283              		.loc 1 220 0
 284 0104 022A     		cmp	r2, #2
 285 0106 37D8     		bhi	.L17
 222:Src/SensorDataHandler.c **** 				receivedMessage.topic_id == INTERNAL_ROBOT_CTRL_ID_MAGNETOMETER_Z){
 223:Src/SensorDataHandler.c **** 
 224:Src/SensorDataHandler.c **** 			readMagnetometer(magn);
 286              		.loc 1 224 0
 287 0108 4B48     		ldr	r0, .L26+16
 288 010a FFF7FEFF 		bl	readMagnetometer
 289              	.LVL28:
 225:Src/SensorDataHandler.c **** 			if(receivedMessage.topic_id == INTERNAL_ROBOT_CTRL_ID_MAGNETOMETER_X){
 290              		.loc 1 225 0
ARM GAS  /tmp/ccQ0b1hk.s 			page 10


 291 010e 464B     		ldr	r3, .L26
 292 0110 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 293 0112 242B     		cmp	r3, #36
 294 0114 0ED1     		bne	.L18
 226:Src/SensorDataHandler.c **** 				floatToCAN(magn[0], &sentMessage);
 295              		.loc 1 226 0
 296 0116 464C     		ldr	r4, .L26+8
 297 0118 2046     		mov	r0, r4
 298 011a 474B     		ldr	r3, .L26+16
 299 011c 93ED000A 		vldr.32	s0, [r3]
 300 0120 FFF7FEFF 		bl	floatToCAN
 301              	.LVL29:
 227:Src/SensorDataHandler.c **** 				can_transmit_data_frame_pd(&sentMessage);
 302              		.loc 1 227 0
 303 0124 2046     		mov	r0, r4
 304 0126 FFF7FEFF 		bl	can_transmit_data_frame_pd
 305              	.LVL30:
 228:Src/SensorDataHandler.c **** 				componentStatus(INTERNAL_ROBOT_CTRL_ID_MAGNETOMETER_X, &sentMessage);
 306              		.loc 1 228 0
 307 012a 2146     		mov	r1, r4
 308 012c 2420     		movs	r0, #36
 309 012e FFF7FEFF 		bl	componentStatus
 310              	.LVL31:
 311 0132 69E0     		b	.L12
 312              	.L18:
 229:Src/SensorDataHandler.c **** 			}
 230:Src/SensorDataHandler.c **** 			else if(receivedMessage.topic_id == INTERNAL_ROBOT_CTRL_ID_MAGNETOMETER_Y){
 313              		.loc 1 230 0
 314 0134 252B     		cmp	r3, #37
 315 0136 0ED1     		bne	.L19
 231:Src/SensorDataHandler.c **** 				floatToCAN(magn[1], &sentMessage);
 316              		.loc 1 231 0
 317 0138 3D4C     		ldr	r4, .L26+8
 318 013a 2046     		mov	r0, r4
 319 013c 3E4B     		ldr	r3, .L26+16
 320 013e 93ED010A 		vldr.32	s0, [r3, #4]
 321 0142 FFF7FEFF 		bl	floatToCAN
 322              	.LVL32:
 232:Src/SensorDataHandler.c **** 				can_transmit_data_frame_pd(&sentMessage);
 323              		.loc 1 232 0
 324 0146 2046     		mov	r0, r4
 325 0148 FFF7FEFF 		bl	can_transmit_data_frame_pd
 326              	.LVL33:
 233:Src/SensorDataHandler.c **** 				componentStatus(INTERNAL_ROBOT_CTRL_ID_MAGNETOMETER_Y, &sentMessage);
 327              		.loc 1 233 0
 328 014c 2146     		mov	r1, r4
 329 014e 2520     		movs	r0, #37
 330 0150 FFF7FEFF 		bl	componentStatus
 331              	.LVL34:
 332 0154 58E0     		b	.L12
 333              	.L19:
 234:Src/SensorDataHandler.c **** 			}
 235:Src/SensorDataHandler.c **** 			else if(receivedMessage.topic_id == INTERNAL_ROBOT_CTRL_ID_MAGNETOMETER_Z){
 334              		.loc 1 235 0
 335 0156 262B     		cmp	r3, #38
 336 0158 56D1     		bne	.L12
 236:Src/SensorDataHandler.c **** 				floatToCAN(magn[2], &sentMessage);
ARM GAS  /tmp/ccQ0b1hk.s 			page 11


 337              		.loc 1 236 0
 338 015a 354C     		ldr	r4, .L26+8
 339 015c 2046     		mov	r0, r4
 340 015e 364B     		ldr	r3, .L26+16
 341 0160 93ED020A 		vldr.32	s0, [r3, #8]
 342 0164 FFF7FEFF 		bl	floatToCAN
 343              	.LVL35:
 237:Src/SensorDataHandler.c **** 				can_transmit_data_frame_pd(&sentMessage);
 344              		.loc 1 237 0
 345 0168 2046     		mov	r0, r4
 346 016a FFF7FEFF 		bl	can_transmit_data_frame_pd
 347              	.LVL36:
 238:Src/SensorDataHandler.c **** 				componentStatus(INTERNAL_ROBOT_CTRL_ID_MAGNETOMETER_Z, &sentMessage);
 348              		.loc 1 238 0
 349 016e 2146     		mov	r1, r4
 350 0170 2620     		movs	r0, #38
 351 0172 FFF7FEFF 		bl	componentStatus
 352              	.LVL37:
 353 0176 47E0     		b	.L12
 354              	.L17:
 239:Src/SensorDataHandler.c **** 			}
 240:Src/SensorDataHandler.c **** 		}
 241:Src/SensorDataHandler.c **** 		else if (receivedMessage.topic_id == INTERNAL_ROBOT_CTRL_ID_ULTRASONIC_SENSOR_1 ||
 242:Src/SensorDataHandler.c **** 				receivedMessage.topic_id == INTERNAL_ROBOT_CTRL_ID_ULTRASONIC_SENSOR_2 ||
 243:Src/SensorDataHandler.c **** 				receivedMessage.topic_id == INTERNAL_ROBOT_CTRL_ID_ULTRASONIC_SENSOR_3 ||
 355              		.loc 1 243 0
 356 0178 A3F12702 		sub	r2, r3, #39
 357 017c D2B2     		uxtb	r2, r2
 241:Src/SensorDataHandler.c **** 				receivedMessage.topic_id == INTERNAL_ROBOT_CTRL_ID_ULTRASONIC_SENSOR_2 ||
 358              		.loc 1 241 0
 359 017e 032A     		cmp	r2, #3
 360 0180 42D8     		bhi	.L12
 244:Src/SensorDataHandler.c **** 				receivedMessage.topic_id == INTERNAL_ROBOT_CTRL_ID_ULTRASONIC_SENSOR_4){
 245:Src/SensorDataHandler.c **** 
 246:Src/SensorDataHandler.c **** 			if(receivedMessage.topic_id == INTERNAL_ROBOT_CTRL_ID_ULTRASONIC_SENSOR_1){
 361              		.loc 1 246 0
 362 0182 272B     		cmp	r3, #39
 363 0184 0ED1     		bne	.L20
 247:Src/SensorDataHandler.c **** 				floatToCAN(readUltrasonic(&right_sensor), &sentMessage);
 364              		.loc 1 247 0
 365 0186 2D48     		ldr	r0, .L26+20
 366 0188 FFF7FEFF 		bl	readUltrasonic
 367              	.LVL38:
 368 018c 284C     		ldr	r4, .L26+8
 369 018e 2046     		mov	r0, r4
 370 0190 FFF7FEFF 		bl	floatToCAN
 371              	.LVL39:
 248:Src/SensorDataHandler.c **** 				can_transmit_data_frame_pd(&sentMessage);
 372              		.loc 1 248 0
 373 0194 2046     		mov	r0, r4
 374 0196 FFF7FEFF 		bl	can_transmit_data_frame_pd
 375              	.LVL40:
 249:Src/SensorDataHandler.c **** 				componentStatus(INTERNAL_ROBOT_CTRL_ID_ULTRASONIC_SENSOR_1, &sentMessage);
 376              		.loc 1 249 0
 377 019a 2146     		mov	r1, r4
 378 019c 2720     		movs	r0, #39
 379 019e FFF7FEFF 		bl	componentStatus
ARM GAS  /tmp/ccQ0b1hk.s 			page 12


 380              	.LVL41:
 381 01a2 31E0     		b	.L12
 382              	.L20:
 250:Src/SensorDataHandler.c **** 			}
 251:Src/SensorDataHandler.c **** 			else if(receivedMessage.topic_id == INTERNAL_ROBOT_CTRL_ID_ULTRASONIC_SENSOR_2){
 383              		.loc 1 251 0
 384 01a4 282B     		cmp	r3, #40
 385 01a6 0ED1     		bne	.L21
 252:Src/SensorDataHandler.c **** 				floatToCAN(readUltrasonic(&back_sensor), &sentMessage);
 386              		.loc 1 252 0
 387 01a8 2548     		ldr	r0, .L26+24
 388 01aa FFF7FEFF 		bl	readUltrasonic
 389              	.LVL42:
 390 01ae 204C     		ldr	r4, .L26+8
 391 01b0 2046     		mov	r0, r4
 392 01b2 FFF7FEFF 		bl	floatToCAN
 393              	.LVL43:
 253:Src/SensorDataHandler.c **** 				can_transmit_data_frame_pd(&sentMessage);
 394              		.loc 1 253 0
 395 01b6 2046     		mov	r0, r4
 396 01b8 FFF7FEFF 		bl	can_transmit_data_frame_pd
 397              	.LVL44:
 254:Src/SensorDataHandler.c **** 				componentStatus(INTERNAL_ROBOT_CTRL_ID_ULTRASONIC_SENSOR_2, &sentMessage);
 398              		.loc 1 254 0
 399 01bc 2146     		mov	r1, r4
 400 01be 2820     		movs	r0, #40
 401 01c0 FFF7FEFF 		bl	componentStatus
 402              	.LVL45:
 403 01c4 20E0     		b	.L12
 404              	.L21:
 255:Src/SensorDataHandler.c **** 			}
 256:Src/SensorDataHandler.c **** 			else if(receivedMessage.topic_id == INTERNAL_ROBOT_CTRL_ID_ULTRASONIC_SENSOR_3){
 405              		.loc 1 256 0
 406 01c6 292B     		cmp	r3, #41
 407 01c8 0ED1     		bne	.L22
 257:Src/SensorDataHandler.c **** 				floatToCAN(readUltrasonic(&left_sensor), &sentMessage);
 408              		.loc 1 257 0
 409 01ca 1E48     		ldr	r0, .L26+28
 410 01cc FFF7FEFF 		bl	readUltrasonic
 411              	.LVL46:
 412 01d0 174C     		ldr	r4, .L26+8
 413 01d2 2046     		mov	r0, r4
 414 01d4 FFF7FEFF 		bl	floatToCAN
 415              	.LVL47:
 258:Src/SensorDataHandler.c **** 				can_transmit_data_frame_pd(&sentMessage);
 416              		.loc 1 258 0
 417 01d8 2046     		mov	r0, r4
 418 01da FFF7FEFF 		bl	can_transmit_data_frame_pd
 419              	.LVL48:
 259:Src/SensorDataHandler.c **** 				componentStatus(INTERNAL_ROBOT_CTRL_ID_ULTRASONIC_SENSOR_3, &sentMessage);
 420              		.loc 1 259 0
 421 01de 2146     		mov	r1, r4
 422 01e0 2920     		movs	r0, #41
 423 01e2 FFF7FEFF 		bl	componentStatus
 424              	.LVL49:
 425 01e6 0FE0     		b	.L12
 426              	.L22:
ARM GAS  /tmp/ccQ0b1hk.s 			page 13


 260:Src/SensorDataHandler.c **** 			}
 261:Src/SensorDataHandler.c **** 			else if(receivedMessage.topic_id == INTERNAL_ROBOT_CTRL_ID_ULTRASONIC_SENSOR_4){
 427              		.loc 1 261 0
 428 01e8 2A2B     		cmp	r3, #42
 429 01ea 0DD1     		bne	.L12
 262:Src/SensorDataHandler.c **** 				floatToCAN(readUltrasonic(&front_sensor), &sentMessage);
 430              		.loc 1 262 0
 431 01ec 1648     		ldr	r0, .L26+32
 432 01ee FFF7FEFF 		bl	readUltrasonic
 433              	.LVL50:
 434 01f2 0F4C     		ldr	r4, .L26+8
 435 01f4 2046     		mov	r0, r4
 436 01f6 FFF7FEFF 		bl	floatToCAN
 437              	.LVL51:
 263:Src/SensorDataHandler.c **** 				can_transmit_data_frame_pd(&sentMessage);
 438              		.loc 1 263 0
 439 01fa 2046     		mov	r0, r4
 440 01fc FFF7FEFF 		bl	can_transmit_data_frame_pd
 441              	.LVL52:
 264:Src/SensorDataHandler.c **** 				componentStatus(INTERNAL_ROBOT_CTRL_ID_ULTRASONIC_SENSOR_4, &sentMessage);
 442              		.loc 1 264 0
 443 0200 2146     		mov	r1, r4
 444 0202 2A20     		movs	r0, #42
 445 0204 FFF7FEFF 		bl	componentStatus
 446              	.LVL53:
 447              	.L12:
 265:Src/SensorDataHandler.c **** 			}
 266:Src/SensorDataHandler.c **** 		}
 267:Src/SensorDataHandler.c **** 		vTaskDelay(delay_command);
 448              		.loc 1 267 0
 449 0208 104B     		ldr	r3, .L26+36
 450 020a 1868     		ldr	r0, [r3]
 451 020c FFF7FEFF 		bl	vTaskDelay
 452              	.LVL54:
 268:Src/SensorDataHandler.c **** 		flag_counter++;
 453              		.loc 1 268 0
 454 0210 0F4A     		ldr	r2, .L26+40
 455 0212 1368     		ldr	r3, [r2]
 456 0214 0133     		adds	r3, r3, #1
 457 0216 1360     		str	r3, [r2]
 269:Src/SensorDataHandler.c **** 		if(flag_counter>500){
 458              		.loc 1 269 0
 459 0218 B3F5FA7F 		cmp	r3, #500
 460 021c 7FF7F1AE 		ble	.L23
 270:Src/SensorDataHandler.c **** 			flag_counter = 0;
 461              		.loc 1 270 0
 462 0220 0022     		movs	r2, #0
 463 0222 0B4B     		ldr	r3, .L26+40
 464 0224 1A60     		str	r2, [r3]
 465 0226 ECE6     		b	.L23
 466              	.L27:
 467              		.align	2
 468              	.L26:
 469 0228 00000000 		.word	receivedMessage
 470 022c 00000000 		.word	gyro
 471 0230 00000000 		.word	sentMessage
 472 0234 00000000 		.word	accel
ARM GAS  /tmp/ccQ0b1hk.s 			page 14


 473 0238 00000000 		.word	magn
 474 023c 00000000 		.word	right_sensor
 475 0240 00000000 		.word	back_sensor
 476 0244 00000000 		.word	left_sensor
 477 0248 00000000 		.word	front_sensor
 478 024c 00000000 		.word	.LANCHOR0
 479 0250 00000000 		.word	.LANCHOR1
 480              		.cfi_endproc
 481              	.LFE133:
 483              		.section	.text.setMode,"ax",%progbits
 484              		.align	2
 485              		.thumb
 486              		.thumb_func
 488              	setMode:
 489              	.LFB129:
  44:Src/SensorDataHandler.c **** 	current_mode=mode;
 490              		.loc 1 44 0
 491              		.cfi_startproc
 492              		@ args = 0, pretend = 0, frame = 0
 493              		@ frame_needed = 0, uses_anonymous_args = 0
 494              	.LVL55:
 495 0000 38B5     		push	{r3, r4, r5, lr}
 496              	.LCFI2:
 497              		.cfi_def_cfa_offset 16
 498              		.cfi_offset 3, -16
 499              		.cfi_offset 4, -12
 500              		.cfi_offset 5, -8
 501              		.cfi_offset 14, -4
  45:Src/SensorDataHandler.c **** 
 502              		.loc 1 45 0
 503 0002 254B     		ldr	r3, .L40
 504 0004 1860     		str	r0, [r3]
  47:Src/SensorDataHandler.c **** 	case NO_TRANSMISSION:
 505              		.loc 1 47 0
 506 0006 0128     		cmp	r0, #1
 507 0008 0BD0     		beq	.L30
 508 000a 0228     		cmp	r0, #2
 509 000c 31D0     		beq	.L31
 510 000e 0028     		cmp	r0, #0
 511 0010 41D1     		bne	.L28
  49:Src/SensorDataHandler.c **** 		flag_counter = 0;
 512              		.loc 1 49 0
 513 0012 224B     		ldr	r3, .L40+4
 514 0014 1868     		ldr	r0, [r3]
 515              	.LVL56:
 516 0016 FFF7FEFF 		bl	vTaskSuspend
 517              	.LVL57:
  50:Src/SensorDataHandler.c **** 		break;
 518              		.loc 1 50 0
 519 001a 0022     		movs	r2, #0
 520 001c 204B     		ldr	r3, .L40+8
 521 001e 1A60     		str	r2, [r3]
  51:Src/SensorDataHandler.c **** 
 522              		.loc 1 51 0
 523 0020 38BD     		pop	{r3, r4, r5, pc}
 524              	.LVL58:
 525              	.L30:
ARM GAS  /tmp/ccQ0b1hk.s 			page 15


  55:Src/SensorDataHandler.c **** 		case MILISECONDS:
 526              		.loc 1 55 0
 527 0022 204B     		ldr	r3, .L40+12
 528 0024 1B68     		ldr	r3, [r3]
 529 0026 032B     		cmp	r3, #3
 530 0028 1ED8     		bhi	.L33
 531 002a DFE803F0 		tbb	[pc, r3]
 532              	.L35:
 533 002e 02       		.byte	(.L34-.L35)/2
 534 002f 07       		.byte	(.L36-.L35)/2
 535 0030 10       		.byte	(.L37-.L35)/2
 536 0031 19       		.byte	(.L38-.L35)/2
 537              		.p2align 1
 538              	.L34:
  57:Src/SensorDataHandler.c **** 			break;
 539              		.loc 1 57 0
 540 0032 1D4B     		ldr	r3, .L40+16
 541 0034 1A68     		ldr	r2, [r3]
 542 0036 1D4B     		ldr	r3, .L40+20
 543 0038 1A60     		str	r2, [r3]
  58:Src/SensorDataHandler.c **** 
 544              		.loc 1 58 0
 545 003a 15E0     		b	.L33
 546              	.L36:
  61:Src/SensorDataHandler.c **** 			break;
 547              		.loc 1 61 0
 548 003c 1A4B     		ldr	r3, .L40+16
 549 003e 1A68     		ldr	r2, [r3]
 550 0040 4FF47A73 		mov	r3, #1000
 551 0044 03FB02F3 		mul	r3, r3, r2
 552 0048 184A     		ldr	r2, .L40+20
 553 004a 1360     		str	r3, [r2]
  62:Src/SensorDataHandler.c **** 
 554              		.loc 1 62 0
 555 004c 0CE0     		b	.L33
 556              	.L37:
  65:Src/SensorDataHandler.c **** 			break;
 557              		.loc 1 65 0
 558 004e 164B     		ldr	r3, .L40+16
 559 0050 1A68     		ldr	r2, [r3]
 560 0052 4EF66023 		movw	r3, #60000
 561 0056 03FB02F3 		mul	r3, r3, r2
 562 005a 144A     		ldr	r2, .L40+20
 563 005c 1360     		str	r3, [r2]
  66:Src/SensorDataHandler.c **** 		case MICROSECONDS:
 564              		.loc 1 66 0
 565 005e 03E0     		b	.L33
 566              	.L38:
  68:Src/SensorDataHandler.c **** 			break;
 567              		.loc 1 68 0
 568 0060 114B     		ldr	r3, .L40+16
 569 0062 1A68     		ldr	r2, [r3]
 570 0064 114B     		ldr	r3, .L40+20
 571 0066 1A60     		str	r2, [r3]
 572              	.L33:
  72:Src/SensorDataHandler.c **** 		break;
 573              		.loc 1 72 0
ARM GAS  /tmp/ccQ0b1hk.s 			page 16


 574 0068 0C4B     		ldr	r3, .L40+4
 575 006a 1868     		ldr	r0, [r3]
 576              	.LVL59:
 577 006c FFF7FEFF 		bl	vTaskResume
 578              	.LVL60:
  73:Src/SensorDataHandler.c **** 
 579              		.loc 1 73 0
 580 0070 38BD     		pop	{r3, r4, r5, pc}
 581              	.LVL61:
 582              	.L31:
  76:Src/SensorDataHandler.c **** 		flag_counter = 0;
 583              		.loc 1 76 0
 584 0072 0A4D     		ldr	r5, .L40+4
 585 0074 2868     		ldr	r0, [r5]
 586              	.LVL62:
 587 0076 FFF7FEFF 		bl	vTaskSuspend
 588              	.LVL63:
  77:Src/SensorDataHandler.c **** 		vTaskResume(transmitter_handler);
 589              		.loc 1 77 0
 590 007a 094C     		ldr	r4, .L40+8
 591 007c 0023     		movs	r3, #0
 592 007e 2360     		str	r3, [r4]
  78:Src/SensorDataHandler.c **** 
 593              		.loc 1 78 0
 594 0080 2868     		ldr	r0, [r5]
 595 0082 FFF7FEFF 		bl	vTaskResume
 596              	.LVL64:
  80:Src/SensorDataHandler.c **** 			//run only once
 597              		.loc 1 80 0
 598 0086 2368     		ldr	r3, [r4]
 599 0088 002B     		cmp	r3, #0
 600 008a 04DD     		ble	.L28
  82:Src/SensorDataHandler.c **** 			flag_counter=0;
 601              		.loc 1 82 0
 602 008c 2868     		ldr	r0, [r5]
 603 008e FFF7FEFF 		bl	vTaskSuspend
 604              	.LVL65:
  83:Src/SensorDataHandler.c **** 		}
 605              		.loc 1 83 0
 606 0092 0022     		movs	r2, #0
 607 0094 2260     		str	r2, [r4]
 608              	.L28:
 609 0096 38BD     		pop	{r3, r4, r5, pc}
 610              	.L41:
 611              		.align	2
 612              	.L40:
 613 0098 00000000 		.word	.LANCHOR2
 614 009c 00000000 		.word	.LANCHOR3
 615 00a0 00000000 		.word	.LANCHOR1
 616 00a4 00000000 		.word	.LANCHOR4
 617 00a8 00000000 		.word	.LANCHOR5
 618 00ac 00000000 		.word	.LANCHOR0
 619              		.cfi_endproc
 620              	.LFE129:
 622              		.section	.text.vReceiver,"ax",%progbits
 623              		.align	2
 624              		.thumb
ARM GAS  /tmp/ccQ0b1hk.s 			page 17


 625              		.thumb_func
 627              	vReceiver:
 628              	.LFB134:
 271:Src/SensorDataHandler.c **** 		}
 272:Src/SensorDataHandler.c **** 	}
 273:Src/SensorDataHandler.c **** }
 274:Src/SensorDataHandler.c **** static void vReceiver(void *pvParameters){
 629              		.loc 1 274 0
 630              		.cfi_startproc
 631              		@ Volatile: function does not return.
 632              		@ args = 0, pretend = 0, frame = 24
 633              		@ frame_needed = 0, uses_anonymous_args = 0
 634              	.LVL66:
 635 0000 00B5     		push	{lr}
 636              	.LCFI3:
 637              		.cfi_def_cfa_offset 4
 638              		.cfi_offset 14, -4
 639 0002 87B0     		sub	sp, sp, #28
 640              	.LCFI4:
 641              		.cfi_def_cfa_offset 32
 642              	.LVL67:
 643              	.L50:
 275:Src/SensorDataHandler.c **** 	while(1){
 276:Src/SensorDataHandler.c **** 		receivedMessage = can_receive_data_frame_pd();
 644              		.loc 1 276 0
 645 0004 284C     		ldr	r4, .L52
 646 0006 6846     		mov	r0, sp
 647 0008 FFF7FEFF 		bl	can_receive_data_frame_pd
 648              	.LVL68:
 649 000c 0098     		ldr	r0, [sp]	@ unaligned
 650 000e 0199     		ldr	r1, [sp, #4]	@ unaligned
 651 0010 029A     		ldr	r2, [sp, #8]	@ unaligned
 652 0012 039B     		ldr	r3, [sp, #12]	@ unaligned
 653 0014 2060     		str	r0, [r4]	@ unaligned
 654 0016 6160     		str	r1, [r4, #4]	@ unaligned
 655 0018 A260     		str	r2, [r4, #8]	@ unaligned
 656 001a E360     		str	r3, [r4, #12]	@ unaligned
 657 001c BDF81020 		ldrh	r2, [sp, #16]	@ unaligned
 658 0020 9DF81230 		ldrb	r3, [sp, #18]	@ zero_extendqisi2
 659 0024 2282     		strh	r2, [r4, #16]	@ unaligned
 660 0026 A374     		strb	r3, [r4, #18]
 277:Src/SensorDataHandler.c **** 
 278:Src/SensorDataHandler.c **** 		if(receivedMessage.c_s_bit_id ==SENSOR_DATA_BIT){		//sensor or command
 661              		.loc 1 278 0
 662 0028 6378     		ldrb	r3, [r4, #1]	@ zero_extendqisi2
 663 002a 012B     		cmp	r3, #1
 664 002c 04D1     		bne	.L43
 279:Src/SensorDataHandler.c **** 			vTaskResume(transmitter_handler);
 665              		.loc 1 279 0
 666 002e 1F4B     		ldr	r3, .L52+4
 667 0030 1868     		ldr	r0, [r3]
 668 0032 FFF7FEFF 		bl	vTaskResume
 669              	.LVL69:
 670 0036 33E0     		b	.L44
 671              	.L43:
 280:Src/SensorDataHandler.c **** 		}
 281:Src/SensorDataHandler.c **** 		else if(receivedMessage.c_s_bit_id == COMMAND_DATA_BIT){	//command
ARM GAS  /tmp/ccQ0b1hk.s 			page 18


 672              		.loc 1 281 0
 673 0038 002B     		cmp	r3, #0
 674 003a 31D1     		bne	.L44
 282:Src/SensorDataHandler.c **** 
 283:Src/SensorDataHandler.c **** 			vTaskSuspend(transmitter_handler);
 675              		.loc 1 283 0
 676 003c 1B4B     		ldr	r3, .L52+4
 677 003e 1868     		ldr	r0, [r3]
 678 0040 FFF7FEFF 		bl	vTaskSuspend
 679              	.LVL70:
 284:Src/SensorDataHandler.c **** 
 285:Src/SensorDataHandler.c **** 			if(receivedMessage.data[0] == NO_TRANSMISSION){
 680              		.loc 1 285 0
 681 0044 184B     		ldr	r3, .L52
 682 0046 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 683 0048 1BB9     		cbnz	r3, .L45
 286:Src/SensorDataHandler.c **** 				setMode(NO_TRANSMISSION);
 684              		.loc 1 286 0
 685 004a 0020     		movs	r0, #0
 686 004c FFF7FEFF 		bl	setMode
 687              	.LVL71:
 688 0050 26E0     		b	.L44
 689              	.L45:
 287:Src/SensorDataHandler.c **** 			}
 288:Src/SensorDataHandler.c **** 			else if(receivedMessage.data[0]== PUBLISHER){
 690              		.loc 1 288 0
 691 0052 012B     		cmp	r3, #1
 692 0054 1FD1     		bne	.L46
 289:Src/SensorDataHandler.c **** 				if(receivedMessage.dlc > 1 ){
 693              		.loc 1 289 0
 694 0056 144B     		ldr	r3, .L52
 695 0058 DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 696 005a 012B     		cmp	r3, #1
 697 005c 11D9     		bls	.L47
 290:Src/SensorDataHandler.c **** 					if(receivedMessage.dlc==2){
 698              		.loc 1 290 0
 699 005e 022B     		cmp	r3, #2
 700 0060 07D1     		bne	.L48
 291:Src/SensorDataHandler.c **** 						sample_time = receivedMessage.data[1];
 701              		.loc 1 291 0
 702 0062 114B     		ldr	r3, .L52
 703 0064 5A79     		ldrb	r2, [r3, #5]	@ zero_extendqisi2
 704 0066 124B     		ldr	r3, .L52+8
 705 0068 1A60     		str	r2, [r3]
 292:Src/SensorDataHandler.c **** 						units_time = UNITS_TIME_DEFAULT;
 706              		.loc 1 292 0
 707 006a 0022     		movs	r2, #0
 708 006c 114B     		ldr	r3, .L52+12
 709 006e 1A60     		str	r2, [r3]
 710 0070 0DE0     		b	.L49
 711              	.L48:
 293:Src/SensorDataHandler.c **** 					}
 294:Src/SensorDataHandler.c **** 					else{
 295:Src/SensorDataHandler.c **** 						sample_time = receivedMessage.data[1];
 712              		.loc 1 295 0
 713 0072 0D4B     		ldr	r3, .L52
 714 0074 5979     		ldrb	r1, [r3, #5]	@ zero_extendqisi2
ARM GAS  /tmp/ccQ0b1hk.s 			page 19


 715 0076 0E4A     		ldr	r2, .L52+8
 716 0078 1160     		str	r1, [r2]
 296:Src/SensorDataHandler.c **** 						units_time = receivedMessage.data[2];
 717              		.loc 1 296 0
 718 007a 9A79     		ldrb	r2, [r3, #6]	@ zero_extendqisi2
 719 007c 0D4B     		ldr	r3, .L52+12
 720 007e 1A60     		str	r2, [r3]
 721 0080 05E0     		b	.L49
 722              	.L47:
 297:Src/SensorDataHandler.c **** 					}
 298:Src/SensorDataHandler.c **** 				}
 299:Src/SensorDataHandler.c **** 				else{
 300:Src/SensorDataHandler.c **** 					sample_time = SAMPLE_TIME_DEFAULT;
 723              		.loc 1 300 0
 724 0082 3222     		movs	r2, #50
 725 0084 0A4B     		ldr	r3, .L52+8
 726 0086 1A60     		str	r2, [r3]
 301:Src/SensorDataHandler.c **** 					units_time = UNITS_TIME_DEFAULT;
 727              		.loc 1 301 0
 728 0088 0022     		movs	r2, #0
 729 008a 0A4B     		ldr	r3, .L52+12
 730 008c 1A60     		str	r2, [r3]
 731              	.L49:
 302:Src/SensorDataHandler.c **** 				}
 303:Src/SensorDataHandler.c **** 				setMode(PUBLISHER);
 732              		.loc 1 303 0
 733 008e 0120     		movs	r0, #1
 734 0090 FFF7FEFF 		bl	setMode
 735              	.LVL72:
 736 0094 04E0     		b	.L44
 737              	.L46:
 304:Src/SensorDataHandler.c **** 			}
 305:Src/SensorDataHandler.c **** 			else if(receivedMessage.data[0] == ONE_TIME_TRANSMISSION){
 738              		.loc 1 305 0
 739 0096 022B     		cmp	r3, #2
 740 0098 02D1     		bne	.L44
 306:Src/SensorDataHandler.c **** 				setMode(ONE_TIME_TRANSMISSION);
 741              		.loc 1 306 0
 742 009a 0220     		movs	r0, #2
 743 009c FFF7FEFF 		bl	setMode
 744              	.LVL73:
 745              	.L44:
 307:Src/SensorDataHandler.c **** 			}
 308:Src/SensorDataHandler.c **** 		}
 309:Src/SensorDataHandler.c **** 		vTaskDelay(10);
 746              		.loc 1 309 0
 747 00a0 0A20     		movs	r0, #10
 748 00a2 FFF7FEFF 		bl	vTaskDelay
 749              	.LVL74:
 310:Src/SensorDataHandler.c **** 	}
 750              		.loc 1 310 0
 751 00a6 ADE7     		b	.L50
 752              	.L53:
 753              		.align	2
 754              	.L52:
 755 00a8 00000000 		.word	receivedMessage
 756 00ac 00000000 		.word	.LANCHOR3
ARM GAS  /tmp/ccQ0b1hk.s 			page 20


 757 00b0 00000000 		.word	.LANCHOR5
 758 00b4 00000000 		.word	.LANCHOR4
 759              		.cfi_endproc
 760              	.LFE134:
 762              		.section	.text.initHardware,"ax",%progbits
 763              		.align	2
 764              		.global	initHardware
 765              		.thumb
 766              		.thumb_func
 768              	initHardware:
 769              	.LFB130:
 119:Src/SensorDataHandler.c **** 	initGyroscope();
 770              		.loc 1 119 0
 771              		.cfi_startproc
 772              		@ args = 0, pretend = 0, frame = 0
 773              		@ frame_needed = 0, uses_anonymous_args = 0
 774 0000 30B5     		push	{r4, r5, lr}
 775              	.LCFI5:
 776              		.cfi_def_cfa_offset 12
 777              		.cfi_offset 4, -12
 778              		.cfi_offset 5, -8
 779              		.cfi_offset 14, -4
 780 0002 83B0     		sub	sp, sp, #12
 781              	.LCFI6:
 782              		.cfi_def_cfa_offset 24
 120:Src/SensorDataHandler.c **** 	initAccelerometer();
 783              		.loc 1 120 0
 784 0004 FFF7FEFF 		bl	initGyroscope
 785              	.LVL75:
 121:Src/SensorDataHandler.c **** 	initMagnetometer();
 786              		.loc 1 121 0
 787 0008 FFF7FEFF 		bl	initAccelerometer
 788              	.LVL76:
 122:Src/SensorDataHandler.c **** 
 789              		.loc 1 122 0
 790 000c FFF7FEFF 		bl	initMagnetometer
 791              	.LVL77:
 124:Src/SensorDataHandler.c **** 	sentMessage.dlc = 1;
 792              		.loc 1 124 0
 793 0010 1C4B     		ldr	r3, .L56
 794 0012 0122     		movs	r2, #1
 795 0014 5A70     		strb	r2, [r3, #1]
 125:Src/SensorDataHandler.c **** 	sentMessage.priority_id = PRIORITY_MEDIUM;
 796              		.loc 1 125 0
 797 0016 DA70     		strb	r2, [r3, #3]
 126:Src/SensorDataHandler.c **** 
 798              		.loc 1 126 0
 799 0018 0224     		movs	r4, #2
 800 001a 1C70     		strb	r4, [r3]
 128:Src/SensorDataHandler.c **** 	right_sensor.grp_trig = (uint32_t) GPIOC;
 801              		.loc 1 128 0
 802 001c 1A4B     		ldr	r3, .L56+4
 803 001e 0421     		movs	r1, #4
 804 0020 1980     		strh	r1, [r3]	@ movhi
 129:Src/SensorDataHandler.c **** 	right_sensor.num_echo = GPIO_PIN_3;
 805              		.loc 1 129 0
 806 0022 1A4A     		ldr	r2, .L56+8
ARM GAS  /tmp/ccQ0b1hk.s 			page 21


 807 0024 5A60     		str	r2, [r3, #4]
 130:Src/SensorDataHandler.c **** 	right_sensor.grp_echo = (uint32_t) GPIOC;
 808              		.loc 1 130 0
 809 0026 0820     		movs	r0, #8
 810 0028 5880     		strh	r0, [r3, #2]	@ movhi
 131:Src/SensorDataHandler.c **** 
 811              		.loc 1 131 0
 812 002a 9A60     		str	r2, [r3, #8]
 133:Src/SensorDataHandler.c **** 	back_sensor.grp_trig = (uint32_t) GPIOD;
 813              		.loc 1 133 0
 814 002c 184B     		ldr	r3, .L56+12
 815 002e 4FF48062 		mov	r2, #1024
 816 0032 1A80     		strh	r2, [r3]	@ movhi
 134:Src/SensorDataHandler.c **** 	back_sensor.num_echo = GPIO_PIN_11;
 817              		.loc 1 134 0
 818 0034 174D     		ldr	r5, .L56+16
 819 0036 5D60     		str	r5, [r3, #4]
 135:Src/SensorDataHandler.c **** 	back_sensor.grp_echo = (uint32_t) GPIOD;
 820              		.loc 1 135 0
 821 0038 4FF40060 		mov	r0, #2048
 822 003c 5880     		strh	r0, [r3, #2]	@ movhi
 136:Src/SensorDataHandler.c **** 
 823              		.loc 1 136 0
 824 003e 9D60     		str	r5, [r3, #8]
 138:Src/SensorDataHandler.c **** 	left_sensor.grp_trig = (uint32_t) GPIOB;
 825              		.loc 1 138 0
 826 0040 154B     		ldr	r3, .L56+20
 827 0042 1A80     		strh	r2, [r3]	@ movhi
 139:Src/SensorDataHandler.c **** 	left_sensor.num_echo = GPIO_PIN_11;
 828              		.loc 1 139 0
 829 0044 02F19042 		add	r2, r2, #1207959552
 830 0048 5A60     		str	r2, [r3, #4]
 140:Src/SensorDataHandler.c **** 	left_sensor.grp_echo = (uint32_t) GPIOB;
 831              		.loc 1 140 0
 832 004a 5880     		strh	r0, [r3, #2]	@ movhi
 141:Src/SensorDataHandler.c **** 
 833              		.loc 1 141 0
 834 004c 9A60     		str	r2, [r3, #8]
 143:Src/SensorDataHandler.c **** 	front_sensor.grp_trig = (uint32_t) GPIOB;
 835              		.loc 1 143 0
 836 004e 134B     		ldr	r3, .L56+24
 837 0050 1980     		strh	r1, [r3]	@ movhi
 144:Src/SensorDataHandler.c **** 	front_sensor.num_echo = GPIO_PIN_7;
 838              		.loc 1 144 0
 839 0052 5A60     		str	r2, [r3, #4]
 145:Src/SensorDataHandler.c **** 	front_sensor.grp_echo = (uint32_t) GPIOE;
 840              		.loc 1 145 0
 841 0054 8022     		movs	r2, #128
 842 0056 5A80     		strh	r2, [r3, #2]	@ movhi
 146:Src/SensorDataHandler.c **** 
 843              		.loc 1 146 0
 844 0058 114A     		ldr	r2, .L56+28
 845 005a 9A60     		str	r2, [r3, #8]
 149:Src/SensorDataHandler.c **** 	xTaskCreate(vSender, "Transimtter Handler", 200, NULL, tskIDLE_PRIORITY + 2, &transmitter_handler)
 846              		.loc 1 149 0
 847 005c 114B     		ldr	r3, .L56+32
 848 005e 0193     		str	r3, [sp, #4]
ARM GAS  /tmp/ccQ0b1hk.s 			page 22


 849 0060 0094     		str	r4, [sp]
 850 0062 0023     		movs	r3, #0
 851 0064 C822     		movs	r2, #200
 852 0066 1049     		ldr	r1, .L56+36
 853 0068 1048     		ldr	r0, .L56+40
 854 006a FFF7FEFF 		bl	xTaskCreate
 855              	.LVL78:
 150:Src/SensorDataHandler.c **** 
 856              		.loc 1 150 0
 857 006e 104B     		ldr	r3, .L56+44
 858 0070 0193     		str	r3, [sp, #4]
 859 0072 0094     		str	r4, [sp]
 860 0074 0023     		movs	r3, #0
 861 0076 C822     		movs	r2, #200
 862 0078 0E49     		ldr	r1, .L56+48
 863 007a 0F48     		ldr	r0, .L56+52
 864 007c FFF7FEFF 		bl	xTaskCreate
 865              	.LVL79:
 152:Src/SensorDataHandler.c **** 
 866              		.loc 1 152 0
 867 0080 03B0     		add	sp, sp, #12
 868              	.LCFI7:
 869              		.cfi_def_cfa_offset 12
 870              		@ sp needed
 871 0082 30BD     		pop	{r4, r5, pc}
 872              	.L57:
 873              		.align	2
 874              	.L56:
 875 0084 00000000 		.word	sentMessage
 876 0088 00000000 		.word	right_sensor
 877 008c 00080048 		.word	1207961600
 878 0090 00000000 		.word	back_sensor
 879 0094 000C0048 		.word	1207962624
 880 0098 00000000 		.word	left_sensor
 881 009c 00000000 		.word	front_sensor
 882 00a0 00100048 		.word	1207963648
 883 00a4 00000000 		.word	.LANCHOR6
 884 00a8 00000000 		.word	.LC0
 885 00ac 00000000 		.word	vReceiver
 886 00b0 00000000 		.word	.LANCHOR3
 887 00b4 14000000 		.word	.LC1
 888 00b8 00000000 		.word	vSender
 889              		.cfi_endproc
 890              	.LFE130:
 892              		.global	flag_counter
 893              		.comm	sentMessage,19,4
 894              		.global	units_time
 895              		.global	delay_command
 896              		.global	sample_time
 897              		.comm	front_sensor,12,4
 898              		.comm	left_sensor,12,4
 899              		.comm	back_sensor,12,4
 900              		.comm	right_sensor,12,4
 901              		.global	current_mode
 902              		.comm	CM_Handler_Queue,4,4
 903              		.comm	magn,12,4
 904              		.comm	accel,12,4
ARM GAS  /tmp/ccQ0b1hk.s 			page 23


 905              		.comm	gyro,12,4
 906              		.section	.bss.transmitter_handler,"aw",%nobits
 907              		.align	2
 908              		.set	.LANCHOR3,. + 0
 911              	transmitter_handler:
 912 0000 00000000 		.space	4
 913              		.section	.bss.current_mode,"aw",%nobits
 914              		.align	2
 915              		.set	.LANCHOR2,. + 0
 918              	current_mode:
 919 0000 00000000 		.space	4
 920              		.section	.bss.units_time,"aw",%nobits
 921              		.align	2
 922              		.set	.LANCHOR4,. + 0
 925              	units_time:
 926 0000 00000000 		.space	4
 927              		.section	.data.delay_command,"aw",%progbits
 928              		.align	2
 929              		.set	.LANCHOR0,. + 0
 932              	delay_command:
 933 0000 32000000 		.word	50
 934              		.section	.data.sample_time,"aw",%progbits
 935              		.align	2
 936              		.set	.LANCHOR5,. + 0
 939              	sample_time:
 940 0000 32000000 		.word	50
 941              		.section	.bss.receiver_handler,"aw",%nobits
 942              		.align	2
 943              		.set	.LANCHOR6,. + 0
 946              	receiver_handler:
 947 0000 00000000 		.space	4
 948              		.section	.bss.flag_counter,"aw",%nobits
 949              		.align	2
 950              		.set	.LANCHOR1,. + 0
 953              	flag_counter:
 954 0000 00000000 		.space	4
 955              		.section	.rodata.str1.4,"aMS",%progbits,1
 956              		.align	2
 957              	.LC0:
 958 0000 52656365 		.ascii	"Reception Handler\000"
 958      7074696F 
 958      6E204861 
 958      6E646C65 
 958      7200
 959 0012 0000     		.space	2
 960              	.LC1:
 961 0014 5472616E 		.ascii	"Transimtter Handler\000"
 961      73696D74 
 961      74657220 
 961      48616E64 
 961      6C657200 
 962              		.text
 963              	.Letext0:
 964              		.file 2 "/opt/gcc-arm-none-eabi-5_4-2016q3/arm-none-eabi/include/machine/_default_types.h"
 965              		.file 3 "/opt/gcc-arm-none-eabi-5_4-2016q3/arm-none-eabi/include/sys/_stdint.h"
 966              		.file 4 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h"
 967              		.file 5 "Middlewares/Third_Party/FreeRTOS/Source/include/task.h"
ARM GAS  /tmp/ccQ0b1hk.s 			page 24


 968              		.file 6 "Middlewares/Third_Party/FreeRTOS/Source/include/queue.h"
 969              		.file 7 "Drivers/CMSIS/Device/ST/STM32F3xx/Include/stm32f303xc.h"
 970              		.file 8 "Inc/ultrasonic.h"
 971              		.file 9 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_def.h"
 972              		.file 10 "Inc/ControllerAreaNetwork.h"
 973              		.file 11 "Inc/SensorDataHandler.h"
 974              		.file 12 "Drivers/CMSIS/Include/core_cm4.h"
 975              		.file 13 "Inc/internal_sensors.h"
ARM GAS  /tmp/ccQ0b1hk.s 			page 25


DEFINED SYMBOLS
                            *ABS*:00000000 SensorDataHandler.c
     /tmp/ccQ0b1hk.s:22     .text.floatToCAN:00000000 $t
     /tmp/ccQ0b1hk.s:26     .text.floatToCAN:00000000 floatToCAN
     /tmp/ccQ0b1hk.s:50     .text.componentStatus:00000000 $t
     /tmp/ccQ0b1hk.s:54     .text.componentStatus:00000000 componentStatus
     /tmp/ccQ0b1hk.s:102    .text.componentStatus:0000002c $d
     /tmp/ccQ0b1hk.s:108    .text.vSender:00000000 $t
     /tmp/ccQ0b1hk.s:112    .text.vSender:00000000 vSender
     /tmp/ccQ0b1hk.s:469    .text.vSender:00000228 $d
                            *COM*:0000000c gyro
                            *COM*:00000013 sentMessage
                            *COM*:0000000c accel
                            *COM*:0000000c magn
                            *COM*:0000000c right_sensor
                            *COM*:0000000c back_sensor
                            *COM*:0000000c left_sensor
                            *COM*:0000000c front_sensor
     /tmp/ccQ0b1hk.s:484    .text.setMode:00000000 $t
     /tmp/ccQ0b1hk.s:488    .text.setMode:00000000 setMode
     /tmp/ccQ0b1hk.s:533    .text.setMode:0000002e $d
     /tmp/ccQ0b1hk.s:537    .text.setMode:00000032 $t
     /tmp/ccQ0b1hk.s:613    .text.setMode:00000098 $d
     /tmp/ccQ0b1hk.s:623    .text.vReceiver:00000000 $t
     /tmp/ccQ0b1hk.s:627    .text.vReceiver:00000000 vReceiver
     /tmp/ccQ0b1hk.s:755    .text.vReceiver:000000a8 $d
     /tmp/ccQ0b1hk.s:763    .text.initHardware:00000000 $t
     /tmp/ccQ0b1hk.s:768    .text.initHardware:00000000 initHardware
     /tmp/ccQ0b1hk.s:875    .text.initHardware:00000084 $d
     /tmp/ccQ0b1hk.s:953    .bss.flag_counter:00000000 flag_counter
     /tmp/ccQ0b1hk.s:925    .bss.units_time:00000000 units_time
     /tmp/ccQ0b1hk.s:932    .data.delay_command:00000000 delay_command
     /tmp/ccQ0b1hk.s:939    .data.sample_time:00000000 sample_time
     /tmp/ccQ0b1hk.s:918    .bss.current_mode:00000000 current_mode
                            *COM*:00000004 CM_Handler_Queue
     /tmp/ccQ0b1hk.s:907    .bss.transmitter_handler:00000000 $d
     /tmp/ccQ0b1hk.s:911    .bss.transmitter_handler:00000000 transmitter_handler
     /tmp/ccQ0b1hk.s:914    .bss.current_mode:00000000 $d
     /tmp/ccQ0b1hk.s:921    .bss.units_time:00000000 $d
     /tmp/ccQ0b1hk.s:928    .data.delay_command:00000000 $d
     /tmp/ccQ0b1hk.s:935    .data.sample_time:00000000 $d
     /tmp/ccQ0b1hk.s:942    .bss.receiver_handler:00000000 $d
     /tmp/ccQ0b1hk.s:946    .bss.receiver_handler:00000000 receiver_handler
     /tmp/ccQ0b1hk.s:949    .bss.flag_counter:00000000 $d
     /tmp/ccQ0b1hk.s:956    .rodata.str1.4:00000000 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
can_transmit_data_frame_pd
errrx
errtx
readGyroscope
readAccelerometer
readMagnetometer
readUltrasonic
vTaskDelay
receivedMessage
ARM GAS  /tmp/ccQ0b1hk.s 			page 26


vTaskSuspend
vTaskResume
can_receive_data_frame_pd
initGyroscope
initAccelerometer
initMagnetometer
xTaskCreate
