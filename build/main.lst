ARM GAS  /tmp/ccMyeQ73.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 1
   4              		.eabi_attribute 28, 1
   5              		.fpu fpv4-sp-d16
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 1
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.thumb
  16              		.syntax unified
  17              		.file	"main.c"
  18              		.text
  19              	.Ltext0:
  20              		.cfi_sections	.debug_frame
  21              		.section	.text.mainTask,"ax",%progbits
  22              		.align	2
  23              		.thumb
  24              		.thumb_func
  26              	mainTask:
  27              	.LFB133:
  28              		.file 1 "Src/main.c"
   1:Src/main.c    **** /**
   2:Src/main.c    ****   ******************************************************************************
   3:Src/main.c    ****   * File Name          : main.c
   4:Src/main.c    ****   * Description        : Main program body
   5:Src/main.c    ****   ******************************************************************************
   6:Src/main.c    ****   * This notice applies to any and all portions of this file
   7:Src/main.c    ****   * that are not between comment pairs USER CODE BEGIN and
   8:Src/main.c    ****   * USER CODE END. Other portions of this file, whether 
   9:Src/main.c    ****   * inserted by the user or by software development tools
  10:Src/main.c    ****   * are owned by their respective copyright owners.
  11:Src/main.c    ****   *
  12:Src/main.c    ****   * Copyright (c) 2017 STMicroelectronics International N.V. 
  13:Src/main.c    ****   * All rights reserved.
  14:Src/main.c    ****   *
  15:Src/main.c    ****   * Redistribution and use in source and binary forms, with or without 
  16:Src/main.c    ****   * modification, are permitted, provided that the following conditions are met:
  17:Src/main.c    ****   *
  18:Src/main.c    ****   * 1. Redistribution of source code must retain the above copyright notice, 
  19:Src/main.c    ****   *    this list of conditions and the following disclaimer.
  20:Src/main.c    ****   * 2. Redistributions in binary form must reproduce the above copyright notice,
  21:Src/main.c    ****   *    this list of conditions and the following disclaimer in the documentation
  22:Src/main.c    ****   *    and/or other materials provided with the distribution.
  23:Src/main.c    ****   * 3. Neither the name of STMicroelectronics nor the names of other 
  24:Src/main.c    ****   *    contributors to this software may be used to endorse or promote products 
  25:Src/main.c    ****   *    derived from this software without specific written permission.
  26:Src/main.c    ****   * 4. This software, including modifications and/or derivative works of this 
  27:Src/main.c    ****   *    software, must execute solely and exclusively on microcontroller or
  28:Src/main.c    ****   *    microprocessor devices manufactured by or for STMicroelectronics.
  29:Src/main.c    ****   * 5. Redistribution and use of this software other than as permitted under 
  30:Src/main.c    ****   *    this license is void and will automatically terminate your rights under 
ARM GAS  /tmp/ccMyeQ73.s 			page 2


  31:Src/main.c    ****   *    this license. 
  32:Src/main.c    ****   *
  33:Src/main.c    ****   * THIS SOFTWARE IS PROVIDED BY STMICROELECTRONICS AND CONTRIBUTORS "AS IS" 
  34:Src/main.c    ****   * AND ANY EXPRESS, IMPLIED OR STATUTORY WARRANTIES, INCLUDING, BUT NOT 
  35:Src/main.c    ****   * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A 
  36:Src/main.c    ****   * PARTICULAR PURPOSE AND NON-INFRINGEMENT OF THIRD PARTY INTELLECTUAL PROPERTY
  37:Src/main.c    ****   * RIGHTS ARE DISCLAIMED TO THE FULLEST EXTENT PERMITTED BY LAW. IN NO EVENT 
  38:Src/main.c    ****   * SHALL STMICROELECTRONICS OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
  39:Src/main.c    ****   * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
  40:Src/main.c    ****   * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
  41:Src/main.c    ****   * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF 
  42:Src/main.c    ****   * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING 
  43:Src/main.c    ****   * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
  44:Src/main.c    ****   * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  45:Src/main.c    ****   *
  46:Src/main.c    ****   ******************************************************************************
  47:Src/main.c    ****   */
  48:Src/main.c    **** /* Includes ------------------------------------------------------------------*/
  49:Src/main.c    **** #include <stdint.h>
  50:Src/main.c    **** #include "main.h"
  51:Src/main.c    **** #include "stm32f3xx_hal.h"
  52:Src/main.c    **** #include "cmsis_os.h"
  53:Src/main.c    **** //#include "ultrasonic.h"
  54:Src/main.c    **** #include "usart.h"
  55:Src/main.c    **** #include "gpio.h"
  56:Src/main.c    **** //#include "internal_sensors.h"
  57:Src/main.c    **** //#include "can_stm.h"
  58:Src/main.c    **** #include "pdal.h"
  59:Src/main.c    **** #include "periphAL.h"
  60:Src/main.c    **** //#include "ControllerAreaNetwork.h"
  61:Src/main.c    **** #include "SensorDataHandler.h"
  62:Src/main.c    **** 
  63:Src/main.c    **** //From group E:
  64:Src/main.c    **** //GPIO_PIN_9	//LED3_RED		NORTH
  65:Src/main.c    **** //GPIO_PIN_8	//LED4_BLUE
  66:Src/main.c    **** //GPIO_PIN_10	//LED5_ORANGE
  67:Src/main.c    **** //GPIO_PIN_15	//LED6_GREEN	WEST
  68:Src/main.c    **** //GPIO_PIN_11	//LED7_GREEN	EAST
  69:Src/main.c    **** //GPIO_PIN_14	//LED8_ORANGE
  70:Src/main.c    **** //GPIO_PIN_12	//LED9_BLUE
  71:Src/main.c    **** //GPIO_PIN_13	//LED10_RED		SOUTH
  72:Src/main.c    **** 
  73:Src/main.c    **** 
  74:Src/main.c    **** //sensorPin right_sensor;
  75:Src/main.c    **** //sensorPin back_sensor;
  76:Src/main.c    **** //sensorPin left_sensor;
  77:Src/main.c    **** //sensorPin front_sensor;
  78:Src/main.c    **** 
  79:Src/main.c    **** //CanRxMsgTypeDef RxMessage;
  80:Src/main.c    **** //CanTxMsgTypeDef TxMessage;
  81:Src/main.c    **** 
  82:Src/main.c    **** ADC_HandleTypeDef hadc1;
  83:Src/main.c    **** 
  84:Src/main.c    **** //CAN_HandleTypeDef hcan;
  85:Src/main.c    **** 
  86:Src/main.c    **** //I2C_HandleTypeDef hi2c1;
  87:Src/main.c    **** I2C_HandleTypeDef hi2c2;
ARM GAS  /tmp/ccMyeQ73.s 			page 3


  88:Src/main.c    **** 
  89:Src/main.c    **** //SPI_HandleTypeDef hspi1;
  90:Src/main.c    **** SPI_HandleTypeDef hspi2;
  91:Src/main.c    **** 
  92:Src/main.c    **** //UART_HandleTypeDef huart4;
  93:Src/main.c    **** //UART_HandleTypeDef huart5;
  94:Src/main.c    **** //UART_HandleTypeDef huart2;
  95:Src/main.c    **** //UART_HandleTypeDef huart3;
  96:Src/main.c    **** 
  97:Src/main.c    **** DMA_HandleTypeDef hdma_usart2_rx;
  98:Src/main.c    **** DMA_HandleTypeDef hdma_usart2_tx;
  99:Src/main.c    **** 
 100:Src/main.c    **** PCD_HandleTypeDef hpcd_USB_FS;
 101:Src/main.c    **** 
 102:Src/main.c    **** osThreadId defaultTaskHandle;
 103:Src/main.c    **** 
 104:Src/main.c    **** //static void floatToCAN(float data, can_frame_types_t *can_frame_types);
 105:Src/main.c    **** void SystemClock_Config(void);
 106:Src/main.c    **** static void MX_ADC1_Init(void);
 107:Src/main.c    **** //static void MX_CAN_Init(void);
 108:Src/main.c    **** static void MX_I2C2_Init(void);
 109:Src/main.c    **** static void MX_SPI2_Init(void);
 110:Src/main.c    **** static void MX_USB_PCD_Init(void);
 111:Src/main.c    **** void StartDefaultTask(void const * argument);
 112:Src/main.c    **** void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
 113:Src/main.c    **** 
 114:Src/main.c    **** //static void canrx(void *pvParameters);
 115:Src/main.c    **** //static void cantx(void *pvParameters);
 116:Src/main.c    **** //static void gamTask(void *pvParameters);
 117:Src/main.c    **** //static void usb_test(void *pvParameters);
 118:Src/main.c    **** //static void ultrasonicTask(void *pvParameters);
 119:Src/main.c    **** static void mainTask(void *pvParameters);
 120:Src/main.c    **** 
 121:Src/main.c    **** //static void canSend(float data);
 122:Src/main.c    **** //static void canReceive(void);
 123:Src/main.c    **** 
 124:Src/main.c    **** int main(void)
 125:Src/main.c    **** {
 126:Src/main.c    **** 
 127:Src/main.c    ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 128:Src/main.c    ****   HAL_Init();
 129:Src/main.c    **** 
 130:Src/main.c    ****   /* Configure the system clock */
 131:Src/main.c    ****   SystemClock_Config();
 132:Src/main.c    **** 
 133:Src/main.c    ****   /* USER CODE BEGIN SysInit */
 134:Src/main.c    **** 
 135:Src/main.c    ****   /* USER CODE END SysInit */
 136:Src/main.c    **** 
 137:Src/main.c    ****   /* Initialize all configured peripherals */
 138:Src/main.c    ****   MX_GPIO_Init();
 139:Src/main.c    ****   MX_DMA_Init();
 140:Src/main.c    **** 
 141:Src/main.c    **** 
 142:Src/main.c    ****   //in it commented, in msp commented, in usart, dma init commented.
 143:Src/main.c    **** 
 144:Src/main.c    ****   MX_ADC1_Init();
ARM GAS  /tmp/ccMyeQ73.s 			page 4


 145:Src/main.c    ****   MX_CAN_Init();		//can
 146:Src/main.c    ****   MX_I2C1_Init();		//accelerometer & magnetometer
 147:Src/main.c    ****   MX_I2C2_Init();
 148:Src/main.c    ****   MX_SPI1_Init();		//gyroscope
 149:Src/main.c    ****   MX_SPI2_Init();
 150:Src/main.c    ****   MX_TIM1_Init();
 151:Src/main.c    ****   MX_TIM2_Init();
 152:Src/main.c    ****   MX_TIM3_Init();
 153:Src/main.c    ****   MX_TIM4_Init();
 154:Src/main.c    ****   MX_TIM8_Init();
 155:Src/main.c    ****   MX_TIM15_Init();
 156:Src/main.c    ****   MX_TIM16_Init();
 157:Src/main.c    ****   MX_TIM17_Init();
 158:Src/main.c    ****   MX_UART4_Init();
 159:Src/main.c    ****   MX_UART5_Init();
 160:Src/main.c    ****   MX_USART2_UART_Init();	//ultrasonic
 161:Src/main.c    ****   MX_USART3_UART_Init();
 162:Src/main.c    ****   MX_USB_PCD_Init();
 163:Src/main.c    **** 
 164:Src/main.c    **** 
 165:Src/main.c    ****   initHardware();
 166:Src/main.c    ****   //ultrasonic_Init();
 167:Src/main.c    **** 
 168:Src/main.c    ****   /* USER CODE BEGIN 2 */
 169:Src/main.c    **** 
 170:Src/main.c    **** 
 171:Src/main.c    ****   /* USER CODE END 2 */
 172:Src/main.c    **** 
 173:Src/main.c    ****   /* USER CODE BEGIN RTOS_MUTEX */
 174:Src/main.c    ****   /* add mutexes, ... */
 175:Src/main.c    ****   /* USER CODE END RTOS_MUTEX */
 176:Src/main.c    **** 
 177:Src/main.c    ****   /* USER CODE BEGIN RTOS_SEMAPHORES */
 178:Src/main.c    ****   /* add semaphores, ... */
 179:Src/main.c    ****   /* USER CODE END RTOS_SEMAPHORES */
 180:Src/main.c    **** 
 181:Src/main.c    ****   /* USER CODE BEGIN RTOS_TIMERS */
 182:Src/main.c    ****   /* start timers, add new ones, ... */
 183:Src/main.c    ****   /* USER CODE END RTOS_TIMERS */
 184:Src/main.c    **** 
 185:Src/main.c    ****   /* Create the thread(s) */
 186:Src/main.c    ****   /* definition and creation of defaultTask */
 187:Src/main.c    **** 
 188:Src/main.c    ****   //xTaskCreate(canrx, "rxTask", 100, NULL, 2, NULL);
 189:Src/main.c    ****   //xTaskCreate(cantx, "txTask", 100, NULL, 2, NULL);
 190:Src/main.c    ****   xTaskCreate(mainTask, "mainTask", 100, NULL, 2, NULL);
 191:Src/main.c    ****   //xTaskCreate(gamTask, "Gyroscope, Accelerometer, and Magnetometer Task", 100, NULL, 3, NULL);
 192:Src/main.c    ****   //xTaskCreate(ultrasonicTask, "Ultrasonic Task", 100, NULL, 3, NULL);
 193:Src/main.c    ****   //xTaskCreate(usb_test, "usbTask", 100, NULL, 3, NULL);
 194:Src/main.c    **** 
 195:Src/main.c    ****   //osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 196:Src/main.c    ****   //defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 197:Src/main.c    **** 
 198:Src/main.c    ****   /* Start scheduler */
 199:Src/main.c    ****   osKernelStart();
 200:Src/main.c    ****   
 201:Src/main.c    ****   /* We should never get here as control is now taken by the scheduler */
ARM GAS  /tmp/ccMyeQ73.s 			page 5


 202:Src/main.c    **** 
 203:Src/main.c    ****   /* Infinite loop */
 204:Src/main.c    ****   /* USER CODE BEGIN WHILE */
 205:Src/main.c    ****   return 0;
 206:Src/main.c    ****   //while (1){}
 207:Src/main.c    ****   /* USER CODE END 3 */
 208:Src/main.c    **** 
 209:Src/main.c    **** }
 210:Src/main.c    **** 
 211:Src/main.c    **** //From group E:
 212:Src/main.c    **** //GPIO_PIN_9	//LED3_RED		NORTH
 213:Src/main.c    **** //GPIO_PIN_8	//LED4_BLUE
 214:Src/main.c    **** //GPIO_PIN_10	//LED5_ORANGE
 215:Src/main.c    **** //GPIO_PIN_15	//LED6_GREEN	WEST
 216:Src/main.c    **** //GPIO_PIN_11	//LED7_GREEN	EAST
 217:Src/main.c    **** //GPIO_PIN_14	//LED8_ORANGE
 218:Src/main.c    **** //GPIO_PIN_12	//LED9_BLUE
 219:Src/main.c    **** //GPIO_PIN_13	//LED10_RED		SOUTH
 220:Src/main.c    **** //static void floatToCAN(float data, can_frame_types_t *can_frame_types){
 221:Src/main.c    **** //		uint32_t aux = (uint32_t)(*(uint32_t*)&data);
 222:Src/main.c    **** //		uint8_t datal = (uint8_t)(aux &  0x000000FF);
 223:Src/main.c    **** //		uint8_t datah = (uint8_t)((aux & 0x0000FF00) >> 8);
 224:Src/main.c    **** //		can_frame_types->data[0] = datah;
 225:Src/main.c    **** //		can_frame_types->data[1] = datal;
 226:Src/main.c    **** //}
 227:Src/main.c    **** static void mainTask(void *pvParameters){
  29              		.loc 1 227 0
  30              		.cfi_startproc
  31              		@ Volatile: function does not return.
  32              		@ args = 0, pretend = 0, frame = 0
  33              		@ frame_needed = 0, uses_anonymous_args = 0
  34              	.LVL0:
  35 0000 08B5     		push	{r3, lr}
  36              	.LCFI0:
  37              		.cfi_def_cfa_offset 8
  38              		.cfi_offset 3, -8
  39              		.cfi_offset 14, -4
  40              	.LVL1:
  41              	.L2:
 228:Src/main.c    **** 
 229:Src/main.c    **** //	initGyroscope();
 230:Src/main.c    **** //	initAccelerometer();
 231:Src/main.c    **** //	initMagnetometer();
 232:Src/main.c    **** //
 233:Src/main.c    **** //	float gyro[3];
 234:Src/main.c    **** //	float accel[3];
 235:Src/main.c    **** //	float magn[3];
 236:Src/main.c    **** 
 237:Src/main.c    **** //	can_frame_types_t	sentMessage;
 238:Src/main.c    **** //	sentMessage.c_s_bit_id = SENSOR_DATA_BIT;
 239:Src/main.c    **** //	sentMessage.dlc = 1;
 240:Src/main.c    **** //	sentMessage.priority_id = PRIORITY_MEDIUM;
 241:Src/main.c    **** //
 242:Src/main.c    **** //	right_sensor.num_trig = GPIO_PIN_2;
 243:Src/main.c    **** //	right_sensor.grp_trig = (uint32_t) GPIOC;
 244:Src/main.c    **** //	right_sensor.num_echo = GPIO_PIN_3;
 245:Src/main.c    **** //	right_sensor.grp_echo = (uint32_t) GPIOC;
ARM GAS  /tmp/ccMyeQ73.s 			page 6


 246:Src/main.c    **** //
 247:Src/main.c    **** //	back_sensor.num_trig = GPIO_PIN_10;
 248:Src/main.c    **** //	back_sensor.grp_trig = (uint32_t) GPIOD;
 249:Src/main.c    **** //	back_sensor.num_echo = GPIO_PIN_11;
 250:Src/main.c    **** //	back_sensor.grp_echo = (uint32_t) GPIOD;
 251:Src/main.c    **** //
 252:Src/main.c    **** //	left_sensor.num_trig = GPIO_PIN_10;
 253:Src/main.c    **** //	left_sensor.grp_trig = (uint32_t) GPIOB;
 254:Src/main.c    **** //	left_sensor.num_echo = GPIO_PIN_11;
 255:Src/main.c    **** //	left_sensor.grp_echo = (uint32_t) GPIOB;
 256:Src/main.c    **** //
 257:Src/main.c    **** //	front_sensor.num_trig = GPIO_PIN_2;
 258:Src/main.c    **** //	front_sensor.grp_trig = (uint32_t) GPIOB;
 259:Src/main.c    **** //	front_sensor.num_echo = GPIO_PIN_7;
 260:Src/main.c    **** //	front_sensor.grp_echo = (uint32_t) GPIOE;
 261:Src/main.c    **** 
 262:Src/main.c    **** 	while(1){
 263:Src/main.c    **** 		//setMode(ONE_TIME_TRANSMISSION);
 264:Src/main.c    **** 		//handleACommand();
 265:Src/main.c    **** //		//canReceive();
 266:Src/main.c    **** //		receivedMessage = can_receive_data_frame_pd();
 267:Src/main.c    **** //		//if(receive.ok == 1){
 268:Src/main.c    **** //			if(receivedMessage.c_s_bit_id ==SENSOR_DATA_BIT){	//receive.cs==1){	//sensor
 269:Src/main.c    **** //				//priority according to queues.
 270:Src/main.c    **** //
 271:Src/main.c    **** //				//if(receive.identity==0x1E || receive.identity==0x1F || receive.identity==0x20){	//gyroscope
 272:Src/main.c    **** //				if (receivedMessage.topic_id == INTERNAL_ROBOT_CTRL_ID_GYROSCOPE_X ||
 273:Src/main.c    **** //						receivedMessage.topic_id == INTERNAL_ROBOT_CTRL_ID_GYROSCOPE_Y ||
 274:Src/main.c    **** //						receivedMessage.topic_id == INTERNAL_ROBOT_CTRL_ID_GYROSCOPE_Z){
 275:Src/main.c    **** //					readGyroscope(gyro);
 276:Src/main.c    **** //					if(receivedMessage.topic_id == INTERNAL_ROBOT_CTRL_ID_GYROSCOPE_X){
 277:Src/main.c    **** //						//sentMessage.data[0] = gyro[0];
 278:Src/main.c    **** //						floatToCAN(gyro[0], &sentMessage);
 279:Src/main.c    **** //						can_transmit_data_frame_pd(&sentMessage);
 280:Src/main.c    **** //					}
 281:Src/main.c    **** //					else if(receivedMessage.topic_id == INTERNAL_ROBOT_CTRL_ID_GYROSCOPE_Y){
 282:Src/main.c    **** //						//sentMessage.data[0] = gyro[1];
 283:Src/main.c    **** //						floatToCAN(gyro[1], &sentMessage);
 284:Src/main.c    **** //						can_transmit_data_frame_pd(&sentMessage);
 285:Src/main.c    **** //					}
 286:Src/main.c    **** //					else if(receivedMessage.topic_id == INTERNAL_ROBOT_CTRL_ID_GYROSCOPE_Z){
 287:Src/main.c    **** //						//sentMessage.data[0] = gyro[2];
 288:Src/main.c    **** //						floatToCAN(gyro[2], &sentMessage);
 289:Src/main.c    **** //						can_transmit_data_frame_pd(&sentMessage);
 290:Src/main.c    **** //					}
 291:Src/main.c    **** //					/*switch(receivedMessage.topic_id){	//receive.identity){
 292:Src/main.c    **** //						case INTERNAL_ROBOT_CTRL_ID_GYROSCOPE_X:
 293:Src/main.c    **** //							HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_8);		//BLUE
 294:Src/main.c    **** //							//canSend(gyro[0]);
 295:Src/main.c    **** //							sentMessage.data[0] = gyro[0];
 296:Src/main.c    **** //							can_transmit_data_frame_pd(&sentMessage);
 297:Src/main.c    **** //							//send.identity = gyro[0];
 298:Src/main.c    **** //						break;
 299:Src/main.c    **** //						case INTERNAL_ROBOT_CTRL_ID_GYROSCOPE_Y:
 300:Src/main.c    **** //							canSend(gyro[1]);
 301:Src/main.c    **** //							//send.identity = gyro[1];
 302:Src/main.c    **** //						break;
ARM GAS  /tmp/ccMyeQ73.s 			page 7


 303:Src/main.c    **** //						case INTERNAL_ROBOT_CTRL_ID_GYROSCOPE_Z:
 304:Src/main.c    **** //							canSend(gyro[2]);
 305:Src/main.c    **** //							//send.identity = gyro[2];
 306:Src/main.c    **** //						break;
 307:Src/main.c    **** //					}*/
 308:Src/main.c    **** //				}
 309:Src/main.c    **** //				else if (receivedMessage.topic_id == INTERNAL_ROBOT_CTRL_ID_ACCELEROMETER_X ||
 310:Src/main.c    **** //						receivedMessage.topic_id == INTERNAL_ROBOT_CTRL_ID_ACCELEROMETER_Y ||
 311:Src/main.c    **** //						receivedMessage.topic_id == INTERNAL_ROBOT_CTRL_ID_ACCELEROMETER_Z){
 312:Src/main.c    **** //					readAccelerometer(accel);
 313:Src/main.c    **** //					if(receivedMessage.topic_id == INTERNAL_ROBOT_CTRL_ID_ACCELEROMETER_X){
 314:Src/main.c    **** //						//sentMessage.data[0] = accel[0];
 315:Src/main.c    **** //						floatToCAN(accel[0], &sentMessage);
 316:Src/main.c    **** //						can_transmit_data_frame_pd(&sentMessage);
 317:Src/main.c    **** //					}
 318:Src/main.c    **** //					else if(receivedMessage.topic_id == INTERNAL_ROBOT_CTRL_ID_ACCELEROMETER_Y){
 319:Src/main.c    **** //						//sentMessage.data[0] = accel[1];
 320:Src/main.c    **** //						floatToCAN(accel[1], &sentMessage);
 321:Src/main.c    **** //						can_transmit_data_frame_pd(&sentMessage);
 322:Src/main.c    **** //					}
 323:Src/main.c    **** //					else if(receivedMessage.topic_id == INTERNAL_ROBOT_CTRL_ID_ACCELEROMETER_Z){
 324:Src/main.c    **** //						//sentMessage.data[0] = accel[2];
 325:Src/main.c    **** //						floatToCAN(accel[2], &sentMessage);
 326:Src/main.c    **** //						can_transmit_data_frame_pd(&sentMessage);
 327:Src/main.c    **** //					}
 328:Src/main.c    **** //				}
 329:Src/main.c    **** //				/*
 330:Src/main.c    **** //				else if(receive.identity==0x21 || receive.identity==0x22 || receive.identity==0x23){	//accele
 331:Src/main.c    **** //					readAccelerometer(accel);
 332:Src/main.c    **** //					switch(receive.identity){
 333:Src/main.c    **** //						case 0x21:
 334:Src/main.c    **** //							canSend(accel[0]);
 335:Src/main.c    **** //							//send.identity = accel[0];
 336:Src/main.c    **** //						break;
 337:Src/main.c    **** //						case 0x22:
 338:Src/main.c    **** //							canSend(accel[1]);
 339:Src/main.c    **** //							//send.identity = accel[1];
 340:Src/main.c    **** //						break;
 341:Src/main.c    **** //						case 0x23:
 342:Src/main.c    **** //							canSend(accel[2]);
 343:Src/main.c    **** //							//send.identity = accel[2];
 344:Src/main.c    **** //						break;
 345:Src/main.c    **** //					}
 346:Src/main.c    **** //				}*/
 347:Src/main.c    **** //				else if (receivedMessage.topic_id == INTERNAL_ROBOT_CTRL_ID_MAGNETOMETER_X ||
 348:Src/main.c    **** //						receivedMessage.topic_id == INTERNAL_ROBOT_CTRL_ID_MAGNETOMETER_Y ||
 349:Src/main.c    **** //						receivedMessage.topic_id == INTERNAL_ROBOT_CTRL_ID_MAGNETOMETER_Z){
 350:Src/main.c    **** //					readMagnetometer(magn);
 351:Src/main.c    **** //					if(receivedMessage.topic_id == INTERNAL_ROBOT_CTRL_ID_MAGNETOMETER_X){
 352:Src/main.c    **** //						//sentMessage.data[0] = magn[0];
 353:Src/main.c    **** //						floatToCAN(magn[0], &sentMessage);
 354:Src/main.c    **** //						can_transmit_data_frame_pd(&sentMessage);
 355:Src/main.c    **** //					}
 356:Src/main.c    **** //					else if(receivedMessage.topic_id == INTERNAL_ROBOT_CTRL_ID_MAGNETOMETER_Y){
 357:Src/main.c    **** //						//sentMessage.data[0] = magn[1];
 358:Src/main.c    **** //						floatToCAN(magn[1], &sentMessage);
 359:Src/main.c    **** //						can_transmit_data_frame_pd(&sentMessage);
ARM GAS  /tmp/ccMyeQ73.s 			page 8


 360:Src/main.c    **** //					}
 361:Src/main.c    **** //					else if(receivedMessage.topic_id == INTERNAL_ROBOT_CTRL_ID_MAGNETOMETER_Z){
 362:Src/main.c    **** //						//sentMessage.data[0] = magn[2];
 363:Src/main.c    **** //						floatToCAN(magn[2], &sentMessage);
 364:Src/main.c    **** //						can_transmit_data_frame_pd(&sentMessage);
 365:Src/main.c    **** //					}
 366:Src/main.c    **** //				}
 367:Src/main.c    **** //				/*
 368:Src/main.c    **** //				else if(receive.identity==0x24 || receive.identity==0x25 || receive.identity==0x26){	//magnet
 369:Src/main.c    **** //					readMagnetometer(magn);
 370:Src/main.c    **** //					switch(receive.identity){
 371:Src/main.c    **** //						case 0x24:
 372:Src/main.c    **** //							canSend(magn[0]);
 373:Src/main.c    **** //							//send.identity = magn[0];
 374:Src/main.c    **** //						break;
 375:Src/main.c    **** //						case 0x25:
 376:Src/main.c    **** //							canSend(magn[1]);
 377:Src/main.c    **** //							//send.identity = magn[1];
 378:Src/main.c    **** //						break;
 379:Src/main.c    **** //						case 0x26:
 380:Src/main.c    **** //							canSend(magn[2]);
 381:Src/main.c    **** //							//send.identity = magn[2];
 382:Src/main.c    **** //						break;
 383:Src/main.c    **** //					}
 384:Src/main.c    **** //				}*/
 385:Src/main.c    **** //
 386:Src/main.c    **** //				else if (receivedMessage.topic_id == INTERNAL_ROBOT_CTRL_ID_ULTRASONIC_SENSOR_1 ||
 387:Src/main.c    **** //						receivedMessage.topic_id == INTERNAL_ROBOT_CTRL_ID_ULTRASONIC_SENSOR_2 ||
 388:Src/main.c    **** //						receivedMessage.topic_id == INTERNAL_ROBOT_CTRL_ID_ULTRASONIC_SENSOR_3 ||
 389:Src/main.c    **** //						receivedMessage.topic_id == INTERNAL_ROBOT_CTRL_ID_ULTRASONIC_SENSOR_4){
 390:Src/main.c    **** //
 391:Src/main.c    **** //					if(receivedMessage.topic_id == INTERNAL_ROBOT_CTRL_ID_ULTRASONIC_SENSOR_1){
 392:Src/main.c    **** //						//sentMessage.data[0] = readUltrasonic(&right_sensor);
 393:Src/main.c    **** //						floatToCAN(readUltrasonic(&right_sensor), &sentMessage);
 394:Src/main.c    **** //						can_transmit_data_frame_pd(&sentMessage);
 395:Src/main.c    **** //					}
 396:Src/main.c    **** //					else if(receivedMessage.topic_id == INTERNAL_ROBOT_CTRL_ID_ULTRASONIC_SENSOR_2){
 397:Src/main.c    **** //						//sentMessage.data[0] = readUltrasonic(&back_sensor);
 398:Src/main.c    **** //						floatToCAN(readUltrasonic(&back_sensor), &sentMessage);
 399:Src/main.c    **** //						can_transmit_data_frame_pd(&sentMessage);
 400:Src/main.c    **** //					}
 401:Src/main.c    **** //					else if(receivedMessage.topic_id == INTERNAL_ROBOT_CTRL_ID_ULTRASONIC_SENSOR_3){
 402:Src/main.c    **** //						//sentMessage.data[0] = readUltrasonic(&left_sensor);
 403:Src/main.c    **** //						floatToCAN(readUltrasonic(&left_sensor), &sentMessage);
 404:Src/main.c    **** //						can_transmit_data_frame_pd(&sentMessage);
 405:Src/main.c    **** //					}
 406:Src/main.c    **** //					else if(receivedMessage.topic_id == INTERNAL_ROBOT_CTRL_ID_ULTRASONIC_SENSOR_4){
 407:Src/main.c    **** //						//sentMessage.data[0] = readUltrasonic(&front_sensor);
 408:Src/main.c    **** //						floatToCAN(readUltrasonic(&front_sensor), &sentMessage);
 409:Src/main.c    **** //						can_transmit_data_frame_pd(&sentMessage);
 410:Src/main.c    **** //					}
 411:Src/main.c    **** //				}
 412:Src/main.c    **** //				/*
 413:Src/main.c    **** //				else if(receive.identity==0x27 || receive.identity==0x28 || receive.identity==0x29 || receive
 414:Src/main.c    **** //					switch(receive.identity){
 415:Src/main.c    **** //						case 0x27:
 416:Src/main.c    **** //							canSend(readUltrasonic(&right_sensor));
ARM GAS  /tmp/ccMyeQ73.s 			page 9


 417:Src/main.c    **** //							//send.identity = readUltrasonic(&right_sensor);
 418:Src/main.c    **** //						break;
 419:Src/main.c    **** //						case 0x28:
 420:Src/main.c    **** //							canSend(readUltrasonic(&back_sensor));
 421:Src/main.c    **** //							//send.identity = readUltrasonic(&back_sensor);
 422:Src/main.c    **** //						break;
 423:Src/main.c    **** //						case 0x29:
 424:Src/main.c    **** //							canSend(readUltrasonic(&left_sensor));
 425:Src/main.c    **** //							//send.identity = readUltrasonic(&left_sensor);
 426:Src/main.c    **** //						break;
 427:Src/main.c    **** //						case 0x2A:
 428:Src/main.c    **** //							canSend(readUltrasonic(&front_sensor));
 429:Src/main.c    **** //							//send.identity = readUltrasonic(&front_sensor);
 430:Src/main.c    **** //						break;
 431:Src/main.c    **** //					}
 432:Src/main.c    **** //				}*/
 433:Src/main.c    **** //			}
 434:Src/main.c    **** //			else if(receivedMessage.c_s_bit_id == COMMAND_DATA_BIT){	//receive.cs==0){	//command
 435:Src/main.c    **** //
 436:Src/main.c    **** //			}
 437:Src/main.c    **** 		//}
 438:Src/main.c    **** //		else if(receive.ok == 0){
 439:Src/main.c    **** //			//ERROR
 440:Src/main.c    **** //		}
 441:Src/main.c    **** 
 442:Src/main.c    **** 	vTaskDelay(100);
  42              		.loc 1 442 0 discriminator 1
  43 0002 6420     		movs	r0, #100
  44 0004 FFF7FEFF 		bl	vTaskDelay
  45              	.LVL2:
  46 0008 FBE7     		b	.L2
  47              		.cfi_endproc
  48              	.LFE133:
  50 000a 00BF     		.section	.text.initPort,"ax",%progbits
  51              		.align	2
  52              		.global	initPort
  53              		.thumb
  54              		.thumb_func
  56              	initPort:
  57              	.LFB129:
  58              		.file 2 "Inc/pdal.h"
   1:Inc/pdal.h    **** #ifndef PDAL_H
   2:Inc/pdal.h    **** #define PDAL_H
   3:Inc/pdal.h    **** 
   4:Inc/pdal.h    **** #define   GPIO_HIGH    1
   5:Inc/pdal.h    **** #define   GPIO_LOW     0
   6:Inc/pdal.h    **** 
   7:Inc/pdal.h    **** #define   PWM_HIGH     100
   8:Inc/pdal.h    **** #define   PWM_HALF     50
   9:Inc/pdal.h    **** #define   PWM_LOW      0
  10:Inc/pdal.h    **** 
  11:Inc/pdal.h    **** /*
  12:Inc/pdal.h    ****  * Temporal typedefs
  13:Inc/pdal.h    ****  */
  14:Inc/pdal.h    **** typedef unsigned char Byte;
  15:Inc/pdal.h    **** typedef unsigned char GpioPort;
  16:Inc/pdal.h    **** typedef unsigned char GpioPin;
ARM GAS  /tmp/ccMyeQ73.s 			page 10


  17:Inc/pdal.h    **** 
  18:Inc/pdal.h    **** /*
  19:Inc/pdal.h    ****  * AL functions template
  20:Inc/pdal.h    ****  */
  21:Inc/pdal.h    **** void initPort(GpioPort port) { }
  59              		.loc 2 21 0
  60              		.cfi_startproc
  61              		@ args = 0, pretend = 0, frame = 0
  62              		@ frame_needed = 0, uses_anonymous_args = 0
  63              		@ link register save eliminated.
  64              	.LVL3:
  65 0000 7047     		bx	lr
  66              		.cfi_endproc
  67              	.LFE129:
  69 0002 00BF     		.section	.text.initGpio,"ax",%progbits
  70              		.align	2
  71              		.global	initGpio
  72              		.thumb
  73              		.thumb_func
  75              	initGpio:
  76              	.LFB130:
  22:Inc/pdal.h    **** void initGpio(GpioPin port)  { }
  77              		.loc 2 22 0
  78              		.cfi_startproc
  79              		@ args = 0, pretend = 0, frame = 0
  80              		@ frame_needed = 0, uses_anonymous_args = 0
  81              		@ link register save eliminated.
  82              	.LVL4:
  83 0000 7047     		bx	lr
  84              		.cfi_endproc
  85              	.LFE130:
  87 0002 00BF     		.section	.text.initPwm,"ax",%progbits
  88              		.align	2
  89              		.global	initPwm
  90              		.thumb
  91              		.thumb_func
  93              	initPwm:
  94              	.LFB131:
  23:Inc/pdal.h    **** void initPwm()  { }
  95              		.loc 2 23 0
  96              		.cfi_startproc
  97              		@ args = 0, pretend = 0, frame = 0
  98              		@ frame_needed = 0, uses_anonymous_args = 0
  99              		@ link register save eliminated.
 100 0000 7047     		bx	lr
 101              		.cfi_endproc
 102              	.LFE131:
 104 0002 00BF     		.section	.text.StartDefaultTask,"ax",%progbits
 105              		.align	2
 106              		.global	StartDefaultTask
 107              		.thumb
 108              		.thumb_func
 110              	StartDefaultTask:
 111              	.LFB139:
 443:Src/main.c    **** 	}
 444:Src/main.c    **** }
 445:Src/main.c    **** /*
ARM GAS  /tmp/ccMyeQ73.s 			page 11


 446:Src/main.c    **** static void canReceive(){
 447:Src/main.c    **** 
 448:Src/main.c    **** 	RxMessage.StdId = 0x0;
 449:Src/main.c    **** 	RxMessage.ExtId= 0x0;
 450:Src/main.c    **** 	RxMessage.RTR = CAN_RTR_DATA;
 451:Src/main.c    **** 	RxMessage.IDE = CAN_ID_STD;
 452:Src/main.c    **** 	RxMessage.DLC = 2;
 453:Src/main.c    **** 	RxMessage.Data[0] = 0x00;
 454:Src/main.c    **** 	RxMessage.Data[1] = 0x00;
 455:Src/main.c    **** 	RxMessage.FMI = 0x0;
 456:Src/main.c    **** 	RxMessage.FIFONumber=CAN_FIFO0;
 457:Src/main.c    **** 	hcan.pRxMsg = &RxMessage;
 458:Src/main.c    **** 
 459:Src/main.c    **** 	int errrx = HAL_CAN_Receive(&hcan, CAN_FIFO0,  500);
 460:Src/main.c    **** 
 461:Src/main.c    **** 	if(errrx != HAL_OK){
 462:Src/main.c    **** 		if(errrx == HAL_ERROR){
 463:Src/main.c    **** 			HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_13);		//RED
 464:Src/main.c    **** 		}
 465:Src/main.c    **** 		else if(errrx==HAL_TIMEOUT){
 466:Src/main.c    **** 			HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_9);			//RED	NORTH
 467:Src/main.c    **** 		}
 468:Src/main.c    **** 		receive.ok=0;
 469:Src/main.c    **** 	}
 470:Src/main.c    **** 	if(errrx == HAL_OK){
 471:Src/main.c    **** 		HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_14);		//ORANGE
 472:Src/main.c    **** 		receive.ok = 1;
 473:Src/main.c    **** 		receive.cs = (0x04 & RxMessage.Data[0]) >> 2;
 474:Src/main.c    **** 		receive.priority = 0x03 & RxMessage.Data[0];
 475:Src/main.c    **** 		receive.identity = RxMessage.Data[1];
 476:Src/main.c    **** 	}
 477:Src/main.c    **** }
 478:Src/main.c    **** 
 479:Src/main.c    **** static void canSend(float data){
 480:Src/main.c    **** 	TxMessage.StdId = 0x11;
 481:Src/main.c    **** 	TxMessage.ExtId= 0x01;
 482:Src/main.c    **** 	TxMessage.RTR = CAN_RTR_DATA;
 483:Src/main.c    **** 	TxMessage.IDE = CAN_ID_STD;
 484:Src/main.c    **** 	TxMessage.DLC = 2;
 485:Src/main.c    **** 
 486:Src/main.c    **** 	uint32_t aux = (uint32_t)(*(uint32_t*)&data);
 487:Src/main.c    **** 
 488:Src/main.c    **** 	//aux = (uint16_t)(data);
 489:Src/main.c    **** 	uint8_t datal = (uint8_t)(aux &  0x000000FF);
 490:Src/main.c    **** 	uint8_t datah = (uint8_t)((aux & 0x0000FF00) >> 8);
 491:Src/main.c    **** 
 492:Src/main.c    **** 	TxMessage.Data[0] = datah;
 493:Src/main.c    **** 	TxMessage.Data[1] = datal;
 494:Src/main.c    **** 	hcan.pTxMsg = &TxMessage;
 495:Src/main.c    **** 
 496:Src/main.c    **** 	int errtx=HAL_CAN_Transmit(&hcan,  500);
 497:Src/main.c    **** 
 498:Src/main.c    **** 	if(errtx == HAL_OK){
 499:Src/main.c    **** 		HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_11);		//GREEN
 500:Src/main.c    **** 	}
 501:Src/main.c    **** }*/
 502:Src/main.c    **** 
ARM GAS  /tmp/ccMyeQ73.s 			page 12


 503:Src/main.c    **** /** System Clock Configuration
 504:Src/main.c    **** */
 505:Src/main.c    **** void SystemClock_Config(void)
 506:Src/main.c    **** {
 507:Src/main.c    **** 
 508:Src/main.c    ****   RCC_OscInitTypeDef RCC_OscInitStruct;
 509:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct;
 510:Src/main.c    ****   RCC_PeriphCLKInitTypeDef PeriphClkInit;
 511:Src/main.c    **** 
 512:Src/main.c    ****     /**Initializes the CPU, AHB and APB busses clocks 
 513:Src/main.c    ****     */
 514:Src/main.c    ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 515:Src/main.c    ****   RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 516:Src/main.c    ****   RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 517:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 518:Src/main.c    ****   RCC_OscInitStruct.HSICalibrationValue = 16;
 519:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 520:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 521:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 522:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 523:Src/main.c    ****   {
 524:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 525:Src/main.c    ****   }
 526:Src/main.c    **** 
 527:Src/main.c    ****     /**Initializes the CPU, AHB and APB busses clocks 
 528:Src/main.c    ****     */
 529:Src/main.c    ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 530:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 531:Src/main.c    ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 532:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 533:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 534:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 535:Src/main.c    **** 
 536:Src/main.c    ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 537:Src/main.c    ****   {
 538:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 539:Src/main.c    ****   }
 540:Src/main.c    **** 
 541:Src/main.c    ****   PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_USART2
 542:Src/main.c    ****                               |RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_UART4
 543:Src/main.c    ****                               |RCC_PERIPHCLK_UART5|RCC_PERIPHCLK_I2C1
 544:Src/main.c    ****                               |RCC_PERIPHCLK_I2C2|RCC_PERIPHCLK_TIM1
 545:Src/main.c    ****                               |RCC_PERIPHCLK_TIM8|RCC_PERIPHCLK_ADC12;
 546:Src/main.c    ****   PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 547:Src/main.c    ****   PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 548:Src/main.c    ****   PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 549:Src/main.c    ****   PeriphClkInit.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 550:Src/main.c    ****   PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 551:Src/main.c    ****   PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 552:Src/main.c    ****   PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_HSI;
 553:Src/main.c    ****   PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 554:Src/main.c    ****   PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 555:Src/main.c    ****   PeriphClkInit.Tim8ClockSelection = RCC_TIM8CLK_HCLK;
 556:Src/main.c    ****   if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 557:Src/main.c    ****   {
 558:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 559:Src/main.c    ****   }
ARM GAS  /tmp/ccMyeQ73.s 			page 13


 560:Src/main.c    **** 
 561:Src/main.c    ****     /**Configure the Systick interrupt time 
 562:Src/main.c    ****     */
 563:Src/main.c    ****   HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 564:Src/main.c    **** 
 565:Src/main.c    ****     /**Configure the Systick 
 566:Src/main.c    ****     */
 567:Src/main.c    ****   HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 568:Src/main.c    **** 
 569:Src/main.c    ****   /* SysTick_IRQn interrupt configuration */
 570:Src/main.c    ****   HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 571:Src/main.c    **** }
 572:Src/main.c    **** 
 573:Src/main.c    **** /* ADC1 init function */
 574:Src/main.c    **** static void MX_ADC1_Init(void)
 575:Src/main.c    **** {
 576:Src/main.c    **** 
 577:Src/main.c    ****   ADC_MultiModeTypeDef multimode;
 578:Src/main.c    ****   ADC_ChannelConfTypeDef sConfig;
 579:Src/main.c    **** 
 580:Src/main.c    ****     /**Common config 
 581:Src/main.c    ****     */
 582:Src/main.c    ****   hadc1.Instance = ADC1;
 583:Src/main.c    ****   hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 584:Src/main.c    ****   hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 585:Src/main.c    ****   hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 586:Src/main.c    ****   hadc1.Init.ContinuousConvMode = DISABLE;
 587:Src/main.c    ****   hadc1.Init.DiscontinuousConvMode = DISABLE;
 588:Src/main.c    ****   hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 589:Src/main.c    ****   hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 590:Src/main.c    ****   hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 591:Src/main.c    ****   hadc1.Init.NbrOfConversion = 1;
 592:Src/main.c    ****   hadc1.Init.DMAContinuousRequests = DISABLE;
 593:Src/main.c    ****   hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 594:Src/main.c    ****   hadc1.Init.LowPowerAutoWait = DISABLE;
 595:Src/main.c    ****   hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 596:Src/main.c    ****   if (HAL_ADC_Init(&hadc1) != HAL_OK)
 597:Src/main.c    ****   {
 598:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 599:Src/main.c    ****   }
 600:Src/main.c    **** 
 601:Src/main.c    ****     /**Configure the ADC multi-mode 
 602:Src/main.c    ****     */
 603:Src/main.c    ****   multimode.Mode = ADC_MODE_INDEPENDENT;
 604:Src/main.c    ****   if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 605:Src/main.c    ****   {
 606:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 607:Src/main.c    ****   }
 608:Src/main.c    **** 
 609:Src/main.c    ****     /**Configure Regular Channel 
 610:Src/main.c    ****     */
 611:Src/main.c    ****   sConfig.Channel = ADC_CHANNEL_5;
 612:Src/main.c    ****   sConfig.Rank = 1;
 613:Src/main.c    ****   sConfig.SingleDiff = ADC_SINGLE_ENDED;
 614:Src/main.c    ****   sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 615:Src/main.c    ****   sConfig.OffsetNumber = ADC_OFFSET_NONE;
 616:Src/main.c    ****   sConfig.Offset = 0;
ARM GAS  /tmp/ccMyeQ73.s 			page 14


 617:Src/main.c    ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 618:Src/main.c    ****   {
 619:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 620:Src/main.c    ****   }
 621:Src/main.c    **** 
 622:Src/main.c    **** }
 623:Src/main.c    **** 
 624:Src/main.c    **** /* I2C2 init function */
 625:Src/main.c    **** static void MX_I2C2_Init(void)
 626:Src/main.c    **** {
 627:Src/main.c    **** 
 628:Src/main.c    ****   hi2c2.Instance = I2C2;
 629:Src/main.c    ****   hi2c2.Init.Timing = 0x2000090E;
 630:Src/main.c    ****   hi2c2.Init.OwnAddress1 = 0;
 631:Src/main.c    ****   hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 632:Src/main.c    ****   hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 633:Src/main.c    ****   hi2c2.Init.OwnAddress2 = 0;
 634:Src/main.c    ****   hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 635:Src/main.c    ****   hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 636:Src/main.c    ****   hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 637:Src/main.c    ****   if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 638:Src/main.c    ****   {
 639:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 640:Src/main.c    ****   }
 641:Src/main.c    **** 
 642:Src/main.c    ****     /**Configure Analogue filter 
 643:Src/main.c    ****     */
 644:Src/main.c    ****   if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 645:Src/main.c    ****   {
 646:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 647:Src/main.c    ****   }
 648:Src/main.c    **** 
 649:Src/main.c    ****     /**Configure Digital filter 
 650:Src/main.c    ****     */
 651:Src/main.c    ****   if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 652:Src/main.c    ****   {
 653:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 654:Src/main.c    ****   }
 655:Src/main.c    **** 
 656:Src/main.c    **** }
 657:Src/main.c    **** 
 658:Src/main.c    **** /* SPI2 init function */
 659:Src/main.c    **** static void MX_SPI2_Init(void)
 660:Src/main.c    **** {
 661:Src/main.c    **** 
 662:Src/main.c    ****   hspi2.Instance = SPI2;
 663:Src/main.c    ****   hspi2.Init.Mode = SPI_MODE_MASTER;
 664:Src/main.c    ****   hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 665:Src/main.c    ****   hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 666:Src/main.c    ****   hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 667:Src/main.c    ****   hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 668:Src/main.c    ****   hspi2.Init.NSS = SPI_NSS_SOFT;
 669:Src/main.c    ****   hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 670:Src/main.c    ****   hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 671:Src/main.c    ****   hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 672:Src/main.c    ****   hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 673:Src/main.c    ****   hspi2.Init.CRCPolynomial = 7;
ARM GAS  /tmp/ccMyeQ73.s 			page 15


 674:Src/main.c    ****   hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 675:Src/main.c    ****   hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 676:Src/main.c    ****   if (HAL_SPI_Init(&hspi2) != HAL_OK)
 677:Src/main.c    ****   {
 678:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 679:Src/main.c    ****   }
 680:Src/main.c    **** 
 681:Src/main.c    **** }
 682:Src/main.c    **** 
 683:Src/main.c    **** 
 684:Src/main.c    **** 
 685:Src/main.c    **** // USB init function
 686:Src/main.c    **** static void MX_USB_PCD_Init(void)
 687:Src/main.c    **** {
 688:Src/main.c    **** 
 689:Src/main.c    ****   hpcd_USB_FS.Instance = USB;
 690:Src/main.c    ****   hpcd_USB_FS.Init.dev_endpoints = 8;
 691:Src/main.c    ****   hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 692:Src/main.c    ****   hpcd_USB_FS.Init.ep0_mps = DEP0CTL_MPS_64;
 693:Src/main.c    ****   hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 694:Src/main.c    ****   hpcd_USB_FS.Init.low_power_enable = DISABLE;
 695:Src/main.c    ****   hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 696:Src/main.c    ****   if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 697:Src/main.c    ****   {
 698:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 699:Src/main.c    ****   }
 700:Src/main.c    **** 
 701:Src/main.c    **** }
 702:Src/main.c    **** 
 703:Src/main.c    **** /* USER CODE BEGIN 4 */
 704:Src/main.c    **** 
 705:Src/main.c    **** /* USER CODE END 4 */
 706:Src/main.c    **** 
 707:Src/main.c    **** /* StartDefaultTask function */
 708:Src/main.c    **** void StartDefaultTask(void const * argument)
 709:Src/main.c    **** {
 112              		.loc 1 709 0
 113              		.cfi_startproc
 114              		@ Volatile: function does not return.
 115              		@ args = 0, pretend = 0, frame = 0
 116              		@ frame_needed = 0, uses_anonymous_args = 0
 117              	.LVL5:
 118              		.loc 1 709 0
 119 0000 08B5     		push	{r3, lr}
 120              	.LCFI1:
 121              		.cfi_def_cfa_offset 8
 122              		.cfi_offset 3, -8
 123              		.cfi_offset 14, -4
 124              	.LVL6:
 125              	.L8:
 710:Src/main.c    **** 
 711:Src/main.c    ****   /* USER CODE BEGIN 5 */
 712:Src/main.c    ****   /* Infinite loop */
 713:Src/main.c    ****   for(;;)
 714:Src/main.c    ****   {
 715:Src/main.c    ****     osDelay(1);
 126              		.loc 1 715 0 discriminator 1
ARM GAS  /tmp/ccMyeQ73.s 			page 16


 127 0002 0120     		movs	r0, #1
 128 0004 FFF7FEFF 		bl	osDelay
 129              	.LVL7:
 130 0008 FBE7     		b	.L8
 131              		.cfi_endproc
 132              	.LFE139:
 134 000a 00BF     		.section	.text.HAL_TIM_PeriodElapsedCallback,"ax",%progbits
 135              		.align	2
 136              		.global	HAL_TIM_PeriodElapsedCallback
 137              		.thumb
 138              		.thumb_func
 140              	HAL_TIM_PeriodElapsedCallback:
 141              	.LFB140:
 716:Src/main.c    ****   }
 717:Src/main.c    ****   /* USER CODE END 5 */ 
 718:Src/main.c    **** }
 719:Src/main.c    **** 
 720:Src/main.c    **** /**
 721:Src/main.c    ****   * @brief  Period elapsed callback in non blocking mode
 722:Src/main.c    ****   * @note   This function is called  when TIM7 interrupt took place, inside
 723:Src/main.c    ****   * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 724:Src/main.c    ****   * a global variable "uwTick" used as application time base.
 725:Src/main.c    ****   * @param  htim : TIM handle
 726:Src/main.c    ****   * @retval None
 727:Src/main.c    ****   */
 728:Src/main.c    **** void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
 729:Src/main.c    **** {
 142              		.loc 1 729 0
 143              		.cfi_startproc
 144              		@ args = 0, pretend = 0, frame = 0
 145              		@ frame_needed = 0, uses_anonymous_args = 0
 146              	.LVL8:
 147 0000 08B5     		push	{r3, lr}
 148              	.LCFI2:
 149              		.cfi_def_cfa_offset 8
 150              		.cfi_offset 3, -8
 151              		.cfi_offset 14, -4
 730:Src/main.c    **** /* USER CODE BEGIN Callback 0 */
 731:Src/main.c    **** 
 732:Src/main.c    **** /* USER CODE END Callback 0 */
 733:Src/main.c    ****   if (htim->Instance == TIM7) {
 152              		.loc 1 733 0
 153 0002 0268     		ldr	r2, [r0]
 154 0004 024B     		ldr	r3, .L13
 155 0006 9A42     		cmp	r2, r3
 156 0008 01D1     		bne	.L10
 734:Src/main.c    ****     HAL_IncTick();
 157              		.loc 1 734 0
 158 000a FFF7FEFF 		bl	HAL_IncTick
 159              	.LVL9:
 160              	.L10:
 161 000e 08BD     		pop	{r3, pc}
 162              	.L14:
 163              		.align	2
 164              	.L13:
 165 0010 00140040 		.word	1073746944
 166              		.cfi_endproc
ARM GAS  /tmp/ccMyeQ73.s 			page 17


 167              	.LFE140:
 169              		.section	.text._Error_Handler,"ax",%progbits
 170              		.align	2
 171              		.global	_Error_Handler
 172              		.thumb
 173              		.thumb_func
 175              	_Error_Handler:
 176              	.LFB141:
 735:Src/main.c    ****   }
 736:Src/main.c    **** /* USER CODE BEGIN Callback 1 */
 737:Src/main.c    **** 
 738:Src/main.c    **** /* USER CODE END Callback 1 */
 739:Src/main.c    **** }
 740:Src/main.c    **** 
 741:Src/main.c    **** /**
 742:Src/main.c    ****   * @brief  This function is executed in case of error occurrence.
 743:Src/main.c    ****   * @param  None
 744:Src/main.c    ****   * @retval None
 745:Src/main.c    ****   */
 746:Src/main.c    **** void _Error_Handler(char * file, int line)
 747:Src/main.c    **** {
 177              		.loc 1 747 0
 178              		.cfi_startproc
 179              		@ Volatile: function does not return.
 180              		@ args = 0, pretend = 0, frame = 0
 181              		@ frame_needed = 0, uses_anonymous_args = 0
 182              		@ link register save eliminated.
 183              	.LVL10:
 184              	.L16:
 185 0000 FEE7     		b	.L16
 186              		.cfi_endproc
 187              	.LFE141:
 189 0002 00BF     		.section	.text.MX_ADC1_Init,"ax",%progbits
 190              		.align	2
 191              		.thumb
 192              		.thumb_func
 194              	MX_ADC1_Init:
 195              	.LFB135:
 575:Src/main.c    **** 
 196              		.loc 1 575 0
 197              		.cfi_startproc
 198              		@ args = 0, pretend = 0, frame = 40
 199              		@ frame_needed = 0, uses_anonymous_args = 0
 575:Src/main.c    **** 
 200              		.loc 1 575 0
 201 0000 00B5     		push	{lr}
 202              	.LCFI3:
 203              		.cfi_def_cfa_offset 4
 204              		.cfi_offset 14, -4
 205 0002 8BB0     		sub	sp, sp, #44
 206              	.LCFI4:
 207              		.cfi_def_cfa_offset 48
 582:Src/main.c    ****   hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 208              		.loc 1 582 0
 209 0004 1F48     		ldr	r0, .L22
 210 0006 4FF0A043 		mov	r3, #1342177280
 211 000a 0360     		str	r3, [r0]
ARM GAS  /tmp/ccMyeQ73.s 			page 18


 583:Src/main.c    ****   hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 212              		.loc 1 583 0
 213 000c 0023     		movs	r3, #0
 214 000e 4360     		str	r3, [r0, #4]
 584:Src/main.c    ****   hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 215              		.loc 1 584 0
 216 0010 8360     		str	r3, [r0, #8]
 585:Src/main.c    ****   hadc1.Init.ContinuousConvMode = DISABLE;
 217              		.loc 1 585 0
 218 0012 0361     		str	r3, [r0, #16]
 586:Src/main.c    ****   hadc1.Init.DiscontinuousConvMode = DISABLE;
 219              		.loc 1 586 0
 220 0014 C361     		str	r3, [r0, #28]
 587:Src/main.c    ****   hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 221              		.loc 1 587 0
 222 0016 4362     		str	r3, [r0, #36]
 588:Src/main.c    ****   hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 223              		.loc 1 588 0
 224 0018 0363     		str	r3, [r0, #48]
 589:Src/main.c    ****   hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 225              		.loc 1 589 0
 226 001a 0122     		movs	r2, #1
 227 001c C262     		str	r2, [r0, #44]
 590:Src/main.c    ****   hadc1.Init.NbrOfConversion = 1;
 228              		.loc 1 590 0
 229 001e C360     		str	r3, [r0, #12]
 591:Src/main.c    ****   hadc1.Init.DMAContinuousRequests = DISABLE;
 230              		.loc 1 591 0
 231 0020 0262     		str	r2, [r0, #32]
 592:Src/main.c    ****   hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 232              		.loc 1 592 0
 233 0022 4363     		str	r3, [r0, #52]
 593:Src/main.c    ****   hadc1.Init.LowPowerAutoWait = DISABLE;
 234              		.loc 1 593 0
 235 0024 0422     		movs	r2, #4
 236 0026 4261     		str	r2, [r0, #20]
 594:Src/main.c    ****   hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 237              		.loc 1 594 0
 238 0028 8361     		str	r3, [r0, #24]
 595:Src/main.c    ****   if (HAL_ADC_Init(&hadc1) != HAL_OK)
 239              		.loc 1 595 0
 240 002a 8363     		str	r3, [r0, #56]
 596:Src/main.c    ****   {
 241              		.loc 1 596 0
 242 002c FFF7FEFF 		bl	HAL_ADC_Init
 243              	.LVL11:
 244 0030 20B1     		cbz	r0, .L18
 598:Src/main.c    ****   }
 245              		.loc 1 598 0
 246 0032 40F25621 		movw	r1, #598
 247 0036 1448     		ldr	r0, .L22+4
 248 0038 FFF7FEFF 		bl	_Error_Handler
 249              	.LVL12:
 250              	.L18:
 603:Src/main.c    ****   if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 251              		.loc 1 603 0
 252 003c 0AA9     		add	r1, sp, #40
ARM GAS  /tmp/ccMyeQ73.s 			page 19


 253 003e 0023     		movs	r3, #0
 254 0040 41F80C3D 		str	r3, [r1, #-12]!
 604:Src/main.c    ****   {
 255              		.loc 1 604 0
 256 0044 0F48     		ldr	r0, .L22
 257 0046 FFF7FEFF 		bl	HAL_ADCEx_MultiModeConfigChannel
 258              	.LVL13:
 259 004a 20B1     		cbz	r0, .L19
 606:Src/main.c    ****   }
 260              		.loc 1 606 0
 261 004c 40F25E21 		movw	r1, #606
 262 0050 0D48     		ldr	r0, .L22+4
 263 0052 FFF7FEFF 		bl	_Error_Handler
 264              	.LVL14:
 265              	.L19:
 611:Src/main.c    ****   sConfig.Rank = 1;
 266              		.loc 1 611 0
 267 0056 0523     		movs	r3, #5
 268 0058 0193     		str	r3, [sp, #4]
 612:Src/main.c    ****   sConfig.SingleDiff = ADC_SINGLE_ENDED;
 269              		.loc 1 612 0
 270 005a 0123     		movs	r3, #1
 271 005c 0293     		str	r3, [sp, #8]
 613:Src/main.c    ****   sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 272              		.loc 1 613 0
 273 005e 0023     		movs	r3, #0
 274 0060 0493     		str	r3, [sp, #16]
 614:Src/main.c    ****   sConfig.OffsetNumber = ADC_OFFSET_NONE;
 275              		.loc 1 614 0
 276 0062 0393     		str	r3, [sp, #12]
 615:Src/main.c    ****   sConfig.Offset = 0;
 277              		.loc 1 615 0
 278 0064 0593     		str	r3, [sp, #20]
 616:Src/main.c    ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 279              		.loc 1 616 0
 280 0066 0693     		str	r3, [sp, #24]
 617:Src/main.c    ****   {
 281              		.loc 1 617 0
 282 0068 01A9     		add	r1, sp, #4
 283 006a 0648     		ldr	r0, .L22
 284 006c FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 285              	.LVL15:
 286 0070 20B1     		cbz	r0, .L17
 619:Src/main.c    ****   }
 287              		.loc 1 619 0
 288 0072 40F26B21 		movw	r1, #619
 289 0076 0448     		ldr	r0, .L22+4
 290 0078 FFF7FEFF 		bl	_Error_Handler
 291              	.LVL16:
 292              	.L17:
 622:Src/main.c    **** 
 293              		.loc 1 622 0
 294 007c 0BB0     		add	sp, sp, #44
 295              	.LCFI5:
 296              		.cfi_def_cfa_offset 4
 297              		@ sp needed
 298 007e 5DF804FB 		ldr	pc, [sp], #4
ARM GAS  /tmp/ccMyeQ73.s 			page 20


 299              	.L23:
 300 0082 00BF     		.align	2
 301              	.L22:
 302 0084 00000000 		.word	hadc1
 303 0088 00000000 		.word	.LC0
 304              		.cfi_endproc
 305              	.LFE135:
 307              		.section	.text.MX_I2C2_Init,"ax",%progbits
 308              		.align	2
 309              		.thumb
 310              		.thumb_func
 312              	MX_I2C2_Init:
 313              	.LFB136:
 626:Src/main.c    **** 
 314              		.loc 1 626 0
 315              		.cfi_startproc
 316              		@ args = 0, pretend = 0, frame = 0
 317              		@ frame_needed = 0, uses_anonymous_args = 0
 318 0000 08B5     		push	{r3, lr}
 319              	.LCFI6:
 320              		.cfi_def_cfa_offset 8
 321              		.cfi_offset 3, -8
 322              		.cfi_offset 14, -4
 628:Src/main.c    ****   hi2c2.Init.Timing = 0x2000090E;
 323              		.loc 1 628 0
 324 0002 1548     		ldr	r0, .L29
 325 0004 154B     		ldr	r3, .L29+4
 326 0006 0360     		str	r3, [r0]
 629:Src/main.c    ****   hi2c2.Init.OwnAddress1 = 0;
 327              		.loc 1 629 0
 328 0008 154B     		ldr	r3, .L29+8
 329 000a 4360     		str	r3, [r0, #4]
 630:Src/main.c    ****   hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 330              		.loc 1 630 0
 331 000c 0023     		movs	r3, #0
 332 000e 8360     		str	r3, [r0, #8]
 631:Src/main.c    ****   hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 333              		.loc 1 631 0
 334 0010 0122     		movs	r2, #1
 335 0012 C260     		str	r2, [r0, #12]
 632:Src/main.c    ****   hi2c2.Init.OwnAddress2 = 0;
 336              		.loc 1 632 0
 337 0014 0361     		str	r3, [r0, #16]
 633:Src/main.c    ****   hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 338              		.loc 1 633 0
 339 0016 4361     		str	r3, [r0, #20]
 634:Src/main.c    ****   hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 340              		.loc 1 634 0
 341 0018 8361     		str	r3, [r0, #24]
 635:Src/main.c    ****   hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 342              		.loc 1 635 0
 343 001a C361     		str	r3, [r0, #28]
 636:Src/main.c    ****   if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 344              		.loc 1 636 0
 345 001c 0362     		str	r3, [r0, #32]
 637:Src/main.c    ****   {
 346              		.loc 1 637 0
ARM GAS  /tmp/ccMyeQ73.s 			page 21


 347 001e FFF7FEFF 		bl	HAL_I2C_Init
 348              	.LVL17:
 349 0022 20B1     		cbz	r0, .L25
 639:Src/main.c    ****   }
 350              		.loc 1 639 0
 351 0024 40F27F21 		movw	r1, #639
 352 0028 0E48     		ldr	r0, .L29+12
 353 002a FFF7FEFF 		bl	_Error_Handler
 354              	.LVL18:
 355              	.L25:
 644:Src/main.c    ****   {
 356              		.loc 1 644 0
 357 002e 0021     		movs	r1, #0
 358 0030 0948     		ldr	r0, .L29
 359 0032 FFF7FEFF 		bl	HAL_I2CEx_ConfigAnalogFilter
 360              	.LVL19:
 361 0036 20B1     		cbz	r0, .L26
 646:Src/main.c    ****   }
 362              		.loc 1 646 0
 363 0038 40F28621 		movw	r1, #646
 364 003c 0948     		ldr	r0, .L29+12
 365 003e FFF7FEFF 		bl	_Error_Handler
 366              	.LVL20:
 367              	.L26:
 651:Src/main.c    ****   {
 368              		.loc 1 651 0
 369 0042 0021     		movs	r1, #0
 370 0044 0448     		ldr	r0, .L29
 371 0046 FFF7FEFF 		bl	HAL_I2CEx_ConfigDigitalFilter
 372              	.LVL21:
 373 004a 20B1     		cbz	r0, .L24
 653:Src/main.c    ****   }
 374              		.loc 1 653 0
 375 004c 40F28D21 		movw	r1, #653
 376 0050 0448     		ldr	r0, .L29+12
 377 0052 FFF7FEFF 		bl	_Error_Handler
 378              	.LVL22:
 379              	.L24:
 380 0056 08BD     		pop	{r3, pc}
 381              	.L30:
 382              		.align	2
 383              	.L29:
 384 0058 00000000 		.word	hi2c2
 385 005c 00580040 		.word	1073764352
 386 0060 0E090020 		.word	536873230
 387 0064 00000000 		.word	.LC0
 388              		.cfi_endproc
 389              	.LFE136:
 391              		.section	.text.MX_SPI2_Init,"ax",%progbits
 392              		.align	2
 393              		.thumb
 394              		.thumb_func
 396              	MX_SPI2_Init:
 397              	.LFB137:
 660:Src/main.c    **** 
 398              		.loc 1 660 0
 399              		.cfi_startproc
ARM GAS  /tmp/ccMyeQ73.s 			page 22


 400              		@ args = 0, pretend = 0, frame = 0
 401              		@ frame_needed = 0, uses_anonymous_args = 0
 402 0000 08B5     		push	{r3, lr}
 403              	.LCFI7:
 404              		.cfi_def_cfa_offset 8
 405              		.cfi_offset 3, -8
 406              		.cfi_offset 14, -4
 662:Src/main.c    ****   hspi2.Init.Mode = SPI_MODE_MASTER;
 407              		.loc 1 662 0
 408 0002 1148     		ldr	r0, .L34
 409 0004 114B     		ldr	r3, .L34+4
 410 0006 0360     		str	r3, [r0]
 663:Src/main.c    ****   hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 411              		.loc 1 663 0
 412 0008 4FF48273 		mov	r3, #260
 413 000c 4360     		str	r3, [r0, #4]
 664:Src/main.c    ****   hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 414              		.loc 1 664 0
 415 000e 0023     		movs	r3, #0
 416 0010 8360     		str	r3, [r0, #8]
 665:Src/main.c    ****   hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 417              		.loc 1 665 0
 418 0012 4FF44072 		mov	r2, #768
 419 0016 C260     		str	r2, [r0, #12]
 666:Src/main.c    ****   hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 420              		.loc 1 666 0
 421 0018 0361     		str	r3, [r0, #16]
 667:Src/main.c    ****   hspi2.Init.NSS = SPI_NSS_SOFT;
 422              		.loc 1 667 0
 423 001a 4361     		str	r3, [r0, #20]
 668:Src/main.c    ****   hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 424              		.loc 1 668 0
 425 001c 4FF40072 		mov	r2, #512
 426 0020 8261     		str	r2, [r0, #24]
 669:Src/main.c    ****   hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 427              		.loc 1 669 0
 428 0022 C361     		str	r3, [r0, #28]
 670:Src/main.c    ****   hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 429              		.loc 1 670 0
 430 0024 0362     		str	r3, [r0, #32]
 671:Src/main.c    ****   hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 431              		.loc 1 671 0
 432 0026 4362     		str	r3, [r0, #36]
 672:Src/main.c    ****   hspi2.Init.CRCPolynomial = 7;
 433              		.loc 1 672 0
 434 0028 8362     		str	r3, [r0, #40]
 673:Src/main.c    ****   hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 435              		.loc 1 673 0
 436 002a 0722     		movs	r2, #7
 437 002c C262     		str	r2, [r0, #44]
 674:Src/main.c    ****   hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 438              		.loc 1 674 0
 439 002e 0363     		str	r3, [r0, #48]
 675:Src/main.c    ****   if (HAL_SPI_Init(&hspi2) != HAL_OK)
 440              		.loc 1 675 0
 441 0030 0823     		movs	r3, #8
 442 0032 4363     		str	r3, [r0, #52]
ARM GAS  /tmp/ccMyeQ73.s 			page 23


 676:Src/main.c    ****   {
 443              		.loc 1 676 0
 444 0034 FFF7FEFF 		bl	HAL_SPI_Init
 445              	.LVL23:
 446 0038 20B1     		cbz	r0, .L31
 678:Src/main.c    ****   }
 447              		.loc 1 678 0
 448 003a 40F2A621 		movw	r1, #678
 449 003e 0448     		ldr	r0, .L34+8
 450 0040 FFF7FEFF 		bl	_Error_Handler
 451              	.LVL24:
 452              	.L31:
 453 0044 08BD     		pop	{r3, pc}
 454              	.L35:
 455 0046 00BF     		.align	2
 456              	.L34:
 457 0048 00000000 		.word	hspi2
 458 004c 00380040 		.word	1073756160
 459 0050 00000000 		.word	.LC0
 460              		.cfi_endproc
 461              	.LFE137:
 463              		.section	.text.MX_USB_PCD_Init,"ax",%progbits
 464              		.align	2
 465              		.thumb
 466              		.thumb_func
 468              	MX_USB_PCD_Init:
 469              	.LFB138:
 687:Src/main.c    **** 
 470              		.loc 1 687 0
 471              		.cfi_startproc
 472              		@ args = 0, pretend = 0, frame = 0
 473              		@ frame_needed = 0, uses_anonymous_args = 0
 474 0000 08B5     		push	{r3, lr}
 475              	.LCFI8:
 476              		.cfi_def_cfa_offset 8
 477              		.cfi_offset 3, -8
 478              		.cfi_offset 14, -4
 689:Src/main.c    ****   hpcd_USB_FS.Init.dev_endpoints = 8;
 479              		.loc 1 689 0
 480 0002 0A48     		ldr	r0, .L39
 481 0004 0A4B     		ldr	r3, .L39+4
 482 0006 0360     		str	r3, [r0]
 690:Src/main.c    ****   hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 483              		.loc 1 690 0
 484 0008 0823     		movs	r3, #8
 485 000a 4360     		str	r3, [r0, #4]
 691:Src/main.c    ****   hpcd_USB_FS.Init.ep0_mps = DEP0CTL_MPS_64;
 486              		.loc 1 691 0
 487 000c 0222     		movs	r2, #2
 488 000e 8260     		str	r2, [r0, #8]
 692:Src/main.c    ****   hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 489              		.loc 1 692 0
 490 0010 0023     		movs	r3, #0
 491 0012 C360     		str	r3, [r0, #12]
 693:Src/main.c    ****   hpcd_USB_FS.Init.low_power_enable = DISABLE;
 492              		.loc 1 693 0
 493 0014 0261     		str	r2, [r0, #16]
ARM GAS  /tmp/ccMyeQ73.s 			page 24


 694:Src/main.c    ****   hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 494              		.loc 1 694 0
 495 0016 8361     		str	r3, [r0, #24]
 695:Src/main.c    ****   if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 496              		.loc 1 695 0
 497 0018 0362     		str	r3, [r0, #32]
 696:Src/main.c    ****   {
 498              		.loc 1 696 0
 499 001a FFF7FEFF 		bl	HAL_PCD_Init
 500              	.LVL25:
 501 001e 20B1     		cbz	r0, .L36
 698:Src/main.c    ****   }
 502              		.loc 1 698 0
 503 0020 40F2BA21 		movw	r1, #698
 504 0024 0348     		ldr	r0, .L39+8
 505 0026 FFF7FEFF 		bl	_Error_Handler
 506              	.LVL26:
 507              	.L36:
 508 002a 08BD     		pop	{r3, pc}
 509              	.L40:
 510              		.align	2
 511              	.L39:
 512 002c 00000000 		.word	hpcd_USB_FS
 513 0030 005C0040 		.word	1073765376
 514 0034 00000000 		.word	.LC0
 515              		.cfi_endproc
 516              	.LFE138:
 518              		.section	.text.SystemClock_Config,"ax",%progbits
 519              		.align	2
 520              		.global	SystemClock_Config
 521              		.thumb
 522              		.thumb_func
 524              	SystemClock_Config:
 525              	.LFB134:
 506:Src/main.c    **** 
 526              		.loc 1 506 0
 527              		.cfi_startproc
 528              		@ args = 0, pretend = 0, frame = 120
 529              		@ frame_needed = 0, uses_anonymous_args = 0
 530 0000 00B5     		push	{lr}
 531              	.LCFI9:
 532              		.cfi_def_cfa_offset 4
 533              		.cfi_offset 14, -4
 534 0002 9FB0     		sub	sp, sp, #124
 535              	.LCFI10:
 536              		.cfi_def_cfa_offset 128
 514:Src/main.c    ****   RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 537              		.loc 1 514 0
 538 0004 0323     		movs	r3, #3
 539 0006 1493     		str	r3, [sp, #80]
 515:Src/main.c    ****   RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 540              		.loc 1 515 0
 541 0008 4FF48033 		mov	r3, #65536
 542 000c 1593     		str	r3, [sp, #84]
 516:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 543              		.loc 1 516 0
 544 000e 0022     		movs	r2, #0
ARM GAS  /tmp/ccMyeQ73.s 			page 25


 545 0010 1692     		str	r2, [sp, #88]
 517:Src/main.c    ****   RCC_OscInitStruct.HSICalibrationValue = 16;
 546              		.loc 1 517 0
 547 0012 0122     		movs	r2, #1
 548 0014 1892     		str	r2, [sp, #96]
 518:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 549              		.loc 1 518 0
 550 0016 1022     		movs	r2, #16
 551 0018 1992     		str	r2, [sp, #100]
 519:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 552              		.loc 1 519 0
 553 001a 0222     		movs	r2, #2
 554 001c 1B92     		str	r2, [sp, #108]
 520:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 555              		.loc 1 520 0
 556 001e 1C93     		str	r3, [sp, #112]
 521:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 557              		.loc 1 521 0
 558 0020 4FF48013 		mov	r3, #1048576
 559 0024 1D93     		str	r3, [sp, #116]
 522:Src/main.c    ****   {
 560              		.loc 1 522 0
 561 0026 14A8     		add	r0, sp, #80
 562 0028 FFF7FEFF 		bl	HAL_RCC_OscConfig
 563              	.LVL27:
 564 002c 20B1     		cbz	r0, .L42
 524:Src/main.c    ****   }
 565              		.loc 1 524 0
 566 002e 4FF40371 		mov	r1, #524
 567 0032 2248     		ldr	r0, .L46
 568 0034 FFF7FEFF 		bl	_Error_Handler
 569              	.LVL28:
 570              	.L42:
 529:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 571              		.loc 1 529 0
 572 0038 0F23     		movs	r3, #15
 573 003a 0F93     		str	r3, [sp, #60]
 531:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 574              		.loc 1 531 0
 575 003c 0223     		movs	r3, #2
 576 003e 1093     		str	r3, [sp, #64]
 532:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 577              		.loc 1 532 0
 578 0040 0023     		movs	r3, #0
 579 0042 1193     		str	r3, [sp, #68]
 533:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 580              		.loc 1 533 0
 581 0044 4FF48062 		mov	r2, #1024
 582 0048 1292     		str	r2, [sp, #72]
 534:Src/main.c    **** 
 583              		.loc 1 534 0
 584 004a 1393     		str	r3, [sp, #76]
 536:Src/main.c    ****   {
 585              		.loc 1 536 0
 586 004c 0121     		movs	r1, #1
 587 004e 0FA8     		add	r0, sp, #60
 588 0050 FFF7FEFF 		bl	HAL_RCC_ClockConfig
ARM GAS  /tmp/ccMyeQ73.s 			page 26


 589              	.LVL29:
 590 0054 20B1     		cbz	r0, .L43
 538:Src/main.c    ****   }
 591              		.loc 1 538 0
 592 0056 40F21A21 		movw	r1, #538
 593 005a 1848     		ldr	r0, .L46
 594 005c FFF7FEFF 		bl	_Error_Handler
 595              	.LVL30:
 596              	.L43:
 541:Src/main.c    ****                               |RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_UART4
 597              		.loc 1 541 0
 598 0060 174B     		ldr	r3, .L46+4
 599 0062 0093     		str	r3, [sp]
 546:Src/main.c    ****   PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 600              		.loc 1 546 0
 601 0064 0023     		movs	r3, #0
 602 0066 0393     		str	r3, [sp, #12]
 547:Src/main.c    ****   PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 603              		.loc 1 547 0
 604 0068 0493     		str	r3, [sp, #16]
 548:Src/main.c    ****   PeriphClkInit.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 605              		.loc 1 548 0
 606 006a 0593     		str	r3, [sp, #20]
 549:Src/main.c    ****   PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 607              		.loc 1 549 0
 608 006c 0693     		str	r3, [sp, #24]
 550:Src/main.c    ****   PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 609              		.loc 1 550 0
 610 006e 4FF48072 		mov	r2, #256
 611 0072 0992     		str	r2, [sp, #36]
 551:Src/main.c    ****   PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_HSI;
 612              		.loc 1 551 0
 613 0074 0793     		str	r3, [sp, #28]
 552:Src/main.c    ****   PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 614              		.loc 1 552 0
 615 0076 0893     		str	r3, [sp, #32]
 553:Src/main.c    ****   PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 616              		.loc 1 553 0
 617 0078 4FF48002 		mov	r2, #4194304
 618 007c 0E92     		str	r2, [sp, #56]
 554:Src/main.c    ****   PeriphClkInit.Tim8ClockSelection = RCC_TIM8CLK_HCLK;
 619              		.loc 1 554 0
 620 007e 0C93     		str	r3, [sp, #48]
 555:Src/main.c    ****   if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 621              		.loc 1 555 0
 622 0080 0D93     		str	r3, [sp, #52]
 556:Src/main.c    ****   {
 623              		.loc 1 556 0
 624 0082 6846     		mov	r0, sp
 625 0084 FFF7FEFF 		bl	HAL_RCCEx_PeriphCLKConfig
 626              	.LVL31:
 627 0088 20B1     		cbz	r0, .L44
 558:Src/main.c    ****   }
 628              		.loc 1 558 0
 629 008a 40F22E21 		movw	r1, #558
 630 008e 0B48     		ldr	r0, .L46
 631 0090 FFF7FEFF 		bl	_Error_Handler
ARM GAS  /tmp/ccMyeQ73.s 			page 27


 632              	.LVL32:
 633              	.L44:
 563:Src/main.c    **** 
 634              		.loc 1 563 0
 635 0094 FFF7FEFF 		bl	HAL_RCC_GetHCLKFreq
 636              	.LVL33:
 637 0098 0A4B     		ldr	r3, .L46+8
 638 009a A3FB0030 		umull	r3, r0, r3, r0
 639 009e 8009     		lsrs	r0, r0, #6
 640 00a0 FFF7FEFF 		bl	HAL_SYSTICK_Config
 641              	.LVL34:
 567:Src/main.c    **** 
 642              		.loc 1 567 0
 643 00a4 0420     		movs	r0, #4
 644 00a6 FFF7FEFF 		bl	HAL_SYSTICK_CLKSourceConfig
 645              	.LVL35:
 570:Src/main.c    **** }
 646              		.loc 1 570 0
 647 00aa 0022     		movs	r2, #0
 648 00ac 0F21     		movs	r1, #15
 649 00ae 4FF0FF30 		mov	r0, #-1
 650 00b2 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 651              	.LVL36:
 571:Src/main.c    **** 
 652              		.loc 1 571 0
 653 00b6 1FB0     		add	sp, sp, #124
 654              	.LCFI11:
 655              		.cfi_def_cfa_offset 4
 656              		@ sp needed
 657 00b8 5DF804FB 		ldr	pc, [sp], #4
 658              	.L47:
 659              		.align	2
 660              	.L46:
 661 00bc 00000000 		.word	.LC0
 662 00c0 FE300200 		.word	143614
 663 00c4 D34D6210 		.word	274877907
 664              		.cfi_endproc
 665              	.LFE134:
 667              		.section	.text.main,"ax",%progbits
 668              		.align	2
 669              		.global	main
 670              		.thumb
 671              		.thumb_func
 673              	main:
 674              	.LFB132:
 125:Src/main.c    **** 
 675              		.loc 1 125 0
 676              		.cfi_startproc
 677              		@ args = 0, pretend = 0, frame = 0
 678              		@ frame_needed = 0, uses_anonymous_args = 0
 679 0000 10B5     		push	{r4, lr}
 680              	.LCFI12:
 681              		.cfi_def_cfa_offset 8
 682              		.cfi_offset 4, -8
 683              		.cfi_offset 14, -4
 684 0002 82B0     		sub	sp, sp, #8
 685              	.LCFI13:
ARM GAS  /tmp/ccMyeQ73.s 			page 28


 686              		.cfi_def_cfa_offset 16
 128:Src/main.c    **** 
 687              		.loc 1 128 0
 688 0004 FFF7FEFF 		bl	HAL_Init
 689              	.LVL37:
 131:Src/main.c    **** 
 690              		.loc 1 131 0
 691 0008 FFF7FEFF 		bl	SystemClock_Config
 692              	.LVL38:
 138:Src/main.c    ****   MX_DMA_Init();
 693              		.loc 1 138 0
 694 000c FFF7FEFF 		bl	MX_GPIO_Init
 695              	.LVL39:
 139:Src/main.c    **** 
 696              		.loc 1 139 0
 697 0010 FFF7FEFF 		bl	MX_DMA_Init
 698              	.LVL40:
 144:Src/main.c    ****   MX_CAN_Init();		//can
 699              		.loc 1 144 0
 700 0014 FFF7FEFF 		bl	MX_ADC1_Init
 701              	.LVL41:
 145:Src/main.c    ****   MX_I2C1_Init();		//accelerometer & magnetometer
 702              		.loc 1 145 0
 703 0018 FFF7FEFF 		bl	MX_CAN_Init
 704              	.LVL42:
 146:Src/main.c    ****   MX_I2C2_Init();
 705              		.loc 1 146 0
 706 001c FFF7FEFF 		bl	MX_I2C1_Init
 707              	.LVL43:
 147:Src/main.c    ****   MX_SPI1_Init();		//gyroscope
 708              		.loc 1 147 0
 709 0020 FFF7FEFF 		bl	MX_I2C2_Init
 710              	.LVL44:
 148:Src/main.c    ****   MX_SPI2_Init();
 711              		.loc 1 148 0
 712 0024 FFF7FEFF 		bl	MX_SPI1_Init
 713              	.LVL45:
 149:Src/main.c    ****   MX_TIM1_Init();
 714              		.loc 1 149 0
 715 0028 FFF7FEFF 		bl	MX_SPI2_Init
 716              	.LVL46:
 150:Src/main.c    ****   MX_TIM2_Init();
 717              		.loc 1 150 0
 718 002c FFF7FEFF 		bl	MX_TIM1_Init
 719              	.LVL47:
 151:Src/main.c    ****   MX_TIM3_Init();
 720              		.loc 1 151 0
 721 0030 FFF7FEFF 		bl	MX_TIM2_Init
 722              	.LVL48:
 152:Src/main.c    ****   MX_TIM4_Init();
 723              		.loc 1 152 0
 724 0034 FFF7FEFF 		bl	MX_TIM3_Init
 725              	.LVL49:
 153:Src/main.c    ****   MX_TIM8_Init();
 726              		.loc 1 153 0
 727 0038 FFF7FEFF 		bl	MX_TIM4_Init
 728              	.LVL50:
ARM GAS  /tmp/ccMyeQ73.s 			page 29


 154:Src/main.c    ****   MX_TIM15_Init();
 729              		.loc 1 154 0
 730 003c FFF7FEFF 		bl	MX_TIM8_Init
 731              	.LVL51:
 155:Src/main.c    ****   MX_TIM16_Init();
 732              		.loc 1 155 0
 733 0040 FFF7FEFF 		bl	MX_TIM15_Init
 734              	.LVL52:
 156:Src/main.c    ****   MX_TIM17_Init();
 735              		.loc 1 156 0
 736 0044 FFF7FEFF 		bl	MX_TIM16_Init
 737              	.LVL53:
 157:Src/main.c    ****   MX_UART4_Init();
 738              		.loc 1 157 0
 739 0048 FFF7FEFF 		bl	MX_TIM17_Init
 740              	.LVL54:
 158:Src/main.c    ****   MX_UART5_Init();
 741              		.loc 1 158 0
 742 004c FFF7FEFF 		bl	MX_UART4_Init
 743              	.LVL55:
 159:Src/main.c    ****   MX_USART2_UART_Init();	//ultrasonic
 744              		.loc 1 159 0
 745 0050 FFF7FEFF 		bl	MX_UART5_Init
 746              	.LVL56:
 160:Src/main.c    ****   MX_USART3_UART_Init();
 747              		.loc 1 160 0
 748 0054 FFF7FEFF 		bl	MX_USART2_UART_Init
 749              	.LVL57:
 161:Src/main.c    ****   MX_USB_PCD_Init();
 750              		.loc 1 161 0
 751 0058 FFF7FEFF 		bl	MX_USART3_UART_Init
 752              	.LVL58:
 162:Src/main.c    **** 
 753              		.loc 1 162 0
 754 005c FFF7FEFF 		bl	MX_USB_PCD_Init
 755              	.LVL59:
 165:Src/main.c    ****   //ultrasonic_Init();
 756              		.loc 1 165 0
 757 0060 FFF7FEFF 		bl	initHardware
 758              	.LVL60:
 190:Src/main.c    ****   //xTaskCreate(gamTask, "Gyroscope, Accelerometer, and Magnetometer Task", 100, NULL, 3, NULL);
 759              		.loc 1 190 0
 760 0064 0024     		movs	r4, #0
 761 0066 0194     		str	r4, [sp, #4]
 762 0068 0223     		movs	r3, #2
 763 006a 0093     		str	r3, [sp]
 764 006c 2346     		mov	r3, r4
 765 006e 6422     		movs	r2, #100
 766 0070 0449     		ldr	r1, .L50
 767 0072 0548     		ldr	r0, .L50+4
 768 0074 FFF7FEFF 		bl	xTaskCreate
 769              	.LVL61:
 199:Src/main.c    ****   
 770              		.loc 1 199 0
 771 0078 FFF7FEFF 		bl	osKernelStart
 772              	.LVL62:
 209:Src/main.c    **** 
ARM GAS  /tmp/ccMyeQ73.s 			page 30


 773              		.loc 1 209 0
 774 007c 2046     		mov	r0, r4
 775 007e 02B0     		add	sp, sp, #8
 776              	.LCFI14:
 777              		.cfi_def_cfa_offset 8
 778              		@ sp needed
 779 0080 10BD     		pop	{r4, pc}
 780              	.L51:
 781 0082 00BF     		.align	2
 782              	.L50:
 783 0084 0C000000 		.word	.LC1
 784 0088 00000000 		.word	mainTask
 785              		.cfi_endproc
 786              	.LFE132:
 788              		.comm	defaultTaskHandle,4,4
 789              		.comm	hpcd_USB_FS,936,4
 790              		.comm	hdma_usart2_tx,68,4
 791              		.comm	hdma_usart2_rx,68,4
 792              		.comm	hspi2,100,4
 793              		.comm	hi2c2,76,4
 794              		.comm	hadc1,84,4
 795              		.comm	CM_Handler_Queue,4,4
 796              		.comm	magn,12,4
 797              		.comm	accel,12,4
 798              		.comm	gyro,12,4
 799              		.comm	DMA_Sensor_TxComplete,1,1
 800              		.comm	DMA_Sensor_RxComplete,1,1
 801              		.comm	DMA_Bluetooth_TxComplete,1,1
 802              		.comm	DMA_Bluetooth_RxComplete,1,1
 803              		.section	.rodata.str1.4,"aMS",%progbits,1
 804              		.align	2
 805              	.LC0:
 806 0000 5372632F 		.ascii	"Src/main.c\000"
 806      6D61696E 
 806      2E6300
 807 000b 00       		.space	1
 808              	.LC1:
 809 000c 6D61696E 		.ascii	"mainTask\000"
 809      5461736B 
 809      00
 810              		.text
 811              	.Letext0:
 812              		.file 3 "/opt/gcc-arm-none-eabi-5_4-2016q3/arm-none-eabi/include/machine/_default_types.h"
 813              		.file 4 "/opt/gcc-arm-none-eabi-5_4-2016q3/arm-none-eabi/include/sys/_stdint.h"
 814              		.file 5 "Drivers/CMSIS/Device/ST/STM32F3xx/Include/stm32f303xc.h"
 815              		.file 6 "Drivers/CMSIS/Device/ST/STM32F3xx/Include/stm32f3xx.h"
 816              		.file 7 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_def.h"
 817              		.file 8 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_rcc.h"
 818              		.file 9 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_rcc_ex.h"
 819              		.file 10 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_dma.h"
 820              		.file 11 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_adc_ex.h"
 821              		.file 12 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_adc.h"
 822              		.file 13 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_i2c.h"
 823              		.file 14 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_pcd.h"
 824              		.file 15 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_spi.h"
 825              		.file 16 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_tim.h"
 826              		.file 17 "Middlewares/Third_Party/FreeRTOS/Source/include/task.h"
ARM GAS  /tmp/ccMyeQ73.s 			page 31


 827              		.file 18 "Middlewares/Third_Party/FreeRTOS/Source/include/queue.h"
 828              		.file 19 "Middlewares/Third_Party/FreeRTOS/Source/CMSIS_RTOS/cmsis_os.h"
 829              		.file 20 "Drivers/CMSIS/Include/core_cm4.h"
 830              		.file 21 "Inc/usart.h"
 831              		.file 22 "Inc/internal_sensors.h"
 832              		.file 23 "Inc/SensorDataHandler.h"
 833              		.file 24 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal.h"
 834              		.file 25 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_i2c_ex.h"
 835              		.file 26 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_cortex.h"
 836              		.file 27 "Inc/gpio.h"
 837              		.file 28 "Inc/ControllerAreaNetwork.h"
ARM GAS  /tmp/ccMyeQ73.s 			page 32


DEFINED SYMBOLS
                            *ABS*:00000000 main.c
     /tmp/ccMyeQ73.s:22     .text.mainTask:00000000 $t
     /tmp/ccMyeQ73.s:26     .text.mainTask:00000000 mainTask
     /tmp/ccMyeQ73.s:51     .text.initPort:00000000 $t
     /tmp/ccMyeQ73.s:56     .text.initPort:00000000 initPort
     /tmp/ccMyeQ73.s:70     .text.initGpio:00000000 $t
     /tmp/ccMyeQ73.s:75     .text.initGpio:00000000 initGpio
     /tmp/ccMyeQ73.s:88     .text.initPwm:00000000 $t
     /tmp/ccMyeQ73.s:93     .text.initPwm:00000000 initPwm
     /tmp/ccMyeQ73.s:105    .text.StartDefaultTask:00000000 $t
     /tmp/ccMyeQ73.s:110    .text.StartDefaultTask:00000000 StartDefaultTask
     /tmp/ccMyeQ73.s:135    .text.HAL_TIM_PeriodElapsedCallback:00000000 $t
     /tmp/ccMyeQ73.s:140    .text.HAL_TIM_PeriodElapsedCallback:00000000 HAL_TIM_PeriodElapsedCallback
     /tmp/ccMyeQ73.s:165    .text.HAL_TIM_PeriodElapsedCallback:00000010 $d
     /tmp/ccMyeQ73.s:170    .text._Error_Handler:00000000 $t
     /tmp/ccMyeQ73.s:175    .text._Error_Handler:00000000 _Error_Handler
     /tmp/ccMyeQ73.s:190    .text.MX_ADC1_Init:00000000 $t
     /tmp/ccMyeQ73.s:194    .text.MX_ADC1_Init:00000000 MX_ADC1_Init
     /tmp/ccMyeQ73.s:302    .text.MX_ADC1_Init:00000084 $d
                            *COM*:00000054 hadc1
     /tmp/ccMyeQ73.s:308    .text.MX_I2C2_Init:00000000 $t
     /tmp/ccMyeQ73.s:312    .text.MX_I2C2_Init:00000000 MX_I2C2_Init
     /tmp/ccMyeQ73.s:384    .text.MX_I2C2_Init:00000058 $d
                            *COM*:0000004c hi2c2
     /tmp/ccMyeQ73.s:392    .text.MX_SPI2_Init:00000000 $t
     /tmp/ccMyeQ73.s:396    .text.MX_SPI2_Init:00000000 MX_SPI2_Init
     /tmp/ccMyeQ73.s:457    .text.MX_SPI2_Init:00000048 $d
                            *COM*:00000064 hspi2
     /tmp/ccMyeQ73.s:464    .text.MX_USB_PCD_Init:00000000 $t
     /tmp/ccMyeQ73.s:468    .text.MX_USB_PCD_Init:00000000 MX_USB_PCD_Init
     /tmp/ccMyeQ73.s:512    .text.MX_USB_PCD_Init:0000002c $d
                            *COM*:000003a8 hpcd_USB_FS
     /tmp/ccMyeQ73.s:519    .text.SystemClock_Config:00000000 $t
     /tmp/ccMyeQ73.s:524    .text.SystemClock_Config:00000000 SystemClock_Config
     /tmp/ccMyeQ73.s:661    .text.SystemClock_Config:000000bc $d
     /tmp/ccMyeQ73.s:668    .text.main:00000000 $t
     /tmp/ccMyeQ73.s:673    .text.main:00000000 main
     /tmp/ccMyeQ73.s:783    .text.main:00000084 $d
                            *COM*:00000004 defaultTaskHandle
                            *COM*:00000044 hdma_usart2_tx
                            *COM*:00000044 hdma_usart2_rx
                            *COM*:00000004 CM_Handler_Queue
                            *COM*:0000000c magn
                            *COM*:0000000c accel
                            *COM*:0000000c gyro
                            *COM*:00000001 DMA_Sensor_TxComplete
                            *COM*:00000001 DMA_Sensor_RxComplete
                            *COM*:00000001 DMA_Bluetooth_TxComplete
                            *COM*:00000001 DMA_Bluetooth_RxComplete
     /tmp/ccMyeQ73.s:804    .rodata.str1.4:00000000 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
vTaskDelay
osDelay
HAL_IncTick
ARM GAS  /tmp/ccMyeQ73.s 			page 33


HAL_ADC_Init
HAL_ADCEx_MultiModeConfigChannel
HAL_ADC_ConfigChannel
HAL_I2C_Init
HAL_I2CEx_ConfigAnalogFilter
HAL_I2CEx_ConfigDigitalFilter
HAL_SPI_Init
HAL_PCD_Init
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_RCCEx_PeriphCLKConfig
HAL_RCC_GetHCLKFreq
HAL_SYSTICK_Config
HAL_SYSTICK_CLKSourceConfig
HAL_NVIC_SetPriority
HAL_Init
MX_GPIO_Init
MX_DMA_Init
MX_CAN_Init
MX_I2C1_Init
MX_SPI1_Init
MX_TIM1_Init
MX_TIM2_Init
MX_TIM3_Init
MX_TIM4_Init
MX_TIM8_Init
MX_TIM15_Init
MX_TIM16_Init
MX_TIM17_Init
MX_UART4_Init
MX_UART5_Init
MX_USART2_UART_Init
MX_USART3_UART_Init
initHardware
xTaskCreate
osKernelStart
